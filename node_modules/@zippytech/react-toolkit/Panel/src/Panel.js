'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CLASS_NAME = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('react-dom');

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _reactClass = require('@zippytech/react-class');

var _NotifyResize = require('../../NotifyResize');

var _cleanProps = require('../../common/cleanProps');

var _cleanProps2 = _interopRequireDefault(_cleanProps);

var _assign = require('../../common/assign');

var _assign2 = _interopRequireDefault(_assign);

var _join = require('../../common/join');

var _join2 = _interopRequireDefault(_join);

var _shouldComponentUpdate2 = require('../../common/shouldComponentUpdate');

var _shouldComponentUpdate3 = _interopRequireDefault(_shouldComponentUpdate2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Copyright (c) 2015-present, Zippy Technologies
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * This source code is licensed under the MIT license found in the
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * LICENSE file in the root directory of this source tree.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */

var CLASS_NAME = 'zippy-react-toolkit-panel';

var ZippyPanel = function (_Component) {
  _inherits(ZippyPanel, _Component);

  function ZippyPanel(props) {
    _classCallCheck(this, ZippyPanel);

    var _this = _possibleConstructorReturn(this, (ZippyPanel.__proto__ || Object.getPrototypeOf(ZippyPanel)).call(this, props));

    (0, _reactClass.autoBind)(_this);

    _this.state = {
      width: null,
      height: null,
      titleWidth: null,
      titleHeight: null
    };

    _this.setUpTitleBarRef = function (node) {
      return _this.titleBarNode = node;
    };
    _this.setBodyRef = function (node) {
      return _this.bodyNode = node;
    };
    return _this;
  }

  _createClass(ZippyPanel, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      this.domNode = (0, _reactDom.findDOMNode)(this);
    }
  }, {
    key: 'shouldComponentUpdate',
    value: function shouldComponentUpdate(nextProps, nextState) {
      return (0, _shouldComponentUpdate3.default)(this, nextProps, nextState);
    }
  }, {
    key: 'render',
    value: function render() {
      var _this2 = this;

      var props = this.props;

      var className = (0, _join2.default)(props.rootClassName, props.rootClassName + '--title-bar-position-' + props.titleBarPosition, props.rootClassName + '--theme-' + props.theme, props.rtl && props.rootClassName + '--rtl', this.getTitleRotateClassName(), props.className);

      var style = (0, _assign2.default)({}, this.props.style);

      if (this.isRotated()) {
        (0, _assign2.default)(style, this.getRootRotationStyle());
      }

      return _react2.default.createElement(
        'div',
        _extends({
          key: 'panel'
        }, (0, _cleanProps2.default)(props, ZippyPanel.propTypes), {
          ref: function ref(el) {
            return _this2.rootNode = el;
          },
          className: className,
          style: style
        }),
        this.renderTitleBar(),
        this.props.titleBarPosition === 'bottom' && this.props.renderFooter(this.props),
        this.renderBody(),
        this.props.titleBarPosition !== 'bottom' && this.props.renderFooter(this.props),
        this.props.directChildren,
        this.isRotated() ? _react2.default.createElement(_NotifyResize.NotifyResize, { notifyOnMount: true, onResize: this.onResize }) : null
      );
    }
  }, {
    key: 'renderTitle',
    value: function renderTitle() {
      var props = this.props;

      var className = (0, _join2.default)(props.titleClassName, props.rootClassName + '__title', props.titleAlign && props.rootClassName + '__title--align-' + props.titleAlign);

      var children = props.title;
      if (props.titleIcon) {
        var titleIcon = _react2.default.cloneElement(props.titleIcon, {
          key: 'titleIcon'
        });
        if (Array.isArray(children)) {
          children = [titleIcon].concat(_toConsumableArray(children));
        } else {
          children = [titleIcon, children];
        }
      }

      var domProps = {
        key: 'title',
        className: className,
        children: children,
        style: props.titleStyle
      };

      var result = void 0;
      if (typeof props.title === 'function') {
        result = props.title(domProps, props);
      }

      if (result == null) {
        result = _react2.default.createElement('div', domProps);
      }

      return result;
    }
  }, {
    key: 'renderTitleBar',
    value: function renderTitleBar() {
      var _props = this.props,
          titleBarPosition = _props.titleBarPosition,
          titleBarStyle = _props.titleBarStyle,
          rootClassName = _props.rootClassName;

      var style = _extends({}, titleBarStyle);
      var result = void 0;

      if (this.props.renderTitleBar === false) {
        return null;
      }

      if (this.isRotated() && this.state.height !== null) {
        var computedStyle = global.getComputedStyle(this.domNode);
        var topBottomBorderWidth = global.parseInt(computedStyle.borderTopWidth) + global.parseInt(computedStyle.borderBottomWidth);
        style.width = this.state.height - topBottomBorderWidth;
      }

      var children = [this.props.renderBeforeTitle(this.props), _react2.default.createElement(
        'div',
        {
          key: 'title_bar_wrapper',
          className: rootClassName + '__title-wrapper'
        },
        this.renderTitle()
      ), this.props.renderAfterTitle(this.props), this.isRotated() ? _react2.default.createElement(_NotifyResize.NotifyResize, {
        key: 'notify_resize',
        notifyOnMount: true,
        onResize: this.onTitleBarResize
      }) : null];

      var titleBarBorderTopClassName = rootClassName + '__title-bar-border-top';
      var titleBarBorderBottomClassName = rootClassName + '__title-bar-border-bottom';

      var titleBarClassName = (0, _join2.default)(rootClassName + '__title-bar', titleBarPosition === 'top' ? titleBarBorderBottomClassName : '', titleBarPosition === 'bottom' ? titleBarBorderTopClassName : '');

      var className = (0, _join2.default)(titleBarClassName, this.props.titleEllipsis && rootClassName + '__title-bar--ellipsis');

      var domProps = {
        children: children,
        style: style,
        className: className,
        ref: this.setUpTitleBarRef
      };

      if (typeof this.props.renderTitleBar === 'function') {
        result = this.props.renderTitleBar(domProps, this.props);
      }

      if (result === undefined) {
        result = _react2.default.createElement('div', _extends({ key: 'title_bar' }, domProps));
      }

      return result;
    }
  }, {
    key: 'renderBody',
    value: function renderBody() {
      var result = void 0;
      var className = (0, _join2.default)(this.props.rootClassName + '__body', this.props.bodyScrollable && this.props.rootClassName + '__body--scrollable', this.props.bodyClassName);

      var style = {};
      if (this.props.bodyStyle) {
        (0, _assign2.default)(style, this.props.bodyStyle);
      }

      var children = void 0;
      if (typeof this.props.children === 'function') {
        children = this.props.children(this.props, this.state);
      } else {
        children = this.props.children;
      }

      var domProps = {
        style: style,
        className: className,
        children: children,
        ref: this.setBodyRef,
        key: 'body'
      };

      if (this.props.renderBody) {
        result = this.props.renderBody(domProps, this.props);
      }

      if (result == null) {
        result = _react2.default.createElement('div', domProps);
      }

      return result;
    }
  }, {
    key: 'onResize',
    value: function onResize(_ref) {
      var width = _ref.width,
          height = _ref.height;

      if (this.props.onResize) {
        this.props.onResize({
          width: width,
          height: height
        });
      }

      this.setState({
        width: width,
        height: height
      });
    }
  }, {
    key: 'onTitleBarResize',
    value: function onTitleBarResize(_ref2) {
      var width = _ref2.width,
          height = _ref2.height;

      this.setState({
        titleWidth: width,
        titleHeight: height
      });
    }
  }, {
    key: 'getRootRotationStyle',
    value: function getRootRotationStyle() {
      var style = {};
      if (this.isRotated && this.titleHeight !== null) {
        if (this.props.titleBarPosition === 'left') {
          style.paddingLeft = this.state.titleHeight;
        } else if (this.props.titleBarPosition === 'right') {
          style.paddingRight = this.state.titleHeight;
        }
      }
      return style;
    }

    /**
     * titleRotate defaults to
     * - 90 for left
     * 90 for right
     * @instance props.titleRotate && props.titleBarPosition
     * @return {String} className
     */

  }, {
    key: 'getTitleRotateClassName',
    value: function getTitleRotateClassName() {
      var className = '';

      if (!this.isRotated()) {
        return null;
      }

      if (this.props.titleRotate != null) {
        className = this.props.rootClassName + '--title-rotate-' + this.props.titleRotate;
      } else {
        var titleRotate = void 0;
        if (this.props.titleBarPosition === 'left') {
          titleRotate = -90;
        } else if (this.props.titleBarPosition === 'right') {
          titleRotate = 90;
        }

        className = this.props.rootClassName + '--title-rotate-' + titleRotate;
      }

      return className;
    }
  }, {
    key: 'getDOMRootNode',
    value: function getDOMRootNode() {
      return this.rootNode;
    }
  }, {
    key: 'getDOMTitleBarNode',
    value: function getDOMTitleBarNode() {
      return this.titleBarNode;
    }
  }, {
    key: 'getBodyNode',
    value: function getBodyNode() {
      return this.bodyNode;
    }
  }, {
    key: 'isRotated',
    value: function isRotated() {
      return this.props.titleBarPosition === 'left' || this.props.titleBarPosition === 'right';
    }
  }]);

  return ZippyPanel;
}(_react.Component);

ZippyPanel.defaultProps = {
  rootClassName: CLASS_NAME,
  rtl: false,
  theme: 'default',

  // title
  title: '',
  titleBarPosition: 'top',
  titleEllipsis: false,
  titleAlign: null,
  titleRotate: null,
  renderBeforeTitle: function renderBeforeTitle() {
    return null;
  },
  renderAfterTitle: function renderAfterTitle() {
    return null;
  },

  // body
  renderBody: null,
  bodyScrollable: true,

  // footer
  renderFooter: function renderFooter() {
    return null;
  }
};

ZippyPanel.propTypes = {
  rootClassName: _propTypes2.default.string,
  theme: _propTypes2.default.string,
  shouldComponentUpdate: _propTypes2.default.func,
  rtl: _propTypes2.default.bool,
  bodyScrollable: _propTypes2.default.bool,

  // title
  title: _propTypes2.default.oneOfType([_propTypes2.default.node, _propTypes2.default.func]),
  titleIcon: _propTypes2.default.node,
  titleClassName: _propTypes2.default.string,
  titleBarPosition: _propTypes2.default.oneOf(['top', 'bottom', 'left', 'right']),
  titleAlign: _propTypes2.default.oneOf(['start', 'end', 'center', 'left', 'right']),
  titleRotate: _propTypes2.default.oneOf([90, '90', -90, '-90']),
  renderBeforeTitle: _propTypes2.default.func,
  renderAfterTitle: _propTypes2.default.func,
  renderTitleBar: _propTypes2.default.oneOfType([_propTypes2.default.func, _propTypes2.default.bool]),
  titleStyle: _propTypes2.default.object,
  titleBarStyle: _propTypes2.default.object,
  titleEllipsis: _propTypes2.default.bool,

  // body
  children: _propTypes2.default.oneOfType([_propTypes2.default.func, _propTypes2.default.any]),
  renderBody: _propTypes2.default.func,
  bodyClassName: _propTypes2.default.string,
  bodyStyle: _propTypes2.default.object,

  // undocumented props
  directChildren: _propTypes2.default.node,

  // footer
  renderFooter: _propTypes2.default.func
};

exports.CLASS_NAME = CLASS_NAME;
exports.default = ZippyPanel;
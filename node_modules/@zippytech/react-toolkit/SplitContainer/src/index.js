'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isMobile = exports.Side = exports.Splitter = undefined;

var _SplitContainer$propT;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _reactDom = require('react-dom');

var _autoBind = require('@zippytech/react-class/autoBind');

var _autoBind2 = _interopRequireDefault(_autoBind);

var _Flex = require('../../Flex');

var _uglified = require('@zippytech/uglified');

var _uglified2 = _interopRequireDefault(_uglified);

var _join = require('../../common/join');

var _join2 = _interopRequireDefault(_join);

var _clamp = require('../../common/clamp');

var _clamp2 = _interopRequireDefault(_clamp);

var _isMobile = require('../../common/isMobile');

var _isMobile2 = _interopRequireDefault(_isMobile);

var _cleanProps = require('../../common/cleanProps');

var _cleanProps2 = _interopRequireDefault(_cleanProps);

var _shouldComponentUpdate2 = require('../../common/shouldComponentUpdate');

var _shouldComponentUpdate3 = _interopRequireDefault(_shouldComponentUpdate2);

var _Splitter = require('./Splitter');

var _Splitter2 = _interopRequireDefault(_Splitter);

var _isNumber = require('./isNumber');

var _isNumber2 = _interopRequireDefault(_isNumber);

var _getTransitionEnd = require('./getTransitionEnd');

var _getTransitionEnd2 = _interopRequireDefault(_getTransitionEnd);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Copyright (c) 2015-present, Zippy Technologies
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * This source code is licensed under the MIT license found in the
file in the root directory of this source tree.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */

var emptyFn = function emptyFn() {};
var returnFalse = function returnFalse() {
  return false;
};

var raf = global ? global.requestAnimationFrame : setTimeout;
var cancelRaf = global ? global.cancelAnimationFrame : clearTimeout;

var PERCENTAGE_RE = /%/;

var minMax = function minMax(min, max) {
  return {
    min: Math.min(min, max),
    max: Math.max(min, max)
  };
};

var isPercentage = function isPercentage(n) {
  if ((0, _isNumber2.default)(n)) {
    return false;
  }

  return typeof n == 'string' && (0, _isNumber2.default)(n.replace(PERCENTAGE_RE, ''));
};

var getSizeName = function getSizeName(props) {
  return props.orientation == 'horizontal' ? 'height' : 'width';
};

var getOtherSizeName = function getOtherSizeName(props) {
  return props.orientation == 'horizontal' ? 'width' : 'height';
};

var getMaxSizeName = function getMaxSizeName(props) {
  return props.orientation == 'horizontal' ? 'maxHeight' : 'maxWidth';
};

var getMinSizeName = function getMinSizeName(props) {
  return props.orientation == 'horizontal' ? 'minHeight' : 'minWidth';
};

var getPositionNames = function getPositionNames(props) {
  return props.orientation == 'horizontal' ? ['top', 'bottom'] : ['left', 'right'];
};

var toUpperFirst = function toUpperFirst(str) {
  return typeof str === 'string' ? str[0].toUpperCase() + str.substring(1) : '';
};

var getOffsetSizeName = function getOffsetSizeName(props) {
  var sizeName = getSizeName(props);

  return 'client' + toUpperFirst(sizeName);
};

var getOffsetSize = function getOffsetSize(node) {
  if (node.getBoundingClientRect) {
    var rect = node.getBoundingClientRect();

    return {
      width: rect.width,
      height: rect.height
    };
  }

  return {
    width: node.offsetWidth,
    height: node.offsetHeight
  };
};

var getMinMaxSizes = function getMinMaxSizes() {
  var node = (0, _reactDom.findDOMNode)(this);
  var rect = node.getBoundingClientRect();
  var sizeName = getSizeName(this.props);
  var totalSize = rect[sizeName];
  var splitterSize = _isMobile2.default ? this.p.mobileSplitterSize || this.p.splitterSize : this.p.splitterSize;

  var maxSizes = this.p.maxSize || [];
  var minSizes = this.p.minSize || [];

  var minValues = [0, 1].map(function (index) {
    var minSize = minSizes[index];
    if (minSize) {
      if (isPercentage(minSize)) {
        return parseFloat(minSize, 10) * totalSize / 100 - splitterSize / 2;
      }
      return minSize;
    }
  });

  var maxValues = [0, 1].map(function (index) {
    var maxSize = maxSizes[index];
    if (maxSize) {
      if (isPercentage(maxSize)) {
        return parseFloat(maxSize, 10) * totalSize / 100 - splitterSize / 2;
      }
      return maxSize;
    }
  }).map(function (max, index) {
    if (max) {
      var min = minValues[index];
      var otherMin = minValues[1 - index] || 0;
      max = (0, _clamp2.default)(max, min, totalSize - otherMin - splitterSize);
    }

    return max;
  });

  return {
    minValues: minValues,
    maxValues: maxValues
  };
};

/**
 * node is the flex wrapper, node.firstChild is the Side, and node.firstChild.firstChild is the actual node
 * we are measuring the auto size for
 */
var getAutoSize = function getAutoSize(node) {
  // node.firstChild.firstChild may be a comment node,
  // so we're using node.firstChild.children[0],
  // since children does not contain comment nodes
  var targetNode = node.firstChild.children[0];
  if (!targetNode) {
    return {
      width: 0,
      height: 0
    };
  }

  var size = getOffsetSize(targetNode);
  var borderPadding = getBorderPaddingSize(node.firstChild);

  var result = {
    width: size.width + borderPadding.left + borderPadding.right,
    height: size.height + borderPadding.top + borderPadding.bottom
  };

  return result;
};

var toNumber = function toNumber(n) {
  return parseInt(n, 10);
};

var getBorderPaddingSize = function getBorderPaddingSize(node) {
  var computedStyle = global.getComputedStyle(node);

  return {
    left: toNumber(computedStyle.borderLeftWidth) + toNumber(computedStyle.paddingLeft),
    right: toNumber(computedStyle.borderRightWidth) + toNumber(computedStyle.paddingRight),
    top: toNumber(computedStyle.borderTopWidth) + toNumber(computedStyle.paddingTop),
    bottom: toNumber(computedStyle.borderBottomWidth) + toNumber(computedStyle.paddingBottom)
  };
};

var SplitSide = function (_React$Component) {
  _inherits(SplitSide, _React$Component);

  function SplitSide() {
    _classCallCheck(this, SplitSide);

    return _possibleConstructorReturn(this, (SplitSide.__proto__ || Object.getPrototypeOf(SplitSide)).apply(this, arguments));
  }

  _createClass(SplitSide, [{
    key: 'shouldComponentUpdate',
    value: function shouldComponentUpdate(nextProps, nextState) {
      var shouldUpdate = (0, _shouldComponentUpdate3.default)(this, nextProps, nextState);

      return shouldUpdate;
    }
  }, {
    key: 'render',
    value: function render() {
      var Factory = _Flex.Item;
      var actualProps = (0, _cleanProps2.default)(this.props, SplitSide.propTypes);

      if (this.props.orientation == 'vertical' && this.props.children && this.props.children.props && this.props.children.props.isSplitContainer) {
        Factory = _Flex.Flex;
        actualProps.flexGrow = 1;
        actualProps.flexShrink = 1;
        actualProps.alignItems = 'stretch';
      }

      if (this.props.showWarnings && this.props.fill && _react2.default.Children.toArray(this.props.children).length > 1) {
        console.warn('The side at index ' + this.props.index + ' is configured with "fillSides", but has multiple children. Please only use one child when using "fillSides"');
      }
      return _react2.default.createElement(Factory, _extends({}, actualProps, {
        children: this.props.children,
        index: this.props.index
      }));
    }
  }]);

  return SplitSide;
}(_react2.default.Component);

SplitSide.propTypes = {
  shouldComponentUpdate: _propTypes2.default.func,
  fill: _propTypes2.default.bool,
  isSplitContainerSide: _propTypes2.default.bool,
  orientation: _propTypes2.default.string.isRequired,
  index: _propTypes2.default.number,
  splitAtValue: _propTypes2.default.any,
  splitAtIndex: _propTypes2.default.number,
  children: function children(props, propsName) {
    if (props.index == props.splitAtIndex && props.splitAtValue == 'auto' && _react2.default.Children.toArray(props.children).length > 1) {
      return new Error('The SplitContainer side at index ' + props.splitAtIndex + ' has "auto" splitValue but has multiple children. It should only have 1 child!');
    }
  }
};

var Side = function (_React$Component2) {
  _inherits(Side, _React$Component2);

  function Side() {
    _classCallCheck(this, Side);

    return _possibleConstructorReturn(this, (Side.__proto__ || Object.getPrototypeOf(Side)).apply(this, arguments));
  }

  _createClass(Side, [{
    key: 'render',
    value: function render() {
      return null;
    }
  }]);

  return Side;
}(_react2.default.Component);

Side.defaultProps = {
  isSplitContainerSide: true
};

exports.Splitter = _Splitter2.default;
exports.Side = Side;
exports.isMobile = _isMobile2.default;


var TRANSITION_DURATION = '0.4s';

var SPLIT_CONTAINER_INSTANCE_FOCUSED = false;

var SplitContainer = function (_React$Component3) {
  _inherits(SplitContainer, _React$Component3);

  function SplitContainer(props) {
    _classCallCheck(this, SplitContainer);

    var _this3 = _possibleConstructorReturn(this, (SplitContainer.__proto__ || Object.getPrototypeOf(SplitContainer)).call(this, props));

    (0, _autoBind2.default)(_this3);

    _this3.refSplitter = function (s) {
      _this3.splitter = s;
    };

    var collapsedIndex = props.defaultCollapsedIndex;

    if (collapsedIndex != 0 && collapsedIndex != 1) {
      collapsedIndex = null;
    }

    _this3.state = {
      focused: false,
      dragging: false,
      splitAt: props.defaultSplitAt,
      collapsedIndex: collapsedIndex
    };
    return _this3;
  }

  _createClass(SplitContainer, [{
    key: 'onTransitionEnd',
    value: function onTransitionEnd(event) {
      event && event.target && event.target.removeEventListener((0, _getTransitionEnd2.default)(), this.onTransitionEnd, false);

      this.setState({
        collapsing: false,
        expanding: false,

        collapsingIndex: null,
        expandingIndex: null,
        constrainingIndex: null,

        styles: null,

        expandStyle: null,
        collapseStyle: null,

        splitterStyle: null
      });
    }
  }, {
    key: 'hasTransition',
    value: function hasTransition() {
      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props;

      if (props.transition === false) {
        return false;
      }
      return !!(props.transition || props.transitionDuration);
    }
  }, {
    key: 'UNSAFE_componentWillReceiveProps',
    value: function UNSAFE_componentWillReceiveProps(nextProps) {
      var props = this.p;

      var collapsedIndex = props.collapsedIndex;
      var nextCollapsedIndex = this.prepareCollapsedIndex(nextProps);

      if (this.hasTransition(props)) {
        this.doTransition(nextProps, collapsedIndex, nextCollapsedIndex);
      }
    }
  }, {
    key: 'doTransition',
    value: function doTransition(props, oldCollapsed, newCollapsed) {
      var collapsing = oldCollapsed == null && (newCollapsed == 0 || newCollapsed == 1);
      var expanding = (oldCollapsed == 0 || oldCollapsed == 1) && newCollapsed == null;

      if (collapsing) {
        this.transitionCollapse(props, newCollapsed);
      } else if (expanding) {
        this.transitionExpand(props, oldCollapsed);
      }
    }
  }, {
    key: 'getNodes',
    value: function getNodes(nodes) {
      if (nodes) {
        return nodes.map(_reactDom.findDOMNode);
      }

      return [(0, _reactDom.findDOMNode)(this.first), (0, _reactDom.findDOMNode)(this.second), (0, _reactDom.findDOMNode)(this.splitter)];
    }
  }, {
    key: 'transitionExpand',
    value: function transitionExpand(props, expandIndex) {
      var _styles$constrainingI,
          _styles$expandIndex,
          _splitterStyle,
          _this4 = this;

      var nodes = this.getNodes();

      var transitionDuration = {
        transitionDuration: props.transitionDuration || TRANSITION_DURATION
      };

      var constrainingIndex = 1 - expandIndex;

      var sizeName = getSizeName(props);
      var otherSizeName = getOtherSizeName(props);

      var sideName = props.orientation == 'horizontal' ? constrainingIndex == 1 ? 'top' : 'bottom' : constrainingIndex == 1 ? 'left' : 'right';

      var otherSideName = props.orientation == 'horizontal' ? constrainingIndex == 1 ? 'left' : 'right' : constrainingIndex == 1 ? 'top' : 'bottom';

      var marginName = 'margin' + toUpperFirst(sideName);

      var _p = this.p,
          splitAtIndex = _p.splitAtIndex,
          asPercentage = _p.asPercentage;
      var splitAtValue = this.p.splitAtValue;


      var sizes = nodes.map(getOffsetSize);

      if (splitAtValue == 'auto') {
        sizes[splitAtIndex] = getAutoSize(nodes[splitAtIndex]);
      }

      var styles = [];
      var totalSize = getOffsetSize(nodes[0])[sizeName] + getOffsetSize(nodes[1])[sizeName];

      if (splitAtValue == 'auto') {
        splitAtValue = sizes[splitAtIndex][sizeName];
      }

      var expandSize = splitAtValue;

      if (asPercentage) {
        expandSize = splitAtValue * totalSize / 100;
      }

      if (expandIndex == 1) {
        expandSize = totalSize - expandSize;
      }

      if (splitAtIndex == 1) {
        expandSize = totalSize - expandSize;
      }

      styles[constrainingIndex] = (_styles$constrainingI = {}, _defineProperty(_styles$constrainingI, marginName, sizes[2][sizeName]), _defineProperty(_styles$constrainingI, otherSizeName, sizes[2][otherSizeName]), _styles$constrainingI);

      var _getMinMaxSizes$call = getMinMaxSizes.call(this),
          minValues = _getMinMaxSizes$call.minValues,
          maxValues = _getMinMaxSizes$call.maxValues;

      expandSize = (0, _clamp2.default)(expandSize, minValues[expandIndex], maxValues[expandIndex]);

      styles[expandIndex] = (_styles$expandIndex = {
        position: 'absolute',
        zIndex: props.animationZIndex
      }, _defineProperty(_styles$expandIndex, otherSizeName, sizes[2][otherSizeName]), _defineProperty(_styles$expandIndex, sizeName, expandSize), _defineProperty(_styles$expandIndex, sideName, -expandSize), _defineProperty(_styles$expandIndex, otherSideName, 0), _styles$expandIndex);

      var splitterStyle = (_splitterStyle = {
        position: 'absolute',
        zIndex: props.animationZIndex
      }, _defineProperty(_splitterStyle, sideName, 0), _defineProperty(_splitterStyle, otherSideName, 0), _splitterStyle);

      this.setState({
        expandingIndex: expandIndex,
        styles: styles,
        skipUpdate: true,
        splitterStyle: splitterStyle
      }, function () {
        raf(function () {
          if (!expandSize) {
            if (props.splitAtValue == 'auto') {
              props.showWarnings && console && console.warn && console.warn('You are using \'splitAt="auto"\' but your content in side ' + constrainingIndex + ' is probably \'display:"block"\'.\n              Use \'display: "inline-block"\' for transitions on expand/collapse to work properly.');
            }

            return _this4.onTransitionEnd();
          }

          var expandNode = nodes[expandIndex];

          expandNode.addEventListener((0, _getTransitionEnd2.default)(), _this4.onTransitionEnd, false);

          raf(function () {
            var _extends2;

            styles[expandIndex] = _extends({}, styles[expandIndex], (_extends2 = {}, _defineProperty(_extends2, sizeName, expandSize), _defineProperty(_extends2, sideName, 0), _extends2), transitionDuration);

            _this4.setState({
              skipUpdate: false,
              splitterStyle: _extends({}, splitterStyle, _defineProperty({}, sideName, expandSize), transitionDuration),

              styles: styles
            });
          });
        });
      });
    }
  }, {
    key: 'transitionCollapse',
    value: function transitionCollapse(props, nextCollapsedIndex) {
      var _styles$expandIndex2,
          _styles$collapsingInd,
          _splitterStyle2,
          _this5 = this;

      var nodes = this.getNodes();

      var expandIndex = 1 - nextCollapsedIndex;
      var collapsingIndex = nextCollapsedIndex;

      var sizeName = getSizeName(props);
      var otherSizeName = getOtherSizeName(props);

      var sideName = props.orientation == 'horizontal' ? nextCollapsedIndex == 1 ? 'bottom' : 'top' : nextCollapsedIndex == 1 ? 'right' : 'left';
      var otherSideName = props.orientation == 'horizontal' ? nextCollapsedIndex == 1 ? 'right' : 'left' : nextCollapsedIndex == 1 ? 'bottom' : 'top';

      var marginName = 'margin' + toUpperFirst(sideName);

      var transitionDuration = {
        transitionDuration: props.transitionDuration || TRANSITION_DURATION,
        transitionProperty: sideName
      };

      var sizes = nodes.map(getOffsetSize);

      var styles = [];

      styles[expandIndex] = (_styles$expandIndex2 = {}, _defineProperty(_styles$expandIndex2, marginName, sizes[2][sizeName]), _defineProperty(_styles$expandIndex2, otherSizeName, sizes[expandIndex][otherSizeName]), _styles$expandIndex2);

      styles[collapsingIndex] = (_styles$collapsingInd = {
        position: 'absolute',
        zIndex: props.animationZIndex
      }, _defineProperty(_styles$collapsingInd, otherSizeName, sizes[collapsingIndex][otherSizeName]), _defineProperty(_styles$collapsingInd, sizeName, sizes[collapsingIndex][sizeName]), _defineProperty(_styles$collapsingInd, sideName, 0), _defineProperty(_styles$collapsingInd, otherSideName, 0), _styles$collapsingInd);

      var splitterStyle = (_splitterStyle2 = {
        position: 'absolute',
        zIndex: props.animationZIndex,

        width: sizes[2].width,
        height: sizes[2].height

      }, _defineProperty(_splitterStyle2, sideName, sizes[collapsingIndex][sizeName]), _defineProperty(_splitterStyle2, otherSideName, 0), _splitterStyle2);

      this.setState({
        collapsing: true,

        collapsingIndex: collapsingIndex,

        sizes: sizes,
        styles: styles,

        splitterStyle: splitterStyle
      }, function () {
        raf(function () {
          var collapseNode = nodes[collapsingIndex];

          collapseNode.addEventListener((0, _getTransitionEnd2.default)(), _this5.onTransitionEnd, false);

          raf(function () {
            styles[collapsingIndex] = _extends({}, styles[collapsingIndex], _defineProperty({}, sideName, -sizes[collapsingIndex][sizeName]), transitionDuration);

            _this5.setState({
              splitterStyle: _extends({}, splitterStyle, _defineProperty({}, sideName, 0), transitionDuration),
              styles: styles
            });
          });
        });
      });
    }
  }, {
    key: 'prepareChildren',
    value: function prepareChildren(props) {
      var splitterProps = void 0;
      var firstProps = void 0;
      var secondProps = void 0;

      var children = [];

      var i = -1;
      _react2.default.Children.toArray(props.children).forEach(function (child) {
        if (child) {
          if (child.props && child.props.isSplitter) {
            splitterProps = child.props;
            return;
          }
          i++;
        }
        if (child && child.props) {
          if (child.props.isSplitter) {
            splitterProps = child.props;
            return;
          }

          if (child.props.isSplitContainerSide) {
            if (i == 1) {
              secondProps = child.props;
            }
            if (i == 0) {
              firstProps = child.props;
            }

            children.push(child.props.children);

            return;
          }
        }

        children.push(child);
      });

      return {
        children: children,
        firstProps: firstProps,
        secondProps: secondProps,
        splitterProps: splitterProps
      };
    }
  }, {
    key: 'prepareCollapsedIndex',
    value: function prepareCollapsedIndex(props) {
      var state = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.state;

      var collapsedIndex = props.collapsedIndex === undefined ? state.collapsedIndex : props.collapsedIndex;

      if (collapsedIndex !== 0 && collapsedIndex !== 1) {
        collapsedIndex = undefined;
      }

      return collapsedIndex;
    }
  }, {
    key: 'prepareClassNames',
    value: function prepareClassNames(props) {
      var children = props.children,
          collapsedIndex = props.collapsedIndex;


      var firstClassName = children[0] && children[0].props && children[0].props.className;
      var secondClassName = children[1] && children[1].props && children[1].props.className;

      var expandingIndex = this.state.expandingIndex;
      var constrainingIndex = this.state.constrainingIndex;

      var fillSides = props.fillSides;

      var fillFirst = Array.isArray(fillSides) ? fillSides[0] === true : fillSides === true;
      var fillSecond = Array.isArray(fillSides) ? fillSides[1] === true : fillSides === true;

      return [(0, _join2.default)(firstClassName, props.rootClassName + '__side', props.rootClassName + '__side--first', collapsedIndex == 0 ? this.state.collapsing ? props.rootClassName + '__side--collapsing' : props.rootClassName + '__side--collapsed' : '', expandingIndex == 0 && props.rootClassName + '__side--expanding', constrainingIndex == 0 && props.rootClassName + '__side--constraining', props.rootClassName + '__side--orientation-' + props.orientation, fillFirst && props.rootClassName + '__side--fill'), (0, _join2.default)(secondClassName, props.rootClassName + '__side', props.rootClassName + '__side--second', collapsedIndex == 1 ? this.state.collapsing ? props.rootClassName + '__side--collapsing' : props.rootClassName + '__side--collapsed' : '', expandingIndex == 1 && props.rootClassName + '__side--expanding', constrainingIndex == 1 && props.rootClassName + '__side--constraining', props.rootClassName + '__side--orientation-' + props.orientation, fillSecond && props.rootClassName + '__side--fill')];
    }
  }, {
    key: 'prepareSplitAt',
    value: function prepareSplitAt(props) {
      var result = props.splitAt == null ? this.state.splitAt : props.splitAt;

      if (result == null) {
        return 'auto';
      }

      return result;
    }
  }, {
    key: 'prepareProps',
    value: function prepareProps(thisProps) {
      var props = this.p = _extends({}, thisProps);

      var prepareChildrenResult = this.prepareChildren(props);
      var children = prepareChildrenResult.children,
          firstProps = prepareChildrenResult.firstProps,
          secondProps = prepareChildrenResult.secondProps;


      var splitterProps = _extends({
        iconSize: props.splitIconSize,
        size: props.splitterSize,
        mobileSize: props.mobileSplitterSize,
        mobileSplitterDragArea: props.mobileSplitterDragArea
      }, props.splitterProps, prepareChildrenResult.splitterProps);

      props.collapsedIndex = this.prepareCollapsedIndex(props);

      if (props.collapsedIndex !== 0 && props.collapsedIndex !== 1) {
        delete props.collapsedIndex;
      } else {
        props.notCollapsedIndex = 1 - props.collapsedIndex;
      }

      if (firstProps) {
        props.firstProps = firstProps;
      }

      if (secondProps) {
        props.secondProps = secondProps;
      }

      props.children = children;
      props.splitterProps = splitterProps;

      props.horizontal = props.orientation == 'horizontal';
      props.vertical = !props.horizontal;

      props.splitAt = this.prepareSplitAt(props);
      props.className = this.prepareClassName(props);

      props.sizeName = getSizeName(props);
      props.otherSizeName = getOtherSizeName(props);
      props.minSizeName = getMinSizeName(props);
      props.maxSizeName = getMaxSizeName(props);

      props.asPercentage = isPercentage(props.splitAt);

      var splitAt = props.splitAt;


      var splitAtIndex = 0;
      var splitAtValue = void 0;

      if (splitAt == 'auto') {
        splitAtValue = 'auto';
      } else if (splitAt == '-auto') {
        splitAtValue = 'auto';
        splitAtIndex = 1;
      } else {
        if (1 / splitAt == -Infinity) {
          // we need to check for -0
          // becase otherwise, when splitAt="-30%" and the user is dragging the splitter
          // max to the right, splitAt becomes -0
          // so unless we check for this, the left side will be minimized,
          // instead of the right side
          splitAtIndex = 1;
          splitAtValue = 0;
        }

        splitAtValue = parseFloat(splitAt, 10);

        if (splitAtValue < 0) {
          if (props.asPercentage) {
            splitAtValue = 100 - (100 + splitAtValue);
          } else {
            splitAtValue *= -1;
          }

          splitAtIndex = 1;
        }
      }

      props.splitAtIndex = splitAtIndex;
      props.splitAtValue = splitAtValue;
      props.splitterSize = splitterProps.size;
      props.mobileSplitterSize = splitterProps.mobileSize;

      var fixedIndex = props.fixedIndex;


      if (fixedIndex != 0 && fixedIndex != 1) {
        fixedIndex = -1;
      }

      var flexIndex = 1 - fixedIndex;

      props.fixedIndex = fixedIndex;
      props.flexIndex = flexIndex;

      props.styles = this.prepareStyles(props);
      props.classNames = this.prepareClassNames(props);
      props.splitterStyle = this.prepareSplitterStyle(props);

      return props;
    }
  }, {
    key: 'prepareSplitterStyle',
    value: function prepareSplitterStyle(props) {
      var style = this.state.splitterStyle;

      return style;
    }
  }, {
    key: 'prepareStyles',
    value: function prepareStyles(props) {
      var styles = [{}, {}];

      var sizeProps = props.sizeProps = [{
        flex: 'none'
      }, {
        flex: 'none'
      }];

      var collapsedIndex = props.collapsedIndex,
          notCollapsedIndex = props.notCollapsedIndex,
          splitAtIndex = props.splitAtIndex,
          splitAtValue = props.splitAtValue;


      var otherIndex = 1 - splitAtIndex;
      var hasCollapsed = collapsedIndex != undefined;

      var minSize = props.minSize;
      var maxSize = props.maxSize;

      var splitterSize = props.splitterSize;

      var maybePercentage = function maybePercentage(v) {
        return isPercentage(v) ? 'calc(' + v + ' - ' + splitterSize / 2 + 'px)' : v;
      };

      if (minSize != null && !Array.isArray(minSize)) {
        minSize = [minSize, minSize];
      }
      if (maxSize != null && !Array.isArray(maxSize)) {
        maxSize = [maxSize, maxSize];
      }

      if (minSize) {
        if (minSize[0] != null && collapsedIndex != 0) {
          styles[0][getMinSizeName(props)] = maybePercentage(minSize[0]);
        }
        if (minSize[1] != null && collapsedIndex != 1) {
          styles[1][getMinSizeName(props)] = maybePercentage(minSize[1]);
        }
      }

      if (maxSize) {
        if (maxSize[0] != null && notCollapsedIndex != 0) {
          styles[0][getMaxSizeName(props)] = maybePercentage(maxSize[0]);
        }
        if (maxSize[1] != null && notCollapsedIndex != 1) {
          styles[1][getMaxSizeName(props)] = maybePercentage(maxSize[1]);
        }
      }

      props.minSize = minSize;
      props.maxSize = maxSize;

      // splitAt specified as percentage?
      if (props.asPercentage) {
        sizeProps[splitAtIndex].flex = splitAtValue;
        // also add the flex as inline style
        styles[splitAtIndex].flex = splitAtValue;

        sizeProps[otherIndex].flex = 100 - splitAtValue;
        // also add the flex as inline style
        styles[otherIndex].flex = 100 - splitAtValue;
      } else {
        sizeProps[splitAtIndex].flex = 'none';
        sizeProps[otherIndex].flex = 1;

        styles[splitAtIndex][props.sizeName] = splitAtValue;
      }

      if (hasCollapsed) {
        styles[collapsedIndex][props.sizeName] = 0;
        styles[collapsedIndex][props.sizeName] = 0;

        sizeProps[collapsedIndex].flex = 'none';
        styles[collapsedIndex].flex = 'none';
        sizeProps[notCollapsedIndex].flex = 1;
      }

      if (this.state.expandingIndex != null) {
        sizeProps[1 - this.state.expandingIndex].flex = 1;
      }

      var stateStyles = this.state.styles;

      if (stateStyles) {
        if (stateStyles[0]) {
          styles[0] = _extends({}, stateStyles[0]);
        }

        if (stateStyles[1]) {
          styles[1] = _extends({}, stateStyles[1]);
        }
      }

      styles[0].overflow = 'hidden';
      styles[1].overflow = 'hidden';

      sizeProps[0].style = styles[0];
      sizeProps[1].style = styles[1];

      return styles;
    }
  }, {
    key: 'prepareClassName',
    value: function prepareClassName(props) {
      var rootClassName = props.rootClassName;
      return (0, _join2.default)(rootClassName, props.className, rootClassName + '--' + props.orientation, rootClassName + '--orientation-' + props.orientation, props.theme && rootClassName + '--theme-' + props.theme, props.locked && rootClassName + '--locked', props.bordered && rootClassName + '--bordered', this.isFocused() && rootClassName + '--focused', (props.collapsedIndex == 0 || props.collapsedIndex == 1) && this.state.collapsingIndex == null && rootClassName + '--collapsed', this.state.collapsingIndex != null && rootClassName + '--collapsing', this.state.expandingIndex != null && rootClassName + '--expanding', this.state.dragging && rootClassName + '--resizing', this.state.constrained && rootClassName + '--constrained');
    }
  }, {
    key: 'render',
    value: function render() {
      var _this6 = this;

      var props = this.p = this.prepareProps(this.props);

      var row = props.vertical;
      var column = props.horizontal;

      var splitterProps = props.splitterProps,
          collapsedIndex = props.collapsedIndex,
          fillSides = props.fillSides;


      var sizeProps = props.sizeProps;

      var fillFirst = Array.isArray(fillSides) ? fillSides[0] === true : fillSides === true;
      var fillSecond = Array.isArray(fillSides) ? fillSides[1] === true : fillSides === true;

      var newProps = [{
        flex: null,
        flexGrow: 1,
        flexShrink: 0,
        flexBasis: 'auto',
        className: (0, _join2.default)(props.classNames[0], props.firstProps ? props.firstProps.className : null),
        children: this.renderFirst()
      }, {
        flex: null,
        flexGrow: 1,
        flexShrink: 0,
        flexBasis: 'auto',
        className: (0, _join2.default)(props.classNames[1], props.secondProps ? props.secondProps.className : null),
        children: this.renderSecond()
      }];

      if (props.splitAtValue == 'auto' && props.splitAtIndex === collapsedIndex && this.state.collapsingIndex == null) {
        // when we have auto size for a region, in case it is collapsed
        // we need the Item to have flex none to allow the content be sized as is
        // and not wrap to another size
        newProps[props.splitAtIndex].flex = 'none';
        delete newProps[props.splitAtIndex].flexGrow;
      }

      var splitterStyle = _extends({}, (splitterProps || {}).style, props.splitterStyle);

      var keyboardNavigationProps = {};

      if (this.props.enableKeyboardNavigation) {
        keyboardNavigationProps.tabIndex = 0;
        keyboardNavigationProps.onKeyDown = this.onKeyDown;
      }

      var sCU = void 0;

      if (this.props.skipUpdateOnDrag && this.state.dragging || this.props.skipUpdateOnAnimate && (this.state.collapsingIndex != null || this.state.skipUpdate)) {
        sCU = returnFalse;
      }

      return _react2.default.createElement(
        _Flex.Flex,
        _extends({}, keyboardNavigationProps, (0, _cleanProps2.default)(this.props, SplitContainer.propTypes), {
          onFocus: this.onFocus,
          onBlur: this.onBlur,
          inline: props.inlineFlex,
          children: props.children,
          draggable: null,
          row: row,
          column: column,
          wrap: false,
          alignItems: 'stretch',
          className: props.className
        }),
        _react2.default.createElement(
          _Flex.Flex,
          _extends({}, sizeProps[0], {
            alignSelf: 'stretch',
            alignItems: 'stretch',
            ref: function ref(c) {
              _this6.first = c;
            }
          }),
          _react2.default.createElement(SplitSide, _extends({}, props.firstProps, newProps[0], {
            index: 0,
            shouldComponentUpdate: sCU,
            fill: fillFirst,
            orientation: props.orientation,
            splitAtValue: props.splitAtValue,
            splitAtIndex: props.splitAtIndex
          }))
        ),
        _react2.default.createElement(_Splitter2.default, _extends({}, splitterProps, {
          size: splitterProps.size == null ? SplitContainer.defaultProps.splitterSize : splitterProps.size,
          style: splitterStyle,
          ref: this.refSplitter,
          onDragStart: this.handleSplitterDragStart,
          onDrag: this.handleSplitterDrag,
          onDrop: this.handleSplitterDrop,
          onCollapse: this.handleCollapse,
          onExpand: this.handleExpand,
          orientation: props.orientation,
          locked: props.locked,
          draggable: props.draggable,
          constrained: !props.resizeProxy && this.state.constrained,
          collapsedIndex: props.collapsedIndex,
          collapsible: props.collapsible,
          rootClassName: props.rootClassName + '__splitter'
        })),
        _react2.default.createElement(
          _Flex.Flex,
          _extends({}, sizeProps[1], {
            alignSelf: 'stretch',
            alignItems: 'stretch',
            ref: function ref(c) {
              return _this6.second = c;
            }
          }),
          _react2.default.createElement(SplitSide, _extends({}, props.secondProps, newProps[1], {
            shouldComponentUpdate: sCU,
            orientation: props.orientation,
            index: 1,
            fill: fillSecond,
            splitAtValue: props.splitAtValue,
            splitAtIndex: props.splitAtIndex
          }))
        ),
        this.props.resizeProxy && this.renderResizeProxy(),
        this.renderCover()
      );
    }
  }, {
    key: 'onKeyDown',
    value: function onKeyDown(event) {
      var key = event.key;


      if (this.props.onKeyDown) {
        this.props.onKeyDown(event);
      }

      if (!this.props.enableKeyboardNavigation) {
        return;
      }

      if (key == 'Escape' && this.props.blurOnEscape && this.isFocused()) {
        this.blur();
        event.stopPropagation();
        event.preventDefault();

        return;
      }

      if (!SPLIT_CONTAINER_INSTANCE_FOCUSED) {
        // no SplitContainer instance is focused, so we don't handle keyboard navigation
        return;
      }

      // a SplitContainer instance is focused - although the event
      // may have occured lower in the hierarchy - so in child SplitContainer instances

      // but if the event was not handled - and no corresponding collapse/expand
      // action was possible for the child instance
      // the event comes up to this instance, which tries to handle the event

      var ctrlKey = event.ctrlKey || event.metaKey;
      var shiftKey = event.shiftKey;

      var handled = false;

      if (ctrlKey) {
        if (this.props.orientation == 'horizontal') {
          if (key === 'ArrowUp') {
            if (this.isCollapsed(1)) {
              if (this.isExpandable(1)) {
                this.expand(1);
                handled = true;
              }
            } else if (this.isCollapsible(0)) {
              this.collapse(0);
              handled = true;
            }
          }

          if (key === 'ArrowDown') {
            if (this.isCollapsed(0)) {
              if (this.isExpandable(0)) {
                this.expand(0);
                handled = true;
              }
            } else if (this.isCollapsible(1)) {
              this.collapse(1);
              handled = true;
            }
          }
        } else if (this.props.orientation == 'vertical') {
          if (key === 'ArrowLeft') {
            if (this.isCollapsed(1)) {
              if (this.isExpandable(1)) {
                this.expand(1);
                handled = true;
              }
            } else if (this.isCollapsible(0)) {
              this.collapse(0);
              handled = true;
            }
          }

          if (key === 'ArrowRight') {
            if (this.isCollapsed(0)) {
              if (this.isExpandable(0)) {
                this.expand(0);
                handled = true;
              }
            } else if (this.isCollapsible(1)) {
              this.collapse(1);
              handled = true;
            }
          }
        }

        if (key === 'ArrowLeft' || key === 'ArrowRight' || key === 'ArrowUp' || key === 'ArrowDown') {
          event.preventDefault();
          if (handled) {
            event.stopPropagation();
          }
        }

        return;
      }

      if (shiftKey && this.props.draggable) {
        if (!this.isCollapsed()) {
          if (this.props.orientation == 'horizontal') {
            if (key == 'ArrowUp') {
              this.handleSplitterDragStart();
              this.handleSplitterDrop({
                top: -this.props.shiftResizeStep
              });
              handled = true;
            }

            if (key == 'ArrowDown') {
              this.handleSplitterDragStart();
              this.handleSplitterDrop({
                top: this.props.shiftResizeStep
              });
              handled = true;
            }
          }

          if (this.props.orientation == 'vertical') {
            if (key == 'ArrowLeft') {
              this.handleSplitterDragStart();
              this.handleSplitterDrop({
                left: -this.props.shiftResizeStep
              });
              handled = true;
            }

            if (key == 'ArrowRight') {
              this.handleSplitterDragStart();
              this.handleSplitterDrop({
                left: this.props.shiftResizeStep
              });
              handled = true;
            }
          }
        }

        if (key === 'ArrowLeft' || key === 'ArrowRight' || key === 'ArrowUp' || key === 'ArrowDown') {
          event.preventDefault();
          if (handled) {
            event.stopPropagation();
          }
        }

        return;
      }
    }
  }, {
    key: 'onFocus',
    value: function onFocus(event) {
      if ((0, _reactDom.findDOMNode)(this) == event.target) {
        if (this.props.skipUpdateOnFocus) {
          this.focused = true;

          var node = (0, _reactDom.findDOMNode)(this);

          var focusedClassName = this.props.rootClassName + '--focused';
          if (node && node.classList && !node.classList.contains(focusedClassName)) {
            node.classList.add(focusedClassName);
          }
        } else {
          this.setState({
            focused: true
          });
        }

        SPLIT_CONTAINER_INSTANCE_FOCUSED = true;
      }

      if (this.props.onFocus) {
        this.props.onFocus(event);
      }
    }
  }, {
    key: 'focus',
    value: function focus() {
      (0, _reactDom.findDOMNode)(this).focus();
    }
  }, {
    key: 'blur',
    value: function blur() {
      (0, _reactDom.findDOMNode)(this).blur();
    }
  }, {
    key: 'isFocused',
    value: function isFocused() {
      if (this.props.skipUpdateOnFocus) {
        return this.focused;
      }
      return this.state.focused;
    }
  }, {
    key: 'onBlur',
    value: function onBlur(event) {
      if ((0, _reactDom.findDOMNode)(this) == event.target) {
        if (this.props.skipUpdateOnFocus) {
          this.focused = false;

          var node = (0, _reactDom.findDOMNode)(this);

          var focusedClassName = this.props.rootClassName + '--focused';
          if (node && node.classList && node.classList.contains(focusedClassName)) {
            node.classList.remove(focusedClassName);
          }
        } else {
          this.setState({
            focused: false
          });
        }

        SPLIT_CONTAINER_INSTANCE_FOCUSED = false;
      }

      if (this.props.onBlur) {
        this.props.onBlur(event);
      }
    }
  }, {
    key: 'renderCover',
    value: function renderCover() {
      var props = this.props;
      if (props.renderCover) {
        return props.renderCover();
      }

      if (!props.cover) {
        return null;
      }

      var className = (0, _join2.default)(props.rootClassName + '__cover', this.state.dragging && props.rootClassName + '__cover--resizing');

      return _react2.default.createElement('div', {
        className: className,
        style: {
          visibility: this.state.dragging ? 'visible' : 'hidden',
          position: 'absolute',
          zIndex: props.coverZIndex || props.animationZIndex,
          width: '100%',
          height: '100%',
          left: 0,
          top: 0
        }
      });
    }
  }, {
    key: 'renderResizeProxy',
    value: function renderResizeProxy() {
      var _style;

      var props = this.p;
      var positionNames = getPositionNames(props);

      var style = (_style = {
        visibility: this.state.dragging ? 'visible' : 'hidden'
      }, _defineProperty(_style, props.otherSizeName, '100%'), _defineProperty(_style, props.sizeName, props.splitterSize), _defineProperty(_style, 'position', 'absolute'), _defineProperty(_style, 'zIndex', props.proxyZIndex || props.animationZIndex), _defineProperty(_style, positionNames[0], this.state.dragPosition), _defineProperty(_style, props.orientation == 'horizontal' ? 'left' : 'top', 0), _style);

      var className = (0, _join2.default)(props.rootClassName + '__resize-proxy', this.state.constrained && props.rootClassName + '__resize-proxy--constrained');

      return _react2.default.createElement('div', { className: className, style: style });
    }
  }, {
    key: 'renderFirst',
    value: function renderFirst() {
      return this.renderAt(0);
    }
  }, {
    key: 'renderSecond',
    value: function renderSecond() {
      return this.renderAt(1);
    }
  }, {
    key: 'renderAt',
    value: function renderAt(index) {
      var children = this.p.children;

      return children[index];
    }
  }, {
    key: 'constrain',
    value: function constrain(value, _ref) {
      var min = _ref.min,
          max = _ref.max;
      var constrain = this.props.constrain;


      if (constrain === false) {
        return {
          value: value,
          consrained: false
        };
      }

      if (typeof constrain == 'function') {
        return this.props.constrain(value, { min: min, max: max });
      }

      var result = (0, _clamp2.default)(value, min, max);

      return {
        value: result,
        constrained: result !== value
      };
    }
  }, {
    key: 'handleSplitterDragStart',
    value: function handleSplitterDragStart() {
      var props = this.p;

      var nodes = this.getNodes();
      var sizes = nodes.map(getOffsetSize);

      this.sizes = sizes;
      this.splitterPosition = sizes[0][props.sizeName];

      var available = sizes[0][props.sizeName] + sizes[1][props.sizeName];

      var splitterMin = 0;
      var splitterMax = available;

      var maybePercentage = function maybePercentage(v) {
        return isPercentage(v) ? parseFloat(v, 10) * available / 100 : v;
      };
      var minSize = (props.minSize || []).map(maybePercentage);
      var maxSize = (props.maxSize || []).map(maybePercentage);

      if (minSize[0]) {
        splitterMin += minSize[0];
      }
      if (minSize[1]) {
        splitterMax -= minSize[1];
      }

      if (maxSize[0]) {
        splitterMax = Math.min(splitterMax, maxSize[0]);
      }

      if (maxSize[1]) {
        splitterMin = Math.max(splitterMin, available - maxSize[1]);
      }

      var values = minMax(splitterMin, splitterMax);

      this.scrollValue = (0, _reactDom.findDOMNode)(this)[props.vertical ? 'scrollLeft' : 'scrollTop'];
      this.splitterMin = values.min;
      this.splitterMax = values.max;
    }
  }, {
    key: 'handleSplitterDrag',
    value: function handleSplitterDrag(diff) {
      var _this7 = this;

      if (this.dragRafId) {
        cancelRaf(this.dragRafId);
      }

      this.dragRafId = raf(function () {
        _this7.dragRafId = null;
        var props = _this7.p;

        var positions = getPositionNames(_this7.props);
        var posName = positions[0];
        var offset = diff[posName];

        if (!offset) {
          return;
        }

        var dragPosition = _this7.splitterPosition + offset;

        var _constrain = _this7.constrain(dragPosition, {
          min: _this7.splitterMin,
          max: _this7.splitterMax
        }),
            value = _constrain.value,
            constrained = _constrain.constrained;

        var draggingState = { dragging: true };

        if (!props.resizeProxy) {
          _this7.doResize(value, { constrain: false }, function (newState) {
            newState = _extends({}, newState, draggingState);
            if (_this7.state.constrained != constrained) {
              newState.constrained = constrained;
            }
            _this7.setState(newState);
          });
        } else {
          _this7.setState(_extends({}, draggingState, {
            dragPosition: value,
            constrained: constrained
          }));
        }
      });
    }
  }, {
    key: 'handleSplitterDrop',
    value: function handleSplitterDrop(diff) {
      var _this8 = this;

      if (this.dropRafId) {
        cancelRaf(this.dropRafId);
      }
      this.dropRafId = raf(function () {
        _this8.dropRafId = null;
        var props = _this8.p;
        var positions = getPositionNames(props);
        var posName = positions[0];

        var offset = diff[posName];
        var position = _this8.splitterPosition + offset;

        if (!offset) {
          return;
        }

        _this8.doResize(position, undefined, function (newState) {
          _this8.setState(_extends({}, newState, {
            dragging: false,
            dragPosition: null,
            constrained: false
          }));
        });
      });
    }
  }, {
    key: 'doResize',
    value: function doResize(at) {
      var _ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : { constrain: true },
          _ref2$constrain = _ref2.constrain,
          constrain = _ref2$constrain === undefined ? true : _ref2$constrain;

      var callback = arguments[2];

      var props = this.p;

      at = Math.round(at);

      var constrained = false;
      var value = at;

      if (constrain) {
        var result = this.constrain(at, {
          min: this.splitterMin,
          max: this.splitterMax
        });

        value = result.value;
        constrained = result.constrained;
      }

      var splitAtIndex = props.splitAtIndex,
          sizeName = props.sizeName;


      var sizes = this.sizes;
      var sign = splitAtIndex == 1 ? -1 : 1;

      if (splitAtIndex == 1) {
        value = sizes[0][sizeName] + sizes[1][sizeName] - value;
      }

      var available = sizes[0][props.sizeName] + sizes[1][props.sizeName];
      if (props.usePercentageOnResize === true || props.usePercentageOnResize === undefined && props.asPercentage) {
        value = value * 100 / available + '%';
      }

      if (sign == -1) {
        value = typeof value == 'string' ? '-' + value : -value;
      }

      if (callback) {
        callback({
          splitAt: value
        });
      }

      this.props.onResize(value);
    }
  }, {
    key: 'collapse',
    value: function collapse(index) {
      this.handleCollapse(index);
    }
  }, {
    key: 'expand',
    value: function expand(index) {
      this.handleExpand(index);
    }
  }, {
    key: 'isCollapsed',
    value: function isCollapsed(index) {
      if (index === undefined) {
        return this.p.collapsedIndex == 0 || this.p.collapsedIndex == 1;
      }

      return this.p.collapsedIndex == index;
    }
  }, {
    key: 'handleCollapse',
    value: function handleCollapse(collapsedIndex) {
      if (!this.isCollapsible(collapsedIndex)) {
        return;
      }
      if (this.props.collapsedIndex === undefined) {
        this.setState({
          collapsedIndex: collapsedIndex
        });

        if (this.hasTransition()) {
          this.doTransition(this.p, this.p.collapsedIndex, collapsedIndex);
        }
      }

      this.props.onCollapse(collapsedIndex);
    }
  }, {
    key: 'isCollapsible',
    value: function isCollapsible(index) {
      if (Array.isArray(this.props.collapsible) && this.props.collapsible[index] !== true) {
        return false;
      }

      return true;
    }
  }, {
    key: 'isExpandable',
    value: function isExpandable(index) {
      return this.p.collapsedIndex == index;
    }
  }, {
    key: 'handleExpand',
    value: function handleExpand(expandIndex) {
      var collapsedIndex = this.p.collapsedIndex;

      if (expandIndex !== collapsedIndex) {
        // invalid expand
        return;
      }

      if (!this.isExpandable(expandIndex)) {
        return;
      }

      if (this.props.collapsedIndex === undefined) {
        this.setState({
          collapsedIndex: null
        });

        if (this.hasTransition()) {
          this.doTransition(this.p, collapsedIndex, null);
        }
      }

      this.props.onExpand(expandIndex);
    }
  }]);

  return SplitContainer;
}(_react2.default.Component);

exports.default = SplitContainer;


var splitAtPropType = function splitAtPropType(props, propName) {
  var value = props[propName];
  var fixedIndex = props.fixedIndex;

  if (isPercentage(value) && (fixedIndex == 0 || fixedIndex == 1)) {
    return new Error('"fixedIndex" should be used when "spliAt" is expressed as a fixed number, and not as a percentage');
  }
};

var numberOrString = _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]);

var sizeType = _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number, _propTypes2.default.arrayOf(numberOrString)]);

SplitContainer.propTypes = (_SplitContainer$propT = {
  animationZIndex: numberOrString,
  coverZIndex: numberOrString,
  proxyZIndex: numberOrString,
  fillSides: _propTypes2.default.oneOfType([_propTypes2.default.bool, _propTypes2.default.arrayOf(_propTypes2.default.bool)]),
  rootClassName: _propTypes2.default.string,
  usePercentageOnResize: _propTypes2.default.bool,

  children: function children(props, propName) {
    var propValue = _react2.default.Children.toArray(props[propName]);

    propValue = propValue.filter(function (child) {
      if (child && child.props && child.props.isSplitter) {
        return null;
      }
      return child;
    });

    var isArray = Array.isArray(propValue);
    var isTwo = isArray && propValue.length == 2;

    if (!propValue || !isArray || !isTwo) {
      console.warn('Please pass only 2 children. You provided ' + (isArray ? propValue.length + ' children' : propValue));
    }
  },


  orientation: _propTypes2.default.oneOf(['horizontal', 'vertical']),

  fixedIndex: _propTypes2.default.number,
  defaultCollapsedIndex: _propTypes2.default.number,
  collapsedIndex: _propTypes2.default.number,
  shiftResizeStep: _propTypes2.default.number,
  transitionDuration: numberOrString,
  minSize: sizeType,
  maxSize: sizeType,

  locked: _propTypes2.default.bool,
  theme: _propTypes2.default.string,
  draggable: _propTypes2.default.bool,
  cover: _propTypes2.default.bool,
  resizeProxy: _propTypes2.default.bool,
  bordered: _propTypes2.default.bool,
  collapsible: _propTypes2.default.any,
  inlineFlex: _propTypes2.default.bool,
  transition: _propTypes2.default.bool
}, _defineProperty(_SplitContainer$propT, 'transitionDuration', numberOrString), _defineProperty(_SplitContainer$propT, 'enableKeyboardNavigation', _propTypes2.default.bool), _defineProperty(_SplitContainer$propT, 'onCollapse', _propTypes2.default.func), _defineProperty(_SplitContainer$propT, 'onExpand', _propTypes2.default.func), _defineProperty(_SplitContainer$propT, 'onResize', _propTypes2.default.func), _defineProperty(_SplitContainer$propT, 'splitAtValue', _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string])), _defineProperty(_SplitContainer$propT, 'splitterSize', _propTypes2.default.number.isRequired), _defineProperty(_SplitContainer$propT, 'mobileSplitterSize', _propTypes2.default.number), _defineProperty(_SplitContainer$propT, 'mobileSplitterDragArea', _propTypes2.default.number), _defineProperty(_SplitContainer$propT, 'splitIconSize', _propTypes2.default.number), _defineProperty(_SplitContainer$propT, 'splitAt', splitAtPropType), _defineProperty(_SplitContainer$propT, 'defaultSplitAt', splitAtPropType), _defineProperty(_SplitContainer$propT, 'showWarnings', _propTypes2.default.bool), _defineProperty(_SplitContainer$propT, 'skipUpdateOnAnimate', _propTypes2.default.bool), _defineProperty(_SplitContainer$propT, 'skipUpdateOnDrag', _propTypes2.default.bool), _defineProperty(_SplitContainer$propT, 'skipUpdateOnFocus', _propTypes2.default.bool), _defineProperty(_SplitContainer$propT, 'isSplitContainer', _propTypes2.default.bool), _SplitContainer$propT);

SplitContainer.defaultProps = {
  theme: 'default',

  rootClassName: 'zippy-react-toolkit-split-container',

  isSplitContainer: true,
  usePercentageOnResize: undefined,

  animationZIndex: 10000,
  proxyZIndex: 10000,
  coverZIndex: 10000,

  splitterSize: _isMobile2.default ? 20 : 10,
  mobileSplitterSize: undefined,
  mobileSplitterDragArea: 54,

  fixedIndex: -1,
  orientation: 'horizontal',

  cover: true,
  draggable: true,
  locked: false,
  bordered: false,

  resizeProxy: true,
  inlineFlex: false,

  shiftResizeStep: 20,

  onCollapse: emptyFn,
  onExpand: emptyFn,
  onResize: emptyFn,

  enableKeyboardNavigation: true,
  transition: true,
  fillSides: false,
  skipUpdateOnDrag: true,
  skipUpdateOnFocus: true,
  skipUpdateOnAnimate: true,

  collapsible: [true, true],
  showWarnings: !_uglified2.default
};

SplitContainer.Side = Side;
SplitContainer.Splitter = _Splitter2.default;
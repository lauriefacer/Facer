'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _reactDom = require('react-dom');

var _Flex = require('../../Flex');

var _autoBind = require('@zippytech/react-class/autoBind');

var _autoBind2 = _interopRequireDefault(_autoBind);

var _dragHelper = require('@zippytech/drag-helper');

var _dragHelper2 = _interopRequireDefault(_dragHelper);

var _isMobile = require('../../common/isMobile');

var _isMobile2 = _interopRequireDefault(_isMobile);

var _join = require('../../common/join');

var _join2 = _interopRequireDefault(_join);

var _cleanProps = require('../../common/cleanProps');

var _cleanProps2 = _interopRequireDefault(_cleanProps);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Copyright (c) 2015-present, Zippy Technologies
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * This source code is licensed under the MIT license found in the
file in the root directory of this source tree.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */

var emptyFn = function emptyFn() {};

var Splitter = function (_React$Component) {
  _inherits(Splitter, _React$Component);

  function Splitter(props) {
    _classCallCheck(this, Splitter);

    var _this = _possibleConstructorReturn(this, (Splitter.__proto__ || Object.getPrototypeOf(Splitter)).call(this, props));

    (0, _autoBind2.default)(_this);
    return _this;
  }

  _createClass(Splitter, [{
    key: 'prepareChildren',
    value: function prepareChildren(props) {
      var result = [];
      var horizontal = props.orientation == 'horizontal';

      var className = props.rootClassName + '-inner';
      var row = horizontal;
      var column = !row;

      var flexProps = {
        justifyContent: 'center',
        alignItems: 'center',
        wrap: false,
        row: row,
        column: column
      };

      var collapsedIndex = props.collapsedIndex,
          locked = props.locked,
          rootClassName = props.rootClassName,
          iconSize = props.iconSize;


      if (locked) {
        return null;
      }

      var ARROWS = horizontal ? {
        down: _react2.default.createElement(
          'svg',
          {
            className: rootClassName + '__icon',
            height: iconSize,
            width: iconSize,
            viewBox: '0 0 24 24'
          },
          _react2.default.createElement('path', { d: 'M7.41 7.84L12 12.42l4.59-4.58L18 9.25l-6 6-6-6z' })
        ),
        up: _react2.default.createElement(
          'svg',
          {
            className: rootClassName + '__icon',
            height: iconSize,
            width: iconSize,
            viewBox: '0 0 24 24'
          },
          _react2.default.createElement('path', { d: 'M7.41 15.41L12 10.83l4.59 4.58L18 14l-6-6-6 6z' })
        )
      } : {
        right: _react2.default.createElement(
          'svg',
          {
            className: rootClassName + '__icon',
            height: iconSize,
            width: iconSize,
            viewBox: '0 0 24 24'
          },
          _react2.default.createElement('path', { d: 'M8.59 16.34l4.58-4.59-4.58-4.59L10 5.75l6 6-6 6z' })
        ),
        left: _react2.default.createElement(
          'svg',
          {
            className: rootClassName + '__icon',
            height: iconSize,
            width: iconSize,
            viewBox: '0 0 24 24'
          },
          _react2.default.createElement('path', { d: 'M15.41 16.09l-4.58-4.59 4.58-4.59L14 5.5l-6 6 6 6z' })
        )
      };

      var firstCollapsed = collapsedIndex == 0;
      var secondCollapsed = collapsedIndex == 1;

      var collapsible = props.collapsible || [];
      var firstCollapsible = collapsible[0] !== false;
      var secondCollapsible = collapsible[1] !== false;

      if (firstCollapsible && !firstCollapsed || secondCollapsed) {
        var firstEvents = _defineProperty({}, _isMobile2.default ? 'onTouchEnd' : 'onClick', this.toggleCollapse.bind(this, -1));
        result.push(_react2.default.createElement(
          _Flex.Flex,
          _extends({}, flexProps, {
            key: 'first',
            className: (0, _join2.default)(className, className + '--first', className + '--orientation-' + props.orientation)
          }, firstEvents),
          horizontal ? ARROWS.up : ARROWS.left
        ));
      }

      if (secondCollapsible && !secondCollapsed || firstCollapsed) {
        var secondEvents = _defineProperty({}, _isMobile2.default ? 'onTouchEnd' : 'onClick', this.toggleCollapse.bind(this, 1));

        result.push(_react2.default.createElement(
          _Flex.Flex,
          _extends({}, flexProps, {
            key: 'second',
            className: (0, _join2.default)(className, className + '--second', className + '--orientation-' + props.orientation)
          }, secondEvents),
          horizontal ? ARROWS.down : ARROWS.right
        ));
      }

      var size = _isMobile2.default ? props.mobileSize || props.size : props.size;

      if (_isMobile2.default) {
        var mobileSplitterDragArea = props.mobileSplitterDragArea || size * 2;

        var leftMargin = (mobileSplitterDragArea - size) / 2;
        result.push(_react2.default.createElement('div', {
          key: 'mobileDragger',
          className: rootClassName + '-dragger ' + rootClassName + '-dragger--orientation-' + props.orientation,
          style: props.orientation == 'vertical' ? {
            top: 0,
            width: 2 * leftMargin,
            bottom: 0
          } : {
            left: 0,
            height: 2 * leftMargin,
            right: 0
          }
        }));
      }

      return result;
    }
  }, {
    key: 'prepareProps',
    value: function prepareProps(thisProps) {
      var props = _extends({}, this.props);

      props.className = this.prepareClassName(props);
      props.children = this.prepareChildren(props);

      var size = _isMobile2.default ? props.mobileSize || props.size : props.size;
      if (size != null) {
        props.style = _extends({}, props.style, _defineProperty({}, props.orientation == 'horizontal' ? 'height' : 'width', size));
      }

      return props;
    }
  }, {
    key: 'prepareClassName',
    value: function prepareClassName(props) {
      var collapsedIndex = props.collapsedIndex,
          locked = props.locked,
          draggable = props.draggable,
          constrained = props.constrained,
          rootClassName = props.rootClassName;


      var size = _isMobile2.default ? props.mobileSize || props.size : props.size;

      return (0, _join2.default)(props.className, rootClassName, rootClassName + '--orientation-' + props.orientation, locked && rootClassName + '--locked', size == 0 && rootClassName + '--zero-size', draggable && rootClassName + '--draggable', constrained && rootClassName + '--constrained', collapsedIndex != undefined && (0, _join2.default)(rootClassName + '--collapsed', rootClassName + '--collapsed-' + (collapsedIndex == 0 ? 'start' : 'end')));
    }
  }, {
    key: 'render',
    value: function render() {
      var _events;

      var props = this.prepareProps(this.props);

      var horizontal = props.orientation == 'horizontal';

      var row = horizontal;
      var column = !row;

      var events = (_events = {}, _defineProperty(_events, _isMobile2.default ? 'onDoubleTap' : 'onDoubleClick', this.handleDoubleClick), _defineProperty(_events, _isMobile2.default ? 'onTouchStart' : 'onMouseDown', this.handleMouseDown), _events);

      return _react2.default.createElement(_Flex.Flex, _extends({
        wrap: false,
        row: row,
        column: column,
        justifyContent: 'center',
        alignItems: 'center'
      }, (0, _cleanProps2.default)(props, Splitter.propTypes), {
        draggable: null
      }, events));
    }
  }, {
    key: 'handleDoubleClick',
    value: function handleDoubleClick(event) {
      this.props.onDoubleClick(event);

      var collapsedIndex = this.props.collapsedIndex;


      if (collapsedIndex == null) {
        return;
      }

      this.toggleCollapse(collapsedIndex == 0 ? 1 : -1);
    }
  }, {
    key: 'handleMouseDown',
    value: function handleMouseDown(event) {
      this.props.onMouseDown(event);

      if (this.props.locked || !this.props.draggable || this.props.collapsedIndex != null) {
        return;
      }

      event.preventDefault();

      var node = (0, _reactDom.findDOMNode)(this);
      var parent = node.parentNode;
      var zeroPositionName = this.props.orientation == 'vertical' ? 'top' : 'left';

      (0, _dragHelper2.default)(event, {
        scope: this,
        region: node,
        constrainTo: parent,
        onDragStart: function onDragStart(event, config) {
          config.diff[zeroPositionName] = 0;
          this.props.onDragStart(config.diff, event);
        },
        onDrag: function onDrag(event, config) {
          event.preventDefault();
          config.diff[zeroPositionName] = 0;
          this.props.onDrag(config.diff, event);
        },
        onDrop: function onDrop(event, config) {
          config.diff[zeroPositionName] = 0;
          this.props.onDrop(config.diff, event);
        }
      });
    }
  }, {
    key: 'toggleCollapse',
    value: function toggleCollapse(direction, event) {
      if (this.props.locked) {
        return;
      }

      var _props = this.props,
          collapsedIndex = _props.collapsedIndex,
          onExpand = _props.onExpand,
          onCollapse = _props.onCollapse;


      var index = collapsedIndex != undefined ? // there is a collapsed item
      // so we are expanding
      collapsedIndex : // otherwise, we are collapsing
      direction == 1 ? 1 : 0;

      var fn = collapsedIndex === index ? onExpand : onCollapse;

      fn(index, event);
    }
  }]);

  return Splitter;
}(_react2.default.Component);

exports.default = Splitter;


Splitter.propTypes = {
  rootClassName: _propTypes2.default.string.isRequired,
  size: _propTypes2.default.number,
  mobileSize: _propTypes2.default.number,
  mobileSplitterDragArea: _propTypes2.default.number,
  orientation: _propTypes2.default.string,
  locked: _propTypes2.default.bool,
  onCollapse: _propTypes2.default.func,
  onExpand: _propTypes2.default.func,
  isSplitter: _propTypes2.default.bool,
  constrained: _propTypes2.default.bool,
  iconSize: _propTypes2.default.number,
  collapsible: _propTypes2.default.oneOfType([_propTypes2.default.bool, _propTypes2.default.array]),

  collapsedIndex: _propTypes2.default.oneOf([undefined, 0, 1])
};

Splitter.defaultProps = {
  isSplitter: true,
  iconSize: _isMobile2.default ? 28 : 18,

  onDragStart: emptyFn,
  onDrag: emptyFn,
  onDrop: emptyFn,

  onCollapse: emptyFn,
  onExpand: emptyFn,

  onDoubleClick: emptyFn,
  onMouseDown: emptyFn
};
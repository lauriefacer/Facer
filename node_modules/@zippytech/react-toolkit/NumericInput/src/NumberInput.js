'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('react-dom');

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _autoBind = require('@zippytech/react-class/autoBind');

var _autoBind2 = _interopRequireDefault(_autoBind);

var _hasTouch = require('@zippytech/has-touch');

var _hasTouch2 = _interopRequireDefault(_hasTouch);

var _raf = require('../../common/raf');

var _raf2 = _interopRequireDefault(_raf);

var _join = require('../../common/join');

var _join2 = _interopRequireDefault(_join);

var _clamp = require('../../common/clamp');

var _clamp2 = _interopRequireDefault(_clamp);

var _debounce = require('../../common/debounce');

var _debounce2 = _interopRequireDefault(_debounce);

var _cleanProps = require('../../common/cleanProps');

var _cleanProps2 = _interopRequireDefault(_cleanProps);

var _eventNames = require('../../common/eventNames');

var _eventNames2 = _interopRequireDefault(_eventNames);

var _getSelectionRange = require('./utils/get-selection-range');

var _getSelectionRange2 = _interopRequireDefault(_getSelectionRange);

var _getSelectionStart2 = require('./utils/get-selection-start');

var _getSelectionStart3 = _interopRequireDefault(_getSelectionStart2);

var _setCaretPosition = require('./utils/set-caret-position');

var _setCaretPosition2 = _interopRequireDefault(_setCaretPosition);

var _getDecimalDelimiter = require('./utils/get-decimal-delimiter');

var _getDecimalDelimiter2 = _interopRequireDefault(_getDecimalDelimiter);

var _getTransformedStringValues2 = require('./utils/get-transformed-string-values');

var _getTransformedStringValues3 = _interopRequireDefault(_getTransformedStringValues2);

var _getCurrencyForCountryCode = require('./utils/get-currency-for-country-code');

var _getCurrencyForCountryCode2 = _interopRequireDefault(_getCurrencyForCountryCode);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Copyright (c) 2015-present, Zippy Technologies
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * This source code is licensed under the MIT license found in the
file in the root directory of this source tree.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */

var preventDefault = function preventDefault(e) {
  return e.preventDefault();
};

var emptyObject = {};
var isNumeric = function isNumeric(n) {
  return !isNaN(parseFloat(n)) && isFinite(n);
};
var isInt = function isInt(n) {
  return Number(n) === n && n % 1 === 0;
};

var getArrowClasses = function getArrowClasses(spinDirection, props) {
  var upArrowClass = (0, _join2.default)(props.rootClassName + '__spinner-arrow', props.rootClassName + '__spinner-arrow--up', spinDirection === 1 && props.rootClassName + '__spinner-arrow--active');

  var downArrowClass = (0, _join2.default)(props.rootClassName + '__spinner-arrow', props.rootClassName + '__spinner-arrow--down', spinDirection === -1 && props.rootClassName + '__spinner-arrow--active');

  return { upArrowClass: upArrowClass, downArrowClass: downArrowClass };
};

var getClearButtonClassNames = function getClearButtonClassNames(props) {
  var clearButtonClassName = (0, _join2.default)(props.rootClassName + '__clear-button', props.clearButtonClassName);

  return { clearButtonClassName: clearButtonClassName };
};

var toUpperFirst = function toUpperFirst(str) {
  return str ? str.charAt(0).toUpperCase() + str.substring(1) : '';
};

var noDot = function noDot(value) {
  value += '';
  return value.indexOf('.') === -1;
};

/**
 * Returns true if the given value is >=  than #minValue
 * @param  {Number/String}  value
 * @return {Boolean}
 */
var isMinValueRespected = function isMinValueRespected(value, props) {
  var minValue = props.minValue;

  if (minValue == null || value === '') {
    return true;
  }

  return value >= minValue;
};

/**
 * Returns true if the given value is <=  than #maxValue
 * @param  {Number/String}  value
 * @return {Boolean}
 */
var isMaxValueRespected = function isMaxValueRespected(value, props) {
  var maxValue = props.maxValue;

  if (maxValue == null || value === '') {
    return true;
  }

  return value <= maxValue;
};

var checkNumeric = function checkNumeric(value, _ref) {
  var numbersOnly = _ref.numbersOnly,
      allowNegative = _ref.allowNegative,
      allowFloat = _ref.allowFloat;

  if (value === '') {
    return true;
  }

  if (numbersOnly) {
    var numeric = isNumeric(value);

    return numeric || allowNegative && value === '-' || allowFloat && value === '.' || allowNegative && allowFloat && value == '-.';
  }

  return true;
};

var isPossibleNumericStart = function isPossibleNumericStart(value, _ref2) {
  var allowFloat = _ref2.allowFloat,
      allowNegative = _ref2.allowNegative;

  if (allowFloat && value === '.') {
    return true;
  }
  if (allowNegative && value === '-') {
    return true;
  }

  if (allowNegative && allowFloat && value === '-.') {
    return true;
  }

  return !isNaN(value);
};

var checkFloat = function checkFloat(value, _ref3) {
  var allowFloat = _ref3.allowFloat;

  if (allowFloat === false) {
    return noDot(value) && isNumeric(value) && isInt(value * 1);
  }
};

var isFloat = function isFloat(n) {
  return Number(n) === n && n % 1 !== 0;
};
var isFloatString = function isFloatString(n) {
  var str = '' + n;

  return isFloat(str) || isNumeric(str) && str.indexOf('.') !== -1;
};

var checkPositive = function checkPositive(value, _ref4) {
  var allowNegative = _ref4.allowNegative;

  if (allowNegative === false) {
    return isNumeric(value) && value * 1 >= 0;
  }
};

var getInitialStateValue = function getInitialStateValue(props) {
  var value = props.value,
      defaultValue = props.defaultValue;

  if (value) {
    return null;
  }

  if (defaultValue || defaultValue === 0) {
    return getFormatedValue(defaultValue, props);
  }

  return '';
};

var getFormatedValue = function getFormatedValue(value, props) {
  if (value || value === 0) {
    var locale = props.locale,
        prefix = props.prefix,
        suffix = props.suffix,
        minValue = props.minValue,
        maxValue = props.maxValue,
        precision = props.precision;

    return (0, _getTransformedStringValues3.default)(value, {
      locale: locale,
      precision: precision,
      min: minValue,
      max: maxValue,
      prefix: prefix,
      suffix: suffix
    })[0];
  }
};

var getCurrentValue = function getCurrentValue(props, state) {
  var value = props.value,
      defaultValue = props.defaultValue;
  var formattedValue = state.formattedValue;


  if (value != null) {
    return value;
  }

  if (formattedValue == null) {
    return getFormatedValue(defaultValue, props);
  }

  return formattedValue;
};

var isControlled = function isControlled(props) {
  return props.value !== undefined;
};

var getInitialStatePrecision = function getInitialStatePrecision(props) {
  if (isControlledPrecision(props)) {
    return null;
  }

  return 0;
};

var isControlledPrecision = function isControlledPrecision(props) {
  return props.precision === 0 || !!props.precision;
};

var getSuffix = function getSuffix(props) {
  var suffix = props.suffix,
      format = props.format,
      currencySymbol = props.currencySymbol,
      currencyPosition = props.currencyPosition,
      locale = props.locale;

  if (suffix) {
    return suffix;
  }

  if (format === 'currency' && currencyPosition === 'end') {
    if (currencySymbol) {
      return currencySymbol;
    }
    return (0, _getCurrencyForCountryCode2.default)(locale || (global.navigator ? global.navigator.language : ''));
  }

  if (format === 'percentage') {
    return '%';
  }
};

var getPrefix = function getPrefix(props) {
  var prefix = props.prefix,
      format = props.format,
      currencySymbol = props.currencySymbol,
      currencyPosition = props.currencyPosition,
      locale = props.locale;

  if (prefix) {
    return prefix;
  }

  if (format === 'currency' && currencyPosition === 'start') {
    if (currencySymbol) {
      return currencySymbol;
    }
    return (0, _getCurrencyForCountryCode2.default)(locale || (global.navigator ? global.navigator.language : ''));
  }
};

var selectionContainsPosition = function selectionContainsPosition(selection, position) {
  if (selection.start === selection.end) {
    return false;
  }

  return selection.start <= position && selection.end > position;
};

var ZippyNumericInput = function (_Component) {
  _inherits(ZippyNumericInput, _Component);

  function ZippyNumericInput(props) {
    _classCallCheck(this, ZippyNumericInput);

    var _this = _possibleConstructorReturn(this, (ZippyNumericInput.__proto__ || Object.getPrototypeOf(ZippyNumericInput)).call(this, props));

    (0, _autoBind2.default)(_this);

    var value = isControlled(props) ? props.value : props.defaultValue;

    if (props.triggerChangeOnSpinDelay > 0) {
      _this.setValueOnSpin = (0, _debounce2.default)(_this.setValueOnSpin, props.triggerChangeOnSpinDelay);
    }

    _this.state = {
      value: value,
      focused: false,
      formattedValue: getFormatedValue(value, props),
      spinDirection: null,
      intermediateValue: null
    };
    return _this;
  }

  _createClass(ZippyNumericInput, [{
    key: 'setInputRef',
    value: function setInputRef(el) {
      this.input = el;
    }
  }, {
    key: 'render',
    value: function render() {
      var props = this.props,
          state = this.state;
      var toolPosition = props.toolPosition;

      var _p = this.p = this.getProps(props, state),
          formattedValue = _p.formattedValue,
          enableSpinnerTools = _p.enableSpinnerTools,
          className = _p.className,
          style = _p.style,
          enableClearButton = _p.enableClearButton,
          wrapperProps = _p.wrapperProps;

      var min = props.mim;
      if (min === undefined && !props.allowNegative) {
        min = 0;
      }

      var currentValue = state.focused ? this.p.value : this.p.formattedValue;

      if (currentValue == null) {
        currentValue = '';
      }

      var inputProps = props.inputProps || emptyObject;
      var inputClassName = (0, _join2.default)(props.rootClassName + '__input', inputProps.className);

      var input = _react2.default.createElement('input', _extends({
        size: Math.max(1, props.size || 0) // if not present, FF will not correctly flex the input when the NumericInput is smaller than the default input width
      }, inputProps, {
        ref: this.setInputRef,
        type: 'text',
        key: 'input',
        className: inputClassName,
        disabled: props.disabled,
        value: currentValue,
        onWheel: this.handleWheel,
        onKeyDown: this.handleKeyDown,
        onKeyUp: this.handleKeyUp,
        onChange: this.handleChange,
        min: min
      }));

      var clearButtonWrapper = this.renderClearButtonWrapper();
      var spinnerToolWrapper = this.renderSpinnerToolsWrapper();

      var inputDisplay = [input, clearButtonWrapper, spinnerToolWrapper];

      if (toolPosition === 'start') {
        inputDisplay = [spinnerToolWrapper, clearButtonWrapper, input];
      }
      if (enableSpinnerTools === false) {
        inputDisplay = [input, spinnerToolWrapper, clearButtonWrapper];
      }
      if (toolPosition === 'start' && enableSpinnerTools === false) {
        inputDisplay = [clearButtonWrapper, input, spinnerToolWrapper];
      }

      var propsToWrapper = (0, _cleanProps2.default)(wrapperProps, ZippyNumericInput.propTypes);

      return _react2.default.createElement(
        'div',
        _extends({}, propsToWrapper, {
          className: (0, _join2.default)(className, wrapperProps ? wrapperProps.className : null),
          style: wrapperProps && wrapperProps.style ? _extends({}, style, wrapperProps.style) : style,
          onBlur: this.handleBlur,
          onFocus: this.handleFocus
        }),
        inputDisplay
      );
    }
  }, {
    key: 'renderClearButtonWrapper',
    value: function renderClearButtonWrapper() {
      var props = this.props,
          state = this.state;
      var enableClearButton = this.props.enableClearButton;
      var _p2 = this.p,
          clearButtonColor = _p2.clearButtonColor,
          clearButtonStyle = _p2.clearButtonStyle,
          clearButtonSize = _p2.clearButtonSize;

      var value = isControlled(props) ? props.value : state.value;
      var hasValue = state.intermediateValue != null ? true : value !== '' && value != null;
      var clearButtonWrapperClassName = (0, _join2.default)(props.rootClassName + '__clear-button-wrapper', (!hasValue || !enableClearButton) && props.rootClassName + '__clear-button-wrapper--hidden');

      return _react2.default.createElement(
        'div',
        { key: 'clearButton', className: clearButtonWrapperClassName },
        this.renderClearButton(_extends({
          clearButtonColor: clearButtonColor,
          clearButtonStyle: clearButtonStyle,
          clearButtonSize: clearButtonSize
        }, getClearButtonClassNames(props)))
      );
    }
  }, {
    key: 'renderClearButton',
    value: function renderClearButton(config) {
      var clearButtonColor = config.clearButtonColor,
          clearButtonStyle = config.clearButtonStyle,
          clearButtonClassName = config.clearButtonClassName,
          clearButtonSize = config.clearButtonSize;


      var svgProps = {};
      var tabIndex = this.props.acceptClearToolFocus ? 0 : -1;

      if (clearButtonColor) {
        svgProps.fill = clearButtonColor;
      }

      if (clearButtonSize) {
        if (Array.isArray(clearButtonSize)) {
          svgProps.width = clearButtonSize[0];
          svgProps.height = clearButtonSize[1];
        } else {
          svgProps.width = clearButtonSize;
          svgProps.height = clearButtonSize;
        }
      }

      return _react2.default.createElement(
        'button',
        {
          key: 'clearButton',
          onClick: this.handleClearButtonClick,
          onMouseDown: preventDefault,
          className: clearButtonClassName,
          style: _extends({}, clearButtonStyle),
          tabIndex: tabIndex
        },
        _react2.default.createElement(
          'svg',
          { style: _extends({}, svgProps), viewBox: '4 4 16 16' },
          _react2.default.createElement('path', { d: 'M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z' })
        )
      );
    }
  }, {
    key: 'renderSpinnerToolsWrapper',
    value: function renderSpinnerToolsWrapper() {
      var props = this.props;
      var enableSpinnerTools = props.enableSpinnerTools;
      var _p3 = this.p,
          arrowColor = _p3.arrowColor,
          arrowStyle = _p3.arrowStyle,
          arrowUpStyle = _p3.arrowUpStyle,
          arrowDownStyle = _p3.arrowDownStyle,
          spinDirection = _p3.spinDirection,
          arrowSize = _p3.arrowSize;


      var spinnerToolsWrapperClassName = enableSpinnerTools ? props.rootClassName + '__spinner-wrapper' : props.rootClassName + '__spinner-wrapper-hidden';

      return _react2.default.createElement(
        'div',
        { key: 'spinnerTool', className: spinnerToolsWrapperClassName },
        this.renderSpinnerTools(_extends({
          arrowColor: arrowColor,
          arrowStyle: arrowStyle,
          arrowUpStyle: arrowUpStyle,
          arrowDownStyle: arrowDownStyle,
          spinDirection: spinDirection,
          arrowSize: arrowSize
        }, getArrowClasses(spinDirection, props)))
      );
    }
  }, {
    key: 'renderSpinnerTools',
    value: function renderSpinnerTools(config) {
      var arrowColor = config.arrowColor,
          arrowStyle = config.arrowStyle,
          arrowUpStyle = config.arrowUpStyle,
          arrowDownStyle = config.arrowDownStyle,
          upArrowClass = config.upArrowClass,
          downArrowClass = config.downArrowClass,
          arrowSize = config.arrowSize;


      var svgProps = {};

      if (arrowColor) {
        svgProps.fill = arrowColor;
      }

      if (arrowSize) {
        if (Array.isArray(arrowSize)) {
          svgProps.width = arrowSize[0];
          svgProps.height = arrowSize[1];
        } else {
          svgProps.width = arrowSize;
          svgProps.height = arrowSize;
        }
      }

      var arrowEvents = this.getArrowEvents();

      return [_react2.default.createElement(
        'span',
        _extends({
          key: 'up'
        }, arrowEvents.upEvents, {
          className: upArrowClass,
          style: _extends({}, arrowStyle, arrowUpStyle)
        }),
        _react2.default.createElement(
          'svg',
          { style: _extends({}, svgProps), viewBox: '5 8 14 14' },
          _react2.default.createElement('path', { d: 'M7.41 15.41L12 10.83l4.59 4.58L18 14l-6-6-6 6z' })
        )
      ), _react2.default.createElement(
        'span',
        _extends({
          key: 'down'
        }, arrowEvents.downEvents, {
          className: downArrowClass,
          style: _extends({}, arrowStyle, arrowDownStyle)
        }),
        _react2.default.createElement(
          'svg',
          { style: _extends({}, svgProps), viewBox: '5 2 14 14' },
          _react2.default.createElement('path', { d: 'M7.41 7.84L12 12.42l4.59-4.58L18 9.25l-6 6-6-6z' })
        )
      )];
    }
  }, {
    key: 'getArrowEvents',
    value: function getArrowEvents() {
      return {
        upEvents: _defineProperty({}, _eventNames2.default.onMouseDown, this.handleArrowDown.bind(this, 1)),
        downEvents: _defineProperty({}, _eventNames2.default.onMouseDown, this.handleArrowDown.bind(this, -1))
      };
    }
  }, {
    key: 'handleClearButtonClick',
    value: function handleClearButtonClick(event) {
      this.setState({
        focused: true
      });

      this.setValue(null);

      this.focus();
    }
  }, {
    key: 'handleArrowDown',
    value: function handleArrowDown(shiftStep, event) {
      var _this2 = this;

      event.preventDefault();

      var step = this.props.step;


      var target = _hasTouch2.default ? event.target : window;
      var eventName = _hasTouch2.default ? 'touchend' : 'click';

      var onUpEvent = function onUpEvent() {
        _this2.handleMouseUp();
        target.removeEventListener(eventName, onUpEvent, true /*useCapture*/);
      };

      // we have to use capture since the click event does not propagate up in time in the bubble phase
      target.addEventListener(eventName, onUpEvent, true /*useCapture*/);

      var shiftKey = event.shiftKey;


      var direction = shiftStep > 0 ? 1 : -1;

      var spinConfig = { step: Math.abs(step) };

      // to perform a step, even on quick mousedown/up combination
      this.stepTo(direction, spinConfig);

      this.handleArrowDownTimeoutId = setTimeout(function () {
        _this2.setState({
          shiftKey: shiftKey,
          spinDirection: direction
        });

        _this2.startSpin(direction, spinConfig);
      }, 300);
    }
  }, {
    key: 'handleMouseUp',
    value: function handleMouseUp() {
      this.stopSpin();

      this.setState({
        spinDirection: null,
        shiftKey: null
      });
    }
  }, {
    key: 'getTransformedStringValues',
    value: function getTransformedStringValues(value) {
      var _p4 = this.p,
          suffix = _p4.suffix,
          prefix = _p4.prefix,
          locale = _p4.locale,
          precision = _p4.precision,
          isControlledPrecision = _p4.isControlledPrecision,
          minValue = _p4.minValue,
          maxValue = _p4.maxValue;

      return (0, _getTransformedStringValues3.default)(value, {
        locale: locale,
        precision: isControlledPrecision && precision,
        min: minValue,
        max: maxValue,
        suffix: suffix,
        prefix: prefix
      });
    }
  }, {
    key: 'handleFocus',
    value: function handleFocus(event) {
      var onFocus = this.props.onFocus;


      if (event.target != this.input) {
        return;
      }

      this.setState({
        focused: true
      });

      if (this.props.inputProps && this.props.inputProps.onFocus) {
        this.props.inputProps.onFocus(event);
      }

      if (onFocus) {
        onFocus(event);
      }
    }
  }, {
    key: 'handleBlur',
    value: function handleBlur(event) {
      this.setState({
        focused: false
      });

      if (this.isSpinning()) {
        this.stopSpin();
      }

      if (this.state.intermediateValue != null) {
        var value = (0, _clamp2.default)(parseFloat(this.state.intermediateValue), this.props.minValue, this.props.maxValue);

        if (!this.props.allowEmpty && (isNaN(value) || value == null)) {
          value = this.props.valueOnEmpty !== undefined ? this.props.valueOnEmpty : this.props.minValue || 0;
        }

        this.setValue(value);
      }

      if (this.props.inputProps && this.props.inputProps.onBlur) {
        this.props.inputProps.onBlur(event);
      }

      var onBlur = this.props.onBlur;

      if (onBlur) {
        onBlur(event);
      }
    }
  }, {
    key: 'handleChange',
    value: function handleChange(event) {
      event.stopPropagation();

      if (this.props.inputProps && this.props.inputProps.onChange) {
        this.props.inputProps.onChange(event);
      }
      var value = event.target.value;

      this.setValue(value);
    }
  }, {
    key: 'setValue',
    value: function setValue(value) {
      var _ref5 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
          silent = _ref5.silent;

      if (this.props.allowNegative && value === '-') {
        this.setIntermediateValue(value);
        return;
      }
      if (this.props.allowFloat && value === '.') {
        this.setIntermediateValue(value);
        return;
      }
      if (this.props.allowFloat && this.props.allowNegative && value === '-.') {
        this.setIntermediateValue(value);
        return;
      }
      var parseResult = parseFloat(value);

      var parsedValue = isNaN(parseResult) ? null : (0, _clamp2.default)(parseResult, this.props.minValue, this.props.maxValue);

      var isSameRepresentation = parsedValue === null || '' + value === parsedValue.toString();

      if (!this.props.allowEmpty && parsedValue === null) {
        this.setIntermediateValue(value || '');
        return;
      }

      if (isSameRepresentation) {
        this.setIntermediateValue(null);
        this.onChange(parsedValue);
      } else {
        this.setIntermediateValue(value);
      }
    }
  }, {
    key: 'setIntermediateValue',
    value: function setIntermediateValue(intermediateValue, callback) {
      if (intermediateValue === this.state.intermediateValue) {
        return;
      }
      this.setState({
        intermediateValue: intermediateValue
      });
    }
  }, {
    key: 'onChange',
    value: function onChange(value) {
      if (!isControlled(this.props)) {
        this.setState({
          value: value
        });
      }
      if (this.props.onChange) {
        this.props.onChange(value);
      }
    }
  }, {
    key: 'handleBackspaceKeyDown',
    value: function handleBackspaceKeyDown(event) {
      var _this3 = this;

      var _p5 = this.p,
          isControlledPrecision = _p5.isControlledPrecision,
          currentValue = _p5.currentValue,
          decimalDelimiter = _p5.decimalDelimiter;


      if (isControlledPrecision) {
        var currentSelection = (0, _getSelectionRange2.default)(this.input);
        var decimalPosition = (0, _getTransformedStringValues2.getDecimalDelimiterPosition)(currentValue, decimalDelimiter);

        if (currentSelection.end - 1 > decimalPosition) {
          this.backspaceOnControlledPrecision = true;
        }

        if (currentSelection.end - 1 === decimalPosition) {
          (0, _raf2.default)(function () {
            (0, _setCaretPosition2.default)(_this3.input, currentSelection.end - 1);
          });
          event.preventDefault();
          event.stopPropagation();
        }
      }
    }
  }, {
    key: 'handleDigitKeyDown',
    value: function handleDigitKeyDown() {
      var _p6 = this.p,
          isControlledPrecision = _p6.isControlledPrecision,
          currentValue = _p6.currentValue,
          decimalDelimiter = _p6.decimalDelimiter;


      if (isControlledPrecision) {
        var currentSelection = (0, _getSelectionRange2.default)(this.input);
        var decimalPosition = (0, _getTransformedStringValues2.getDecimalDelimiterPosition)(currentValue, decimalDelimiter);
        if (currentSelection.end > decimalPosition) {
          this.digitInputOnControlledPrecision = currentSelection.end > decimalPosition;
        }
      }
    }

    // https://github.com/zippyui/react-number-input/issues/16

  }, {
    key: 'handleDecimalDelimiterKeyDown',
    value: function handleDecimalDelimiterKeyDown(event) {
      var _p7 = this.p,
          allowFloat = _p7.allowFloat,
          value = _p7.value;


      if (!allowFloat) {
        event.preventDefault();
        return;
      }

      var selectedText = this.getSelectedText();
      if (selectedText == '.') {
        return;
      }

      if (isFloatString(selectedText)) {
        return;
      }

      if (isFloatString(value)) {
        event.preventDefault();
        return;
      }
    }
  }, {
    key: 'getSelectedText',
    value: function getSelectedText() {
      var _getSelectedRange = (0, _getSelectionRange2.default)(this.input),
          start = _getSelectedRange.start,
          end = _getSelectedRange.end;

      var value = '' + this.getValue();

      return value.substring(start, end);
    }
  }, {
    key: 'handleSelectionOverDecimalDelimiter',
    value: function handleSelectionOverDecimalDelimiter(event, currentSelection) {
      var _p8 = this.p,
          decimalDelimiter = _p8.decimalDelimiter,
          currentValue = _p8.currentValue,
          isControlledPrecision = _p8.isControlledPrecision,
          prefix = _p8.prefix,
          suffix = _p8.suffix;

      currentSelection = currentSelection || (0, _getSelectionRange2.default)(this.input);

      var selectionStartsAtBeginningOfNumber = currentSelection.start === 0;
      if (prefix) {
        selectionStartsAtBeginningOfNumber = currentSelection.start <= prefix.length + 1;
      }

      var selectionEndsAtEndOfNumber = currentSelection.end === currentValue.length;
      if (suffix) {
        selectionEndsAtEndOfNumber = currentSelection.end >= suffix.length + 1;
      }

      if (selectionStartsAtBeginningOfNumber && selectionEndsAtEndOfNumber) {
        return;
      }
    }
  }, {
    key: 'handleKeyUp',
    value: function handleKeyUp(event) {
      var key = event.key;


      if (this.props.inputProps && this.props.inputProps.onKeyUp) {
        this.props.inputProps.onKeyUp(event);
      }
      var name = 'handle' + toUpperFirst(key) + 'KeyUp';

      if (this[name]) {
        this[name](event);
      }
    }
  }, {
    key: 'handleKeyDown',
    value: function handleKeyDown(event) {
      var key = event.key;
      var _p9 = this.p,
          decimalDelimiter = _p9.decimalDelimiter,
          decimalDelimiterPosition = _p9.decimalDelimiterPosition;


      if (this.props.inputProps && this.props.inputProps.onKeyDown) {
        this.props.inputProps.onKeyDown(event);
      }

      if (this.props.onKeyDown) {
        this.props.onKeyDown(event);
      }

      if (!key) {
        return;
      }

      var currentSelection = (0, _getSelectionRange2.default)(this.input);

      if (selectionContainsPosition(currentSelection, decimalDelimiterPosition)) {
        this.handleSelectionOverDecimalDelimiter(event, currentSelection);
      }

      if (key.match(/[0-9]/)) {
        this.handleDigitKeyDown(event);

        return;
      }

      if (key === decimalDelimiter) {
        this.handleDecimalDelimiterKeyDown(event);

        return;
      }
      if (key === '-') {
        var caretPos = this.getSelectionStart();
        if (!this.props.allowNegative || caretPos) {
          event.preventDefault();
        }
        return;
      }

      var isPrintableCharacter = key.length == 1;
      if (isPrintableCharacter && !(event.metaKey || event.ctrlKey)) {
        event.preventDefault();
      }

      var name = 'handle' + toUpperFirst(key) + 'KeyDown';

      if (this[name]) {
        this[name](event);
      }
    }
  }, {
    key: 'handleArrowDownKeyDown',
    value: function handleArrowDownKeyDown(event) {
      this.handleArrowKeySpin(-1, event);
    }
  }, {
    key: 'handleArrowUpKeyDown',
    value: function handleArrowUpKeyDown(event) {
      this.handleArrowKeySpin(1, event);
    }
  }, {
    key: 'handleArrowKeySpin',
    value: function handleArrowKeySpin(direction, event) {
      var _this4 = this;

      if (this.isSpinning()) {
        event.preventDefault();
        event.stopPropagation();
        return;
      }

      if (this.props.spinOnArrowKeys) {
        event.preventDefault();
        event.stopPropagation();
        if (!this.isSpinning()) {
          var config = {
            shiftKey: event.shiftKey,
            event: event
          };

          this.stepTo(direction, config);

          this.spinTimeoutId = setTimeout(function () {
            _this4.startSpin(direction, config);
          }, 120);
        }
      }
    }
  }, {
    key: 'handleArrowUpKeyUp',
    value: function handleArrowUpKeyUp() {
      this.onSpinKeyUp();
    }
  }, {
    key: 'handleArrowDownKeyUp',
    value: function handleArrowDownKeyUp() {
      this.onSpinKeyUp();
    }
  }, {
    key: 'onSpinKeyUp',
    value: function onSpinKeyUp() {
      this.props.spinOnArrowKeys && this.stopSpin();
    }
  }, {
    key: 'getInput',
    value: function getInput() {
      return (0, _reactDom.findDOMNode)(this.refs.field);
    }
  }, {
    key: 'getNumericValue',
    value: function getNumericValue() {
      return this.p.numericValue;
    }
  }, {
    key: 'getValue',
    value: function getValue() {
      return this.p.value;
    }
  }, {
    key: 'isFocused',
    value: function isFocused() {
      return !!this.state.focused;
    }
  }, {
    key: 'getStepValue',
    value: function getStepValue(props, direction, config) {
      config = config || {};

      var value = this.p.value;
      var stepValue = config.step || props.step;
      if (this.state.shiftKey || config.shiftKey && props.shiftStep) {
        stepValue = props.shiftStep;
      }
      var theValue = isNumeric(this.p.value) ? value * 1 + direction * stepValue : this.props.initialStep || 0;

      return (0, _clamp2.default)(Math.round(theValue * 1000) / 1000, this.props.minValue, this.props.maxValue);
    }
  }, {
    key: 'stepTo',
    value: function stepTo(direction, config) {
      config = config || {};

      this.stepToTriggered = true;

      var props = this.props;
      var step = config.step || props.step;

      if (step != null) {
        var stepFn = typeof props.stepFn === 'function' ? props.stepFn : this.getStepValue;
        var value = stepFn(props, direction, config);
        this.spinValue = value;

        if (config.triggerChangeOnSpin) {
          if (props.triggerChangeOnSpinDelay > 0) {
            this.setIntermediateValue(value);
          }
          this.setValueOnSpin(value);
        } else {
          this.setIntermediateValue(value);
        }
      }
    }
  }, {
    key: 'setValueOnSpin',
    value: function setValueOnSpin(value) {
      this.setValue(value);
    }
  }, {
    key: 'stopSpin',
    value: function stopSpin() {
      clearTimeout(this.spinTimeoutId);
      clearTimeout(this.handleArrowDownTimeoutId);
      clearInterval(this.spinIntervalId);

      this.setValue(this.spinValue);

      this.handleArrowDownTimeoutId = null;
      this.spinTimeoutId = null;
      this.spinIntervalId = null;
    }
  }, {
    key: 'startSpin',
    value: function startSpin(direction, config) {
      if (this.spinIntervalId) {
        clearInterval(this.spinIntervalId);
      }

      this.stepToTriggered = false;

      this.spinValue = this.getValue();

      var stepTo = this.stepTo.bind(this, direction, _extends({
        triggerChangeOnSpin: this.props.triggerChangeOnSpin
      }, config));

      this.spinIntervalId = setInterval(stepTo, this.props.stepDelay);
    }
  }, {
    key: 'isSpinning',
    value: function isSpinning() {
      return this.spinIntervalId != null;
    }
  }, {
    key: 'handleWheel',
    value: function handleWheel(event) {
      var props = this.props;

      if ((props.requireFocusOnStep && this.isFocused() || !props.requireFocusOnStep) && props.stepOnWheel && props.step) {
        event.preventDefault();

        var nativeEvent = event.nativeEvent;
        var y = nativeEvent.wheelDeltaY || nativeEvent.wheelDelta || -nativeEvent.deltaY;

        y = y < 0 ? -1 : 1;

        this.stepTo(y, {
          shiftKey: event.shiftKey,
          event: event
        });
      }
    }
  }, {
    key: 'focus',
    value: function focus() {
      this.input.focus();
    }
  }, {
    key: 'getSelectionStart',
    value: function getSelectionStart() {
      return (0, _getSelectionStart3.default)(this.input);
    }
  }, {
    key: 'getProps',
    value: function getProps(props, state) {
      props = props || this.props;
      state = state || this.state;

      var suffix = getSuffix(props);
      var prefix = getPrefix(props);

      var currentValue = getCurrentValue(_extends({}, props, { suffix: suffix, prefix: prefix }), state);

      var decimalDelimiter = (0, _getDecimalDelimiter2.default)(props.locale);
      var decimalDelimiterPosition = (0, _getTransformedStringValues2.getDecimalDelimiterPosition)(currentValue, decimalDelimiter);

      var className = (0, _join2.default)(props.rootClassName, props.theme && props.rootClassName + '--theme-' + props.theme, props.disabled && props.rootClassName + '--disabled', state.focused && props.rootClassName + '--focused', props.enableSpinnerTools && props.rootClassName + '--enable-spinner-tools', props.enableClearButton && props.rootClassName + '--enable-clear-button', props.className);

      var controlled = isControlled(props);

      var value = controlled ? props.value : state.value;

      if (state.intermediateValue !== null) {
        value = state.intermediateValue;
      }

      var numericValue = Number(value);

      var p = _extends({}, props, {
        className: className,
        isControlled: controlled,
        isControlledPrecision: isControlledPrecision(props),

        value: value,
        numericValue: numericValue,

        currentValue: currentValue,
        suffix: suffix,
        prefix: prefix,

        decimalDelimiter: decimalDelimiter,
        decimalDelimiterPosition: decimalDelimiterPosition
      });

      p.formattedValue = getFormatedValue(value, p);

      return p;
    }
  }]);

  return ZippyNumericInput;
}(_react.Component);

ZippyNumericInput.defaultProps = {
  rootClassName: 'zippy-react-toolkit-numeric-input',
  spinOnArrowKeys: true,
  numbersOnly: true,
  step: 1,
  shiftStep: 10,
  requireFocusOnStep: true,
  stepOnWheel: true,
  allowNegative: true,
  allowFloat: true,
  triggerChangeOnSpin: true,
  triggerChangeOnSpinDelay: 80,
  stepDelay: 60,
  prefix: '',
  suffix: '',
  theme: 'default',
  format: 'number',
  currencyPosition: 'end',
  enableSpinnerTools: true,
  enableClearButton: true,
  acceptClearToolFocus: false,
  allowEmpty: true,
  toolPosition: 'end',
  arrowSize: 10,
  clearButtonSize: 10,
  inputProps: {}
};

ZippyNumericInput.propTypes = {
  rootClassName: _propTypes2.default.string,
  stepDelay: _propTypes2.default.number,
  step: _propTypes2.default.number,
  initialStep: _propTypes2.default.number,

  valueOnEmpty: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]),
  minValue: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]),
  maxValue: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]),

  onChange: _propTypes2.default.func,

  triggerChangeOnSpin: _propTypes2.default.bool,
  allowEmpty: _propTypes2.default.bool,
  allowFloat: _propTypes2.default.bool,
  requireFocusOnStep: _propTypes2.default.bool,

  spinOnArrowKeys: _propTypes2.default.bool,
  numbersOnly: _propTypes2.default.bool,

  shiftStep: _propTypes2.default.number,
  stepOnWheel: _propTypes2.default.bool,

  allowNegative: _propTypes2.default.bool,

  precision: _propTypes2.default.number,
  format: _propTypes2.default.oneOf(['currency', 'number', 'percentage']),
  locale: _propTypes2.default.string,

  prefix: _propTypes2.default.string,
  suffix: _propTypes2.default.string,
  theme: _propTypes2.default.string,
  arrowColor: _propTypes2.default.string,
  arrowStyle: _propTypes2.default.object,

  currencySymbol: _propTypes2.default.string,
  currencyPosition: _propTypes2.default.oneOf(['start', 'end']),

  value: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),
  defaultValue: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),
  wrapperProps: _propTypes2.default.object,

  disabled: _propTypes2.default.bool,

  acceptClearToolFocus: _propTypes2.default.bool,

  //clearButton style
  clearButtonSize: _propTypes2.default.number,
  clearButtonColor: _propTypes2.default.string,
  clearButtonStyle: _propTypes2.default.object,
  clearButtonClassName: _propTypes2.default.string,

  // enable
  enableSpinnerTools: _propTypes2.default.bool,
  enableClearButton: _propTypes2.default.bool,
  toolPosition: _propTypes2.default.oneOf(['start', 'end']),
  arrowSize: _propTypes2.default.number,
  arrowDownStyle: _propTypes2.default.object,
  arrowUpStyle: _propTypes2.default.object,
  inputProps: _propTypes2.default.object
};

global.isNumeric = isNumeric;
exports.default = ZippyNumericInput;
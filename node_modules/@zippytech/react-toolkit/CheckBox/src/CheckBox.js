'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _ZippyCheckBox$propTy;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; /**
                                                                                                                                                                                                                                                                   * Copyright (c) 2015-present, Zippy Technologies
                                                                                                                                                                                                                                                                   *
                                                                                                                                                                                                                                                                   * This source code is licensed under the MIT license found in the
                                                                                                                                                                                                                                                                   * LICENSE file in the root directory of this source tree.
                                                                                                                                                                                                                                                                   */

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('react-dom');

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _reactClass = require('@zippytech/react-class');

var _uglified = require('@zippytech/uglified');

var _uglified2 = _interopRequireDefault(_uglified);

var _cleanProps = require('../../common/cleanProps');

var _cleanProps2 = _interopRequireDefault(_cleanProps);

var _assign = require('../../common/assign');

var _assign2 = _interopRequireDefault(_assign);

var _join = require('../../common/join');

var _join2 = _interopRequireDefault(_join);

var _getClassNames = require('./utils/getClassNames');

var _getClassNames2 = _interopRequireDefault(_getClassNames);

var _icons = require('./icons');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var stopPropagation = function stopPropagation(e) {
  return e.stopPropagation();
};

var isValidCheckValue = function isValidCheckValue(value, props) {
  return value === props.checkedValue || value === props.uncheckedValue || value === props.indeterminateValue && props.supportIndeterminate;
};

var nextValue = function nextValue(oldValue, props) {
  if (oldValue === props.checkedValue) {
    // checked -> unchecked
    return props.uncheckedValue;
  }

  if (oldValue === props.uncheckedValue) {
    // unchecked -> indeterminate (if supported, otherwise to checked)
    return props.supportIndeterminate ? props.indeterminateValue : props.checkedValue;
  }

  if (props.supportIndeterminate && oldValue === props.indeterminateValue) {
    // indeterminate -> checked
    return props.checkedValue;
  }

  return props.uncheckedValue;
};

var getComponentStyle = function getComponentStyle(props, state) {
  var focused = state.focused;
  var disabled = props.disabled,
      focusedStyle = props.focusedStyle,
      disabledStyle = props.disabledStyle,
      readOnly = props.readOnly,
      readOnlyStyle = props.readOnlyStyle,
      style = props.style;


  var styles = [style || {}];

  if (focused) {
    styles.push(focusedStyle);
  }

  if (disabled) {
    styles.push(disabledStyle);
  }

  if (readOnly) {
    styles.push(readOnlyStyle);
  }

  return _assign2.default.apply(undefined, [{}].concat(styles));
};

var getComputedIconStyle = function getComputedIconStyle(config) {
  var focused = config.focused,
      disabled = config.disabled,
      focusedIconStyle = config.focusedIconStyle,
      disabledIconStyle = config.disabledIconStyle,
      iconStyle = config.iconStyle;

  var styles = [iconStyle];

  styles.push(getIconSizeStyle(config));

  if (focused) {
    styles.push(focusedIconStyle);
  }

  if (disabled) {
    styles.push(disabledIconStyle);
  }

  return _assign2.default.apply(undefined, [{}].concat(styles));
};

var getIconClassName = function getIconClassName(props) {
  var iconClassName = '';

  if (props.iconClassName) {
    iconClassName = props.iconClassName;
  }
  if (props.disabled && props.disabledIconClassName) {
    iconClassName = (0, _join2.default)(iconClassName, props.disabledIconClassName);
  }
  if (props.focused && props.focusedIconClassName) {
    iconClassName = (0, _join2.default)(iconClassName, props.focusedIconClassName);
  }
  if (props.readOnly && props.readOnlyIconClassName) {
    iconClassName = (0, _join2.default)(iconClassName, props.readOnlyIconClassName);
  }

  return iconClassName;
};

var renderIconFunctionOrJSX = function renderIconFunctionOrJSX(iconRender, props, _ref) {
  var style = _ref.style,
      className = _ref.className;

  if (typeof iconRender === 'function') {
    return iconRender({ style: style, className: className }, props);
  }

  // default style has width and height set to 24
  return _react2.default.cloneElement(iconRender, {
    style: _extends({}, iconRender.props.style, style),
    className: (0, _join2.default)(iconRender.props.className, className)
  });
};

var renderCheckedIcon = function renderCheckedIcon(props, iconProps) {
  var checkedIcon = props.checkedIcon,
      checkedIconSrc = props.checkedIconSrc;


  if (checkedIconSrc) {
    return _react2.default.createElement('img', _extends({}, iconProps, { src: checkedIconSrc }));
  }

  return renderIconFunctionOrJSX(checkedIcon, props, iconProps);
};

var renderUncheckedIcon = function renderUncheckedIcon(props, iconProps) {
  var uncheckedIcon = props.uncheckedIcon,
      uncheckedIconSrc = props.uncheckedIconSrc;


  if (uncheckedIconSrc) {
    return _react2.default.createElement('img', _extends({}, iconProps, { src: uncheckedIconSrc }));
  }

  return renderIconFunctionOrJSX(uncheckedIcon, props, iconProps);
};

var renderIndeterminateIcon = function renderIndeterminateIcon(props, iconProps) {
  var indeterminateIcon = props.indeterminateIcon,
      indeterminateIconSrc = props.indeterminateIconSrc;


  if (indeterminateIconSrc) {
    return _react2.default.createElement('img', _extends({}, iconProps, { src: indeterminateIconSrc }));
  }

  return renderIconFunctionOrJSX(indeterminateIcon, props, iconProps);
};

var renderIcon = function renderIcon(config) {
  var checkedDescriptor = getCheckedDescriptor(config.checked, config);
  var checkBoxIconStyle = getComputedIconStyle(config);

  var iconProps = {
    className: getIconClassName(config),
    style: checkBoxIconStyle
  };

  switch (checkedDescriptor) {
    case CHECKED_STATE:
      return renderCheckedIcon(config, iconProps);

    case UNCHECKED_STATE:
      return renderUncheckedIcon(config, iconProps);

    case INDETERMINATE_STATE:
      return renderIndeterminateIcon(config, iconProps);
  }
};

var getIconSizeStyle = function getIconSizeStyle(props) {
  var style = {};
  var iconSize = props.iconSize;


  if (Array.isArray(iconSize)) {
    style.width = iconSize[0];
    style.height = iconSize[1];
  } else {
    style.width = style.height = iconSize;
  }

  return style;
};

var CHECKED_STATE = 'checked';
var UNCHECKED_STATE = 'unchecked';
var INDETERMINATE_STATE = 'indeterminate';

var getCheckedDescriptor = function getCheckedDescriptor(checked, props) {
  var checkedValue = props.checkedValue,
      supportIndeterminate = props.supportIndeterminate,
      indeterminateValue = props.indeterminateValue;


  if (checked === checkedValue) {
    return CHECKED_STATE;
  }

  if (supportIndeterminate && checked === indeterminateValue) {
    return INDETERMINATE_STATE;
  }

  return UNCHECKED_STATE;
};

var renderHiddenInput = function renderHiddenInput(props) {
  var withHiddenInput = props.withHiddenInput,
      name = props.name;
  var checked = props.checked;

  var checkedDescriptor = getCheckedDescriptor(checked, props);

  switch (checkedDescriptor) {
    case CHECKED_STATE:
      checked = props.checkedSubmitValue === undefined ? props.checkedValue : props.checkedSubmitValue;
      break;
    case UNCHECKED_STATE:
      checked = props.uncheckedSubmitValue === undefined ? props.uncheckedValue : props.uncheckedSubmitValue;
      break;
    case INDETERMINATE_STATE:
      checked = props.indeterminateSubmitValue === undefined ? props.indeterminateValue : props.indeterminateSubmitValue;
  }

  if (checked === null) {
    checked = '';
  }

  if (withHiddenInput) {
    return _react2.default.createElement('input', { type: 'hidden', name: name, value: checked });
  }

  return null;
};

var getChecked = function getChecked(props, state) {
  var checked = isControlledComponent(props) ? props.checked : state.checked;

  return isValidCheckValue(checked, props) ? checked : props.uncheckedValue;
};

var isControlledComponent = function isControlledComponent(props) {
  return props.checked !== undefined;
};

var ZippyCheckBox = function (_Component) {
  _inherits(ZippyCheckBox, _Component);

  function ZippyCheckBox(props) {
    _classCallCheck(this, ZippyCheckBox);

    var _this = _possibleConstructorReturn(this, (ZippyCheckBox.__proto__ || Object.getPrototypeOf(ZippyCheckBox)).call(this, props));

    (0, _reactClass.autoBind)(_this);

    var defaultChecked = props.defaultChecked,
        uncheckedValue = props.uncheckedValue;


    _this.state = {
      checked: isValidCheckValue(defaultChecked, props) ? defaultChecked : uncheckedValue
    };
    return _this;
  }

  _createClass(ZippyCheckBox, [{
    key: 'componentDidUpdate',
    value: function componentDidUpdate(previousProps) {
      this.checkUpdateIndeterminate(this.p);

      if (previousProps.supportIndeterminate && !this.props.supportIndeterminate) {
        this.setNativeIndeterminate(false);
      }
    }
  }, {
    key: 'componentDidMount',
    value: function componentDidMount() {
      this.checkUpdateIndeterminate();
      if (this.props.autoFocus) {
        this.focus();
      }
    }
  }, {
    key: 'UNSAFE_componentWillReceiveProps',
    value: function UNSAFE_componentWillReceiveProps(nextProps) {
      if (nextProps.autoFocus && !this.props.autoFocus && !this.isFocused()) {
        this.focus();
      }
    }
  }, {
    key: 'focus',
    value: function focus() {
      (0, _reactDom.findDOMNode)(this).focus();
    }
  }, {
    key: 'checkUpdateIndeterminate',
    value: function checkUpdateIndeterminate() {
      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.p;

      if (props.browserNative && props.supportIndeterminate) {
        this.setNativeIndeterminate(getCheckedDescriptor(props.checked, props) === INDETERMINATE_STATE);
      }
    }
  }, {
    key: 'isFocused',
    value: function isFocused() {
      return this.state.focused;
    }
  }, {
    key: 'handleFocus',
    value: function handleFocus(event) {
      var onFocus = this.p.onFocus;


      this.setState({
        focused: true
      });

      onFocus && onFocus(event);
    }
  }, {
    key: 'handleBlur',
    value: function handleBlur(event) {
      var onBlur = this.p.onBlur;


      this.setState({
        focused: false
      });

      onBlur && onBlur(event);
    }
  }, {
    key: 'changeToNextValue',
    value: function changeToNextValue(event) {
      var _p = this.p,
          readOnly = _p.readOnly,
          checked = _p.checked,
          nextValue = _p.nextValue;


      if (readOnly) {
        return;
      }

      var nextCheckedValue = nextValue(checked, this.p);

      this.setChecked(nextCheckedValue, event);
    }
  }, {
    key: 'setChecked',
    value: function setChecked(value, event) {
      var _p2 = this.p,
          disabled = _p2.disabled,
          onChange = _p2.onChange;


      if (disabled) {
        return;
      }

      if (!isValidCheckValue(value, this.p)) {
        return;
      }

      if (!isControlledComponent(this.props)) {
        this.setState({
          checked: value
        });
      }

      if (typeof onChange == 'function') {
        onChange(value, event);
      }
    }
  }, {
    key: 'handleClick',
    value: function handleClick(event) {
      var _p3 = this.p,
          onClick = _p3.onClick,
          disabled = _p3.disabled;


      if (disabled) {
        return;
      }

      this.changeToNextValue(event);

      if (onClick) {
        onClick(event);
      }
    }
  }, {
    key: 'handleKeyDown',
    value: function handleKeyDown(event) {
      var onKeyDown = this.p.onKeyDown;


      if (event.key === ' ') {
        // a space was pressed
        event.preventDefault();
        this.changeToNextValue(event);
      }

      if (typeof onKeyDown == 'function') {
        onKeyDown(event);
      }
    }
  }, {
    key: 'getProps',
    value: function getProps(props, state) {
      var checked = getChecked(props, state);

      var style = getComponentStyle(props, state);

      var className = (0, _getClassNames2.default)(props, state, { checked: checked });
      var shouldSubmitIsFunction = typeof props.shouldSubmit === 'function';
      var shouldSubmitValue = shouldSubmitIsFunction ? props.shouldSubmit(checked, props) : typeof props.shouldSubmit === 'undefined' || props.shouldSubmit;

      if (props.showWarnings && shouldSubmitIsFunction && shouldSubmitValue && !props.name) {
        console.warn('shouldSubmit function returned true, but "name" prop is missing');
      }

      var withHiddenInput = !!(props.name && shouldSubmitValue);

      var focused = state.focused;


      return _extends({}, props, {
        checked: checked,
        style: style,
        withHiddenInput: withHiddenInput,
        focused: focused,
        className: className
      });
    }
  }, {
    key: 'render',
    value: function render() {
      var props = this.props,
          state = this.state;

      var _p4 = this.p = this.getProps(props, state),
          children = _p4.children,
          className = _p4.className,
          style = _p4.style,
          tabIndex = _p4.tabIndex,
          iconCheckOnly = _p4.iconCheckOnly,
          browserNative = _p4.browserNative,
          focusable = _p4.focusable;

      var eventHandlers = {
        onBlur: this.handleBlur,
        onFocus: this.handleFocus,
        onKeyDown: this.handleKeyDown
      };

      if (!iconCheckOnly) {
        eventHandlers.onClick = this.handleClick;
      }

      var domProps = _extends({}, (0, _cleanProps2.default)(props, ZippyCheckBox.propTypes), eventHandlers, {
        className: className,
        style: style,
        tabIndex: props.disabled === true ? null : tabIndex
      });

      if (!props.focusable) {
        delete domProps.tabIndex;
      }

      return browserNative ? this.renderBrowserNative(domProps) : _react2.default.createElement(
        'div',
        domProps,
        this.renderCheckbox(this.p, iconCheckOnly && { onClick: this.handleClick }),
        children && _react2.default.createElement(
          'div',
          { className: props.rootClassName + '__inner-content-wrapper' },
          children
        )
      );
    }
  }, {
    key: 'renderBrowserNative',
    value: function renderBrowserNative(domProps) {
      var _props = this.props,
          children = _props.children,
          iconCheckOnly = _props.iconCheckOnly;

      var Factory = iconCheckOnly ? 'div' : 'label';

      return _react2.default.createElement(
        Factory,
        _extends({}, domProps, {
          onClick: this.props.onClick,
          onChange: stopPropagation
        }),
        this.renderBrowserNativeInput(),
        children
      );
    }
  }, {
    key: 'renderBrowserNativeInput',
    value: function renderBrowserNativeInput() {
      var _this2 = this;

      var _p5 = this.p,
          tabIndex = _p5.tabIndex,
          rootClassName = _p5.rootClassName,
          disabled = _p5.disabled,
          checked = _p5.checked,
          renderNativeBrowserInput = _p5.renderNativeBrowserInput,
          withHiddenInput = _p5.withHiddenInput,
          name = _p5.name;


      var className = (0, _join2.default)(this.p.className, rootClassName + '--browser-native');

      var inputProps = {
        disabled: disabled,
        className: className,
        type: 'checkbox',
        ref: function ref(_ref2) {
          return _this2.node = _ref2;
        },
        onClick: this.handleClick,
        checked: !!checked,
        tabIndex: disabled === true ? null : tabIndex
      };

      if (withHiddenInput) {
        inputProps.name = name;
      }

      var result = void 0;
      if (typeof renderNativeBrowserInput === 'function') {
        result = renderNativeBrowserInput({ inputProps: inputProps, props: this.p });
      }
      if (result === undefined) {
        result = _react2.default.createElement('input', inputProps);
      }

      return result;
    }
  }, {
    key: 'renderCheckbox',
    value: function renderCheckbox(config, eventHandlers) {
      var input = config.disabled !== true && renderHiddenInput(config);
      var icon = renderIcon(config);
      var domProps = {};

      if (config.disabled) {
        domProps.disabled = 'disabled';
      }

      return _react2.default.createElement(
        'div',
        _extends({
          className: config.rootClassName + '__icon-wrapper'
        }, domProps, eventHandlers),
        input,
        icon
      );
    }
  }, {
    key: 'setNativeIndeterminate',
    value: function setNativeIndeterminate(indeterminate) {
      if (this.node) {
        this.node.indeterminate = indeterminate;
      }
    }
  }]);

  return ZippyCheckBox;
}(_react.Component);

ZippyCheckBox.defaultProps = {
  rootClassName: 'zippy-react-toolkit-checkbox',
  browserNative: false,
  iconStyle: {},
  disabledIconStyle: {},
  focusedIconStyle: {},

  disabledStyle: {},
  readOnlyStyle: {},
  focusedStyle: {},

  supportIndeterminate: false,

  focusable: true,
  disabled: false,
  readOnly: false,
  tabIndex: 0,

  checkedValue: true,
  uncheckedValue: false,
  indeterminateValue: null,
  checkedSubmitValue: undefined,
  uncheckedSubmitValue: undefined,
  indeterminateSubmitValue: undefined,
  checked: undefined,
  defaultChecked: undefined,

  // in order to be correctly vertically aligned
  // the icon size needs to be somehow linked to the current font size
  // so we use em units and a value that is divisible by 2.
  iconSize: 23,

  checkedIcon: _icons.checkedIcon,
  uncheckedIcon: _icons.uncheckedIcon,
  indeterminateIcon: _icons.indeterminateIcon,
  iconCheckOnly: false,

  shouldSubmit: undefined,
  nextValue: nextValue,

  childrenPosition: 'end',
  inlineBlock: true,
  theme: 'default',
  showWarnings: !_uglified2.default
};

var func = _propTypes2.default.func,
    number = _propTypes2.default.number,
    object = _propTypes2.default.object,
    string = _propTypes2.default.string,
    bool = _propTypes2.default.bool,
    any = _propTypes2.default.any;

var nonNullPropType = function nonNullPropType(props, propName, componentName) {
  if (props[propName] === null) {
    return new Error(propName + ' is null in ' + componentName + '. This is not valid for input; use undefined instead.');
  }
  return null;
};

ZippyCheckBox.propTypes = (_ZippyCheckBox$propTy = {
  rootClassName: string,
  browserNative: bool,
  focusable: bool,
  renderNativeBrowserInput: func,
  shouldSubmit: function shouldSubmit(props, propName, componentName) {
    if (props.shouldSubmit && typeof props.shouldSubmit !== 'function' && !props.name) {
      return new Error('"shouldSubmit" was true, but component ' + componentName + ' requires prop "name" to be submitted.');
    }
  },
  value: function value(props) {
    if (typeof props.value !== 'undefined') {
      return new Error('"value" prop is not supported. Use "checked" instead.');
    }
  },
  defaultValue: function defaultValue(props) {
    if (typeof props.defaultValue !== 'undefined') {
      return new Error('"defaultValue" prop is not supported. Use "checked" instead.');
    }
  },
  nextValue: func,

  name: string,
  iconClassName: string,
  readOnlyClassName: string,
  disabledClassName: string,
  focusedClassName: string,
  checked: any,
  defaultChecked: any,

  disabled: bool,
  readOnly: bool,
  tabIndex: number,

  supportIndeterminate: bool,

  checkedValue: any,
  uncheckedValue: any,
  indeterminateValue: any,
  checkedSubmitValue: nonNullPropType,
  uncheckedSubmitValue: nonNullPropType,
  indeterminateSubmitValue: nonNullPropType,

  iconSize: _propTypes2.default.oneOfType([string, _propTypes2.default.arrayOf([string]), number, _propTypes2.default.arrayOf(number)]),

  checkedIconSrc: string,
  checkedIcon: any,
  iconCheckOnly: bool,

  uncheckedIconSrc: string,
  uncheckedIcon: any,

  indeterminateIconSrc: string,
  indeterminateIcon: any,

  childrenPosition: _propTypes2.default.oneOf(['start', 'end']),
  inlineBlock: bool,
  rtl: bool,

  theme: string,

  iconStyle: object,
  disabledIconStyle: object,
  focusedIconStyle: object

}, _defineProperty(_ZippyCheckBox$propTy, 'iconClassName', string), _defineProperty(_ZippyCheckBox$propTy, 'disabledIconClassName', string), _defineProperty(_ZippyCheckBox$propTy, 'focusedIconClassName', string), _defineProperty(_ZippyCheckBox$propTy, 'readOnlyIconClassName', string), _defineProperty(_ZippyCheckBox$propTy, 'disabledStyle', object), _defineProperty(_ZippyCheckBox$propTy, 'readOnlyStyle', object), _defineProperty(_ZippyCheckBox$propTy, 'focusedStyle', object), _defineProperty(_ZippyCheckBox$propTy, 'showWarnings', bool), _ZippyCheckBox$propTy);

exports.default = ZippyCheckBox;
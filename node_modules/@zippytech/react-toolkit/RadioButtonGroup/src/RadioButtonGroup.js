'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CheckBox = exports.RadioButton = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _autoBind = require('@zippytech/react-class/autoBind');

var _autoBind2 = _interopRequireDefault(_autoBind);

var _cleanProps = require('../../common/cleanProps');

var _cleanProps2 = _interopRequireDefault(_cleanProps);

var _join = require('../../common/join');

var _join2 = _interopRequireDefault(_join);

var _RadioButton = require('../../RadioButton');

var _RadioButton2 = _interopRequireDefault(_RadioButton);

var _CheckBox = require('../../CheckBox');

var _CheckBox2 = _interopRequireDefault(_CheckBox);

var _uglified = require('@zippytech/uglified');

var _uglified2 = _interopRequireDefault(_uglified);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } } /**
                                                                                                                                                                                                     * Copyright (c) 2015-present, Zippy Technologies
                                                                                                                                                                                                     *
                                                                                                                                                                                                     * This source code is licensed under the MIT license found in the
                                                                                                                                                                                                     * LICENSE file in the root directory of this source tree.
                                                                                                                                                                                                     */

var KEYS = {
  LEFT_ARROW: 'ArrowLeft',
  UP_ARROW: 'ArrowUp',
  RIGHT_ARROW: 'ArrowRight',
  DOWN_ARROW: 'ArrowDown'
};

var CLASS_NAME = 'zippy-react-toolkit-radio-button-group';

var getClassNames = function getClassNames(props, state) {
  var theme = props.theme,
      orientation = props.orientation,
      stretch = props.stretch,
      rtl = props.rtl,
      horizontal = props.horizontal,
      disabled = props.disabled;


  return (0, _join2.default)(CLASS_NAME, props.className, CLASS_NAME + '--theme-' + theme, CLASS_NAME + '--orientation-' + orientation, stretch && CLASS_NAME + '--stretch', horizontal && CLASS_NAME + '--orientation-horizontal', disabled && CLASS_NAME + '--disabled', rtl ? CLASS_NAME + '--rtl' : CLASS_NAME + '--ltr', state.focused && CLASS_NAME + '--focused');
};

var isChildChecked = function isChildChecked(_ref, idx) {
  var checkedItem = _ref.checkedItem;

  return !!checkedItem === idx;
};

var isControlledComponent = function isControlledComponent(props) {
  return !!props.checkedItemValue;
};

var emptyFn = function emptyFn() {
  return false;
};

var generateIndexToGroupMapping = function generateIndexToGroupMapping(props) {
  var children = props.children,
      radioOptions = props.radioOptions;

  var cleanChildren = void 0;
  if (!children) {
    return radioOptions.reduce(function (acc, option, idx) {
      acc[option.value] = idx;
      return acc;
    }, {});
  } else if (children && children.type) {
    cleanChildren = [children];
  } else {
    cleanChildren = [].concat(_toConsumableArray(children));
  }

  return cleanChildren.reduce(function (acc, child, idx) {
    var parsedChild = child;
    if (typeof child === 'function') {
      parsedChild = child({
        onChange: emptyFn,
        checked: false
      });
    }

    var radioValue = parsedChild.props['data-radio-value'];

    if (typeof radioValue === 'undefined' || radioValue === null || radioValue === false) {
      radioValue = idx;
    }

    acc[radioValue] = idx;

    return acc;
  }, {});
};

var getInitialStateValue = function getInitialStateValue(props) {
  var radioValue = props.radioValue,
      defaultRadioValue = props.defaultRadioValue;

  if (radioValue) {
    return null;
  }

  if (defaultRadioValue || defaultRadioValue === 0) {
    return defaultRadioValue;
  }

  return '';
};

var getRadioBasedChildren = function getRadioBasedChildren(_ref2) {
  var radioOptions = _ref2.radioOptions,
      renderItem = _ref2.renderItem,
      currentCheckedValue = _ref2.currentCheckedValue,
      onChange = _ref2.onChange,
      disabled = _ref2.disabled,
      readOnly = _ref2.readOnly,
      rtl = _ref2.rtl;

  return radioOptions.reduce(function (acc, option) {
    acc.push(renderItem({
      rtl: rtl,
      checked: option.value === currentCheckedValue,
      'data-radio-value': option.value,
      children: option.label,
      tabIndex: null,
      onChange: onChange,
      key: option.value,
      disabled: disabled,
      readOnly: readOnly
    }));
    return acc;
  }, []);
};

var getCurrentCheckedValue = function getCurrentCheckedValue(props, state) {
  var radioValue = props.radioValue;
  var checkedItemValue = state.checkedItemValue;

  if (radioValue) {
    return radioValue;
  }
  return checkedItemValue;
};

var ZippyRadioButtonGroup = function (_Component) {
  _inherits(ZippyRadioButtonGroup, _Component);

  function ZippyRadioButtonGroup(props) {
    _classCallCheck(this, ZippyRadioButtonGroup);

    var _this = _possibleConstructorReturn(this, (ZippyRadioButtonGroup.__proto__ || Object.getPrototypeOf(ZippyRadioButtonGroup)).call(this, props));

    (0, _autoBind2.default)(_this);
    _this.valueToIndexMapping = generateIndexToGroupMapping(props);
    _this.state = {
      checkedItemValue: getInitialStateValue(props)
    };
    return _this;
  }

  _createClass(ZippyRadioButtonGroup, [{
    key: 'getCleanChild',
    value: function getCleanChild(child, idx) {
      var props = this.props,
          state = this.state,
          currentCheckedValue = this.currentCheckedValue,
          valueToIndexMapping = this.valueToIndexMapping;


      var currentChild = child;
      var disabled = props.disabled,
          readOnly = props.readOnly;


      var apiProps = {
        checked: valueToIndexMapping[currentCheckedValue] === idx,
        onChange: this.onRadioChildChange.bind(this),
        disabled: disabled,
        readOnly: readOnly
      };

      if (typeof child === 'function') {
        currentChild = child(apiProps);
      } else {
        currentChild = _react2.default.cloneElement(currentChild, apiProps);
      }

      var _currentChild$props = currentChild.props,
          key = _currentChild$props.key,
          dataRadioValue = _currentChild$props['data-radio-value'];


      if (key === undefined || dataRadioValue === undefined) {
        key = key || idx;
        dataRadioValue = dataRadioValue || idx;

        currentChild = _react2.default.cloneElement(currentChild, {
          key: key,
          'data-radio-value': dataRadioValue
        });
      }

      return currentChild;
    }
  }, {
    key: 'onRadioChildChange',
    value: function onRadioChildChange(radioValue) {
      this.setValue(radioValue);
    }
  }, {
    key: 'setValue',
    value: function setValue(radioValue) {
      var _p = this.p,
          isControlled = _p.isControlled,
          onChange = _p.onChange,
          name = _p.name;

      if (!isControlled) {
        this.setState({
          checkedItemValue: radioValue
        });
      }

      var index = this.valueToIndexMapping[radioValue];

      if (typeof onChange == 'function') {
        onChange({
          checkedItemIndex: index,
          checkedItemValue: radioValue,
          groupName: name
        });
      }

      this.setState({
        focusedIndex: index
      });
    }
  }, {
    key: 'getValue',
    value: function getValue() {
      return this.currentCheckedValue;
    }
  }, {
    key: 'getName',
    value: function getName() {
      return this.p.name;
    }
  }, {
    key: 'getProps',
    value: function getProps(props, state) {
      props = props || this.props;
      state = state || this.state;

      var cleanChildren = void 0;

      var currentCheckedValue = this.currentCheckedValue = getCurrentCheckedValue(props, state);

      var shouldSubmitIsFunction = typeof props.shouldSubmit === 'function';
      var shouldSubmitValue = shouldSubmitIsFunction ? props.shouldSubmit(props) : typeof props.shouldSubmit === 'undefined' || props.shouldSubmit;

      if (props.showWarnings && shouldSubmitIsFunction && shouldSubmitValue && !props.name) {
        console.warn('shouldSubmit function returned true, but "name" prop is missing');
      }

      var withHiddenInput = !!(props.name && shouldSubmitValue);

      var _props = props,
          radioOptions = _props.radioOptions,
          renderItem = _props.renderItem,
          disabled = _props.disabled,
          readOnly = _props.readOnly,
          rtl = _props.rtl;


      if (radioOptions) {
        cleanChildren = getRadioBasedChildren({
          radioOptions: radioOptions,
          renderItem: renderItem,
          rtl: rtl,
          currentCheckedValue: currentCheckedValue,
          onChange: this.onRadioChildChange.bind(this),
          disabled: disabled,
          readOnly: readOnly
        });
      } else if (props.children && props.children.type) {
        cleanChildren = [this.getCleanChild(props.children, 0)];
      } else {
        cleanChildren = [].concat(_toConsumableArray(props.children)).map(this.getCleanChild);
      }

      return _extends({}, props, {
        withHiddenInput: withHiddenInput,
        children: cleanChildren,
        className: getClassNames(props, state),
        isControlled: isControlledComponent(props),
        currentCheckedValue: currentCheckedValue
      });
    }
  }, {
    key: 'renderHiddenInput',
    value: function renderHiddenInput() {
      var _this2 = this;

      var _p2 = this.p,
          tabIndex = _p2.tabIndex,
          disabled = _p2.disabled,
          checked = _p2.checked,
          withHiddenInput = _p2.withHiddenInput,
          name = _p2.name,
          shouldSubmit = _p2.shouldSubmit;

      var inputProps = {
        type: 'checkbox',
        ref: function ref(_ref3) {
          return _this2.node = _ref3;
        },
        onClick: this.handleClick,
        checked: !!checked,
        tabIndex: disabled === true ? null : tabIndex
      };

      if (disabled) {
        return null;
      }

      if (!name) {
        return null;
      }

      if (typeof shouldSubmit == 'function' && shouldSubmit() === false) {
        return null;
      }

      if (shouldSubmit === false) {
        return null;
      }

      if (withHiddenInput) {
        inputProps.name = name;
      }
      return _react2.default.createElement('input', _extends({}, inputProps, { type: 'hidden' }));
    }
  }, {
    key: '_attachEventHandler',
    value: function _attachEventHandler(key, handler, propagatedProps) {
      var oldEventHandler = propagatedProps[key];
      if (oldEventHandler) {
        propagatedProps[key] = function (ev) {
          handler(ev);
          oldEventHandler(ev);
        };
      } else {
        propagatedProps[key] = handler;
      }
    }
  }, {
    key: 'setKeyboardNavigationProps',
    value: function setKeyboardNavigationProps(computedRBGDOMProps) {
      computedRBGDOMProps.tabIndex = this.props.tabIndex || 0;
      this._attachEventHandler('onFocus', this.onFocus, computedRBGDOMProps);
      this._attachEventHandler('onBlur', this.onBlur, computedRBGDOMProps);
      this._attachEventHandler('onKeyDown', this.onKeyDown, computedRBGDOMProps);
    }
  }, {
    key: 'onFocus',
    value: function onFocus(event) {
      if (!event || !event.target) {
        return;
      }

      var currentTarget = event.target;

      if (!currentTarget) {
        return;
      }
      if (!currentTarget.dataset) {
        return;
      }

      var radioValue = currentTarget.dataset.radioValue;

      var focusedIndex = this.valueToIndexMapping[radioValue];

      var newState = {
        focused: true
      };

      if (focusedIndex !== undefined) {
        newState.focusedIndex = focusedIndex;
      }

      this.setState(newState);
    }
  }, {
    key: 'onBlur',
    value: function onBlur() {
      this.setState({ focused: false });
    }
  }, {
    key: 'onKeyDown',
    value: function onKeyDown(ev) {
      if (!this.state.focused) {
        return;
      }
      if (this.props.disabled) {
        return;
      }
      if (this.props.readOnly) {
        return;
      }
      var focusedIndex = this.state.focusedIndex;

      var cleanedProps = this.getProps();
      var children = cleanedProps.children;

      switch (ev.key) {
        case KEYS.DOWN_ARROW:
        case KEYS.RIGHT_ARROW:
          ev.preventDefault();
          if (focusedIndex < children.length - 1) {
            var nextValue = children[focusedIndex + 1].props['data-radio-value'];
            this.setValue(nextValue);
            this.setState({ focusedIndex: focusedIndex + 1 });
          }
          break;
        case KEYS.UP_ARROW:
        case KEYS.LEFT_ARROW:
          ev.preventDefault();
          if (focusedIndex > 0) {
            var prevValue = children[focusedIndex - 1].props['data-radio-value'];
            this.setValue(prevValue);
            this.setState({ focusedIndex: focusedIndex - 1 });
          }
          break;
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _p3 = this.p = this.getProps(),
          children = _p3.children,
          className = _p3.className,
          name = _p3.name,
          currentCheckedValue = _p3.currentCheckedValue,
          submitFriendly = _p3.submitFriendly,
          enableKeyboardNavigation = _p3.enableKeyboardNavigation;

      var cleanedProps = (0, _cleanProps2.default)(this.props, ZippyRadioButtonGroup.propTypes);
      var computedRBGDOMProps = _extends({}, cleanedProps, {
        className: className,
        ref: 'RGBNode'
      });

      if (enableKeyboardNavigation) {
        this.setKeyboardNavigationProps(computedRBGDOMProps);
      }

      return _react2.default.createElement(
        'div',
        computedRBGDOMProps,
        children,
        submitFriendly && this.renderHiddenInput({ name: name, value: currentCheckedValue })
      );
    }
  }]);

  return ZippyRadioButtonGroup;
}(_react.Component);

ZippyRadioButtonGroup.defaultProps = {
  defaultRadioValue: undefined,
  submitFriendly: true,
  renderItem: function renderItem(props) {
    return _react2.default.createElement(WrappedRadioInput, props);
  },
  orientation: 'vertical',
  theme: 'default',
  disabled: false,
  readOnly: false,
  enableKeyboardNavigation: true,
  showWarnings: !_uglified2.default,
  stretch: false
};

ZippyRadioButtonGroup.propTypes = {
  defaultRadioValue: _propTypes2.default.any,
  rtl: _propTypes2.default.bool,
  shouldComponentUpdate: _propTypes2.default.func,
  children: _propTypes2.default.any,
  submitFriendly: _propTypes2.default.bool,
  radioOptions: _propTypes2.default.arrayOf(_propTypes2.default.object),
  renderItem: _propTypes2.default.func,
  orientation: _propTypes2.default.oneOf(['vertical', 'horizontal']),
  theme: _propTypes2.default.string,
  onChange: _propTypes2.default.func,
  stretch: _propTypes2.default.bool,
  shouldSubmit: function shouldSubmit(props, propName, componentName) {
    if (props.shouldSubmit && typeof props.shouldSubmit !== 'function' && !props.name) {
      return new Error('"shouldSubmit" was true, but component ' + componentName + ' requires prop "name" to be submitted.');
    }
  },
  radioValue: _propTypes2.default.any,
  value: function value(props) {
    if (typeof props.value !== 'undefined') {
      return new Error('"value" prop is not supported. Use "radioValue" instead.');
    }
  },
  defaultValue: function defaultValue(props) {
    if (typeof props.defaultValue !== 'undefined') {
      return new Error('"defaultValue" prop is not supported. Use "defaultRadioValue" instead.');
    }
  },
  disabled: _propTypes2.default.bool,
  readOnly: _propTypes2.default.bool,
  enableKeyboardNavigation: _propTypes2.default.bool,
  showWarnings: _propTypes2.default.bool
};

var WrappedRadioInput = function WrappedRadioInput(props) {
  var onChange = function onChange(data, event) {
    if (props.onChange) {
      props.onChange(props['data-radio-value']);
    }
  };
  return _react2.default.createElement(_RadioButton2.default, _extends({
    iconSize: 16,
    inlineBlock: false
  }, props, {
    checkedValue: true,
    uncheckedValue: false,
    onChange: onChange
  }));
};

var WrappedCheckBox = function WrappedCheckBox(props) {
  var onChange = function onChange(data, event) {
    if (props.onChange) {
      props.onChange(props['data-radio-value']);
    }
  };
  return _react2.default.createElement(_CheckBox2.default, _extends({
    iconSize: 16
  }, props, {
    checkedValue: true,
    uncheckedValue: false,
    onChange: onChange
  }));
};

exports.default = ZippyRadioButtonGroup;
exports.RadioButton = WrappedRadioInput;
exports.CheckBox = WrappedCheckBox;
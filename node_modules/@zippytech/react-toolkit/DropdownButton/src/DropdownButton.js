'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _regionAlign = require('@zippytech/region-align');

var _regionAlign2 = _interopRequireDefault(_regionAlign);

var _join = require('../../common/join');

var _join2 = _interopRequireDefault(_join);

var _Menu = require('../../Menu');

var _Menu2 = _interopRequireDefault(_Menu);

var _Button = require('../../Button');

var _Button2 = _interopRequireDefault(_Button);

var _ToggleIcon = require('../../common/ToggleIcon');

var _ToggleIcon2 = _interopRequireDefault(_ToggleIcon);

var _cleanProps = require('../../common/cleanProps');

var _cleanProps2 = _interopRequireDefault(_cleanProps);

var _containsNode = require('../../common/containsNode');

var _containsNode2 = _interopRequireDefault(_containsNode);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Copyright (c) 2015-present, Zippy Technologies
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * This source code is licensed under the MIT license found in the
file in the root directory of this source tree.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */

var ALIGN_OFFSET = { top: 5 };

var returnFalse = function returnFalse() {
  return false;
};

var ZippyDropDownButton = function (_Component) {
  _inherits(ZippyDropDownButton, _Component);

  function ZippyDropDownButton(props) {
    _classCallCheck(this, ZippyDropDownButton);

    var _this = _possibleConstructorReturn(this, (ZippyDropDownButton.__proto__ || Object.getPrototypeOf(ZippyDropDownButton)).call(this, props));

    _this.state = {
      expanded: props.defaultExpanded,
      focused: false
    };

    _this.handleClick = _this.handleClick.bind(_this);
    _this.handleFocus = _this.handleFocus.bind(_this);
    _this.handleBlur = _this.handleBlur.bind(_this);
    _this.handleKeyDown = _this.handleKeyDown.bind(_this);
    _this.handleClickOutside = _this.handleClickOutside.bind(_this);
    _this.handleWindowScroll = _this.handleWindowScroll.bind(_this);
    _this.onMenuDismiss = _this.onMenuDismiss.bind(_this);
    _this.rootRef = function (ref) {
      _this.rootNode = ref;
    };
    return _this;
  }

  _createClass(ZippyDropDownButton, [{
    key: 'shouldComponentUpdate',
    value: function shouldComponentUpdate(nextProps, nextState) {
      if (nextProps.shouldComponentUpdate) {
        return nextProps.shouldComponentUpdate(nextProps, nextState, this);
      }

      return true;
    }
  }, {
    key: 'onMenuDismiss',
    value: function onMenuDismiss() {
      this.props.onDismiss();
    }
  }, {
    key: 'handleKeyDown',
    value: function handleKeyDown(event) {
      var key = event.key;


      if (this.props.hideMenuOnEscape && this.getExpanded()) {
        this.collapse();
        event.preventDefault();
      }

      if (this.props.onKeyDown) {
        this.props.onKeyDown(event);
      }
    }
  }, {
    key: 'componentDidMount',
    value: function componentDidMount() {
      this.updateComponentReferenceRegion();
      if (this.props.dismissOnScroll) {
        window.addEventListener('scroll', this.handleWindowScroll, {
          capture: true
        });
        window.addEventListener('scroll', this.handleWindowScroll, {
          capture: false
        });
      }

      global.addEventListener('click', this.handleClickOutside);
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      global.removeEventListener('click', this.handleClickOutside);
      global.removeEventListener('scroll', this.handleWindowScroll, {
        capture: true
      });
      global.removeEventListener('scroll', this.handleWindowScroll, {
        capture: false
      });
    }
  }, {
    key: 'render',
    value: function render() {
      var props = this.props;


      var className = (0, _join2.default)(props.rootClassName, props.className, props.theme && props.rootClassName + '--theme-' + props.theme, this.state.focused && props.rootClassName + '--focused', props.disabled && props.rootClassName + '--disabled', this.getExpanded() && props.rootClassName + '--expanded', props.rtl ? props.rootClassName + '--rtl' : props.rootClassName + '--ltr');

      return _react2.default.createElement(
        'div',
        _extends({}, (0, _cleanProps2.default)(props, ZippyDropDownButton.propTypes), {
          ref: this.rootRef,
          className: className
        }),
        this.renderButton(),
        this.renderMenu()
      );
    }
  }, {
    key: 'renderButton',
    value: function renderButton() {
      var _extends2;

      var props = this.props;

      var className = props.rootClassName + '__button';
      var buttonProps = _extends({}, this.getCommonProps(), {
        key: 'button',
        iconPosition: this.props.iconPosition || this.props.arrowPosition,
        style: _extends({}, props.buttonProps)
      }, props.buttonProps, (_extends2 = {
        className: className,
        icon: props.icon,
        disabled: props.disabled,
        onClick: this.handleClick,
        rtl: props.rtl,
        onFocus: this.handleFocus,
        onBlur: this.handleBlur,
        onKeyDown: this.handleKeyDown
      }, _defineProperty(_extends2, 'icon', [props.icon && props.icon.type ? (0, _react.cloneElement)(props.icon, { key: 'zippy-ddbuttonicon' }) : props.icon, this.renderArrow()]), _defineProperty(_extends2, 'children', props.children), _defineProperty(_extends2, 'tagName', 'div'), _extends2));

      var result = void 0;
      if (typeof props.renderButton === 'function') {
        result = props.renderButton(buttonProps);
      }
      if (result === undefined) {
        result = _react2.default.createElement(_Button2.default, buttonProps);
      }

      return result;
    }
  }, {
    key: 'handleClick',
    value: function handleClick(event) {
      if (this.props.hideMenuOnClick) {
        this.toggle();
      } else {
        this.expand();
      }

      this.props.onClick(event);
    }
  }, {
    key: 'handleFocus',
    value: function handleFocus(event) {
      if (this.props.disabled) {
        return;
      }
      this.setState({
        focused: true
      });

      this.props.onFocus(event);
    }
  }, {
    key: 'handleBlur',
    value: function handleBlur(event) {
      if (this.props.disabled) {
        return;
      }
      this.setState({
        focused: false
      });

      this.props.onBlur(event);
    }
  }, {
    key: 'expand',
    value: function expand() {
      this.setExpanded(true);
    }
  }, {
    key: 'collapse',
    value: function collapse() {
      this.setExpanded(false);
    }
  }, {
    key: 'toggle',
    value: function toggle() {
      var expanded = this.getExpanded();
      this.setExpanded(!expanded);
    }
  }, {
    key: 'isExpandedControlled',
    value: function isExpandedControlled() {
      return this.props.expanded != undefined;
    }
  }, {
    key: 'setExpanded',
    value: function setExpanded(expanded) {
      if (expanded === this.getExpanded()) {
        return null;
      }
      if (!this.isExpandedControlled()) {
        this.setState({ expanded: expanded });
        this.updateComponentReferenceRegion();
      }

      if (!expanded) {
        this.props.onDismiss();
      }

      this.props.onExpandedChange(expanded);
    }
  }, {
    key: 'getExpanded',
    value: function getExpanded() {
      return this.isExpandedControlled() ? this.props.expanded : this.state.expanded;
    }
  }, {
    key: 'updateComponentReferenceRegion',
    value: function updateComponentReferenceRegion() {
      var node = this.props.getAlignNode ? this.props.getAlignNode() : this.rootNode;
      if (!node) {
        return null;
      }

      var referenceRegion = _regionAlign2.default.from(node);
      this.setState({
        referenceRegion: referenceRegion
      });
    }
  }, {
    key: 'renderMenu',
    value: function renderMenu() {
      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props;

      var expanded = this.getExpanded();
      if (!expanded && !this.props.renderMenuWhenCollapsed) {
        return;
      }

      if (!props.items || !props.items.length) {
        return null;
      }
      var style = _extends({}, props.menuProps.style);

      if (!expanded) {
        // style.visibility = 'hidden';
        style.display = 'none';
      }

      var menuProps = _extends({}, this.getCommonProps(), {
        key: 'menu',
        items: props.items,
        alignOffset: ALIGN_OFFSET,
        constrainTo: props.constrainTo
      }, props.menuProps, {
        alignTo: this.state.referenceRegion,
        alignPositions: props.alignPositions,
        onChildClick: props.onMenuClick,
        rtl: props.rtl,
        style: style,
        visible: expanded,
        theme: 'default',
        className: props.rootClassName + '__menu',
        onDismiss: this.onMenuDismiss
      });

      if (!expanded && !this.prevExpanded && this.props.optimizeMenuSCUWhenCollapsed) {
        menuProps.shouldComponentUpdate = returnFalse;
      }

      this.prevExpanded = expanded;

      var MenuComp = this.props.menu ? this.props.menu : _Menu2.default;

      if (!MenuComp) {
        return null;
      }

      var result = void 0;
      if (typeof props.renderMenu === 'function') {
        result = props.renderMenu(menuProps);
      }
      if (result === undefined) {
        result = _react2.default.createElement(MenuComp, menuProps);
      }

      return result;
    }
  }, {
    key: 'renderArrow',
    value: function renderArrow() {
      var props = this.props;


      var result = null;
      if (props.arrow !== true) {
        if (typeof props.arrow === 'function') {
          result = props.arrow(this.getExpanded());
        } else {
          result = props.arrow;
        }
      }

      if (result === null) {
        result = _react2.default.createElement(_ToggleIcon2.default, {
          key: 'icon',
          className: props.rootClassName + '__arrow',
          expanded: this.getExpanded()
        });
      }

      return result;
    }
  }, {
    key: 'getCommonProps',
    value: function getCommonProps() {
      var props = this.props;


      return {
        theme: props.theme
      };
    }
  }, {
    key: 'handleClickOutside',
    value: function handleClickOutside(event) {
      var node = this.rootNode;
      var target = event.target;
      if (!node || !target) {
        return null;
      }

      if (node !== target && !node.contains(target)) {
        if (this.props.hideMenuOnClickOutside) {
          this.collapse();
        }
      }
    }
  }, {
    key: 'handleWindowScroll',
    value: function handleWindowScroll(event) {
      if (this.getExpanded() && !(0, _containsNode2.default)(this.rootNode, event.target)) {
        this.setExpanded(false);
      }
    }
  }]);

  return ZippyDropDownButton;
}(_react.Component);

function emptyFn() {}

ZippyDropDownButton.defaultProps = {
  rootClassName: 'zippy-react-toolkit-dropdown-button',
  theme: 'default',
  menuProps: {},
  rtl: false,
  menu: null,
  alignPositions: ['tl-bl', 'tr-br', 'bl-tl', 'br-tr', 'tl-tr', 'bl-br', 'tr-tl', 'tr-br'],
  arrow: true,
  arrowPosition: 'end',
  constrainTo: true,
  disabled: false,
  hideMenuOnClick: true,
  hideMenuOnClickOutside: true,
  hideMenuOnEscape: true,
  onExpandedChange: emptyFn,
  onMenuClick: emptyFn,
  optimizeMenuSCUWhenCollapsed: false,
  onClick: emptyFn,
  onFocus: emptyFn,
  onBlur: emptyFn,
  onDismiss: emptyFn,
  defaultExpanded: false,
  dismissOnScroll: false,
  isZippyButton: true
};

ZippyDropDownButton.propTypes = {
  theme: _propTypes2.default.string,
  rtl: _propTypes2.default.bool,
  dismissOnScroll: _propTypes2.default.bool,
  icon: _propTypes2.default.node,
  iconPosition: _propTypes2.default.oneOf(['left', 'right', 'start', 'end']),
  rootClassName: _propTypes2.default.string,
  menuProps: _propTypes2.default.object,
  buttonProps: _propTypes2.default.object,
  disabled: _propTypes2.default.bool,
  menu: _propTypes2.default.func,
  arrow: _propTypes2.default.oneOfType([_propTypes2.default.node, _propTypes2.default.bool, _propTypes2.default.func]),
  alignPositions: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.arrayOf(_propTypes2.default.string)]),
  onDismiss: _propTypes2.default.func,
  arrowPosition: _propTypes2.default.oneOf(['left', 'right', 'start', 'end']),
  hideMenuOnClick: _propTypes2.default.bool,
  hideMenuOnEscape: _propTypes2.default.bool,
  hideMenuOnClickOutside: _propTypes2.default.bool,
  renderMenuWhenCollapsed: _propTypes2.default.bool,
  optimizeMenuSCUWhenCollapsed: _propTypes2.default.bool,
  onExpandedChange: _propTypes2.default.func,
  onMenuClick: _propTypes2.default.func,
  onClick: _propTypes2.default.func,
  getAlignNode: _propTypes2.default.func,
  constrainTo: _propTypes2.default.oneOfType([_propTypes2.default.object, _propTypes2.default.string, _propTypes2.default.bool, _propTypes2.default.func]),
  items: _propTypes2.default.array,
  expanded: _propTypes2.default.bool,
  defaultExpanded: _propTypes2.default.bool,
  pressed: _propTypes2.default.bool,
  renderMenu: _propTypes2.default.func,
  renderButton: _propTypes2.default.func,
  isZippyButton: _propTypes2.default.bool
};

exports.default = ZippyDropDownButton;
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _join = require('../../common/join');

var _join2 = _interopRequireDefault(_join);

var _cleanProps = require('../../common/cleanProps');

var _cleanProps2 = _interopRequireDefault(_cleanProps);

var _isMobile = require('../../common/isMobile');

var _isMobile2 = _interopRequireDefault(_isMobile);

var _clamp = require('../../common/clamp');

var _clamp2 = _interopRequireDefault(_clamp);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Copyright (c) 2015-present, Zippy Technologies
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * This source code is licensed under the MIT license found in the
file in the root directory of this source tree.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */

function ypos(e) {
  // touch event
  if (e.targetTouches && e.targetTouches.length >= 1) {
    return e.targetTouches[0].clientY;
  }

  // mouse event
  return e.clientY;
}

var ZippyInertialScroller = function (_Component) {
  _inherits(ZippyInertialScroller, _Component);

  function ZippyInertialScroller(props) {
    _classCallCheck(this, ZippyInertialScroller);

    var _this = _possibleConstructorReturn(this, (ZippyInertialScroller.__proto__ || Object.getPrototypeOf(ZippyInertialScroller)).call(this, props));

    _this.state = {};

    _this.setRootRef = function (ref) {
      _this.node = ref;
    };

    _this.setViewRef = function (ref) {
      _this.viewNode = ref;
    };

    _this.tap = _this.tap.bind(_this);
    _this.drag = _this.drag.bind(_this);
    _this.release = _this.release.bind(_this);
    _this.track = _this.track.bind(_this);
    _this.autoScroll = _this.autoScroll.bind(_this);

    _this.min = 0;
    _this.max = null;
    _this.pressed = null;
    _this.reference = null;
    _this.offset = 0;
    return _this;
  }

  _createClass(ZippyInertialScroller, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      this.updateMaxScroll();
    }
  }, {
    key: 'render',
    value: function render() {
      var props = this.props;

      var className = (0, _join2.default)(props.rootClassName, props.className, props.rootClassName + '--theme-' + props.theme);

      var events = void 0;
      if (_isMobile2.default && this.props.enableTouchDrag) {
        events = {
          onTouchStart: this.tap,
          onTouchEnd: this.release,
          onTouchMove: this.drag
        };
      }

      if (!_isMobile2.default && props.enableMouseDrag) {
        events = {
          onMouseDown: this.tap,
          onMouseUp: this.release,
          onMouseMove: this.drag
        };
      }

      return _react2.default.createElement(
        'div',
        _extends({}, (0, _cleanProps2.default)(props, ZippyInertialScroller.propTypes), {
          className: className,
          ref: this.setRootRef
        }, events),
        _react2.default.createElement(
          'div',
          { ref: this.setViewRef, className: props.rootClassName + '__view' },
          props.children
        )
      );
    }
  }, {
    key: 'tap',
    value: function tap(event) {
      this.pressed = true;
      this.reference = ypos(event);

      this.timeStamp = Date.now();
      this.frame = this.offset;
      this.velocity = 0;
      this.amplitude = 0;

      clearInterval(this.ticker);
      this.ticker = setInterval(this.track, 16);

      event.stopPropagation();
      event.preventDefault();
    }
  }, {
    key: 'drag',
    value: function drag(event) {
      if (this.pressed) {
        var y = ypos(event);
        var delta = this.reference - y;
        if (delta > this.props.threshold || delta < -this.props.threshold) {
          this.reference = y;
          this.scrollTo(this.offset + delta);
        }
      }
    }
  }, {
    key: 'release',
    value: function release(event) {
      this.pressed = false;
      this.updateMaxScroll();
      event.stopPropagation();
      event.preventDefault();

      clearInterval(this.ticker);
      if (this.velocity > 10 || this.velocity < -10) {
        this.amplitude = this.props.initialAmplitude * this.velocity;
        this.target = Math.round(this.offset + this.amplitude);
        this.timestamp = Date.now();
        requestAnimationFrame(this.autoScroll);
      }
    }
  }, {
    key: 'scrollTo',
    value: function scrollTo(offset) {
      if (!this.viewNode) {
        return null;
      }

      this.offset = (0, _clamp2.default)(offset, 0, this.max);
      this.viewNode.style.transform = 'translateY(' + -this.offset + 'px)';
    }
  }, {
    key: 'autoScroll',
    value: function autoScroll() {
      var elapsed = void 0,
          delta = void 0;
      var timeConstant = this.props.timeConstant; // ms
      if (this.amplitude) {
        elapsed = Date.now() - this.timestamp;
        delta = -this.amplitude * Math.exp(-elapsed / timeConstant);
        if (delta > 0.1 || delta < -0.1) {
          this.scrollTo(this.target + delta);
          requestAnimationFrame(this.autoScroll);
        } else {
          this.scrollTo(this.target);
        }
      }
    }
  }, {
    key: 'updateMaxScroll',
    value: function updateMaxScroll() {
      this.max = this.viewNode && this.viewNode.offsetHeight - this.node.offsetHeight;
    }
  }, {
    key: 'track',
    value: function track() {
      var now = void 0,
          elapsed = void 0,
          delta = void 0,
          v = void 0;

      now = Date.now();
      elapsed = now - this.timeStamp;
      this.timeStamp = now;
      delta = this.offset - this.frame;
      this.frame = this.offset;

      v = 1000 * delta / (1 + elapsed);
      this.velocity = 0.8 * v + 0.2 * this.velocity;
    }
  }]);

  return ZippyInertialScroller;
}(_react.Component);

function emptyFn() {}

ZippyInertialScroller.defaultProps = {
  theme: 'default',
  rootClassName: 'react-toolkit-inertial-scroller',
  threshold: 5,
  timeConstant: 360,
  initialAmplitude: 0.5,
  enableMouseDrag: true,
  enableTouchDrag: true
};

ZippyInertialScroller.propTypes = {
  theme: _propTypes2.default.string,
  rootClassName: _propTypes2.default.string,
  threshold: _propTypes2.default.number,
  timeConstant: _propTypes2.default.number,
  initialAmplitude: _propTypes2.default.number,
  enableMouseDrag: _propTypes2.default.bool,
  enableTouchDrag: _propTypes2.default.bool
};

exports.default = ZippyInertialScroller;
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /**
opyright (c) 2015-present, Zippy Technologies

his source code is licensed under the MIT license found in the
file in the root directory of this source tree.


var _isMobile = require('../../common/isMobile');

var _isMobile2 = _interopRequireDefault(_isMobile);

var _clamp = require('../../common/clamp');

var _clamp2 = _interopRequireDefault(_clamp);

var _containsNode = require('../../common/containsNode');

var _containsNode2 = _interopRequireDefault(_containsNode);

var _matchesSelector = require('../../common/matchesSelector');

var _matchesSelector2 = _interopRequireDefault(_matchesSelector);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function ypos(e) {
  // touch event
  if (e.targetTouches && e.targetTouches.length >= 1) {
    return e.targetTouches[0].clientY;
  }

  // mouse event
  return e.clientY;
}

var InertialManager = function () {
  function InertialManager(_ref) {
    var node = _ref.node,
        viewNode = _ref.viewNode,
        arrowSelector = _ref.arrowSelector,
        _ref$threshold = _ref.threshold,
        threshold = _ref$threshold === undefined ? 5 : _ref$threshold,
        _ref$timeConstant = _ref.timeConstant,
        timeConstant = _ref$timeConstant === undefined ? 360 : _ref$timeConstant,
        _ref$initialAmplitude = _ref.initialAmplitude,
        initialAmplitude = _ref$initialAmplitude === undefined ? 0.8 : _ref$initialAmplitude,
        _ref$enableMouseDrag = _ref.enableMouseDrag,
        enableMouseDrag = _ref$enableMouseDrag === undefined ? true : _ref$enableMouseDrag,
        _ref$enableTouchDrag = _ref.enableTouchDrag,
        enableTouchDrag = _ref$enableTouchDrag === undefined ? true : _ref$enableTouchDrag,
        _ref$setScrollPositio = _ref.setScrollPosition,
        setScrollPosition = _ref$setScrollPositio === undefined ? function () {} : _ref$setScrollPositio;

    _classCallCheck(this, InertialManager);

    this.node = node;
    this.viewNode = viewNode;
    if (!arrowSelector) {
      throw 'Please provide an arrowselector';
    }
    this.arrowSelector = arrowSelector;

    this.tap = this.tap.bind(this);
    this.drag = this.drag.bind(this);
    this.release = this.release.bind(this);
    this.track = this.track.bind(this);
    this.autoScroll = this.autoScroll.bind(this);

    this.min = 0;
    this.max = null;
    this.pressed = null;
    this.reference = null;
    this.offset = 0;

    this.threshold = threshold;
    this.timeConstant = timeConstant;
    this.enableTouchDrag = enableTouchDrag;
    this.enableMouseDrag = enableMouseDrag;
    this.setScrollPosition = setScrollPosition;
    this.initialAmplitude = initialAmplitude;

    this.updateMaxScroll();
    this.addEventListeners();
  }

  _createClass(InertialManager, [{
    key: 'addEventListeners',
    value: function addEventListeners() {
      if (!this.node || !this.node.addEventListener) {
        return;
      }
      if (_isMobile2.default && this.enableTouchDrag) {
        this.node.addEventListener('touchstart', this.tap, { passive: false });
        this.node.addEventListener('touchend', this.release, { passive: false });
        this.node.addEventListener('touchmove', this.drag, { passive: false });
      }
      if (!_isMobile2.default && this.enableMouseDrag) {
        this.node.addEventListener('mousedown', this.tap, { passive: false });
        this.node.addEventListener('mouseup', this.release, { passive: false });
        this.node.addEventListener('mousemove', this.drag, { passive: false });
      }
    }
  }, {
    key: 'removeEventListeners',
    value: function removeEventListeners() {
      if (this.node && this.node.removeEventListener) {
        this.node.removeEventListener('touchstart', this.tap, { passive: false });
        this.node.removeEventListener('touchend', this.release, {
          passive: false
        });
        this.node.removeEventListener('touchmove', this.drag, { passive: false });
        this.node.removeEventListener('mousedown', this.tap, { passive: false });
        this.node.removeEventListener('mouseup', this.release, {
          passive: false
        });
        this.node.removeEventListener('mousemove', this.drag, { passive: false });
      }
    }
  }, {
    key: 'getEventListneres',
    value: function getEventListneres() {
      var events = void 0;
      if (_isMobile2.default && this.enableTouchDrag) {
        events = {
          onTouchStart: this.tap,
          onTouchEnd: this.release,
          onTouchMove: this.drag
        };
      }

      if (!_isMobile2.default && this.enableMouseDrag) {
        events = {
          onMouseDown: this.tap,
          onMouseUp: this.release,
          onMouseMove: this.drag
        };
      }

      return events;
    }
  }, {
    key: 'isArrowTarget',
    value: function isArrowTarget(target) {
      if ((0, _matchesSelector2.default)(target, this.arrowSelector)) {
        return true;
      }

      var arrows = this.arrowSelector ? this.arrows || [].concat(_toConsumableArray(this.node.querySelectorAll(this.arrowSelector))) : [];

      if (arrows.length) {
        this.arrows = arrows;
      }

      if (arrows.length && arrows.map(function (arrow) {
        return (0, _containsNode2.default)(arrow, target);
      }).filter(function (x) {
        return x;
      })[0]) {
        return true;
      }

      return false;
    }
  }, {
    key: 'tap',
    value: function tap(event) {
      if (!this.hasScroll()) {
        return;
      }

      if (this.isArrowTarget(event.target)) {
        event.preventDefault();
      }

      this.pressed = true;
      this.reference = ypos(event);

      this.timeStamp = Date.now();
      this.frame = this.offset;
      this.velocity = 0;
      this.amplitude = 0;

      clearInterval(this.ticker);
      this.ticker = setInterval(this.track, 16);
    }
  }, {
    key: 'drag',
    value: function drag(event) {
      if (this.pressed) {
        if (!this.hasScroll()) {
          return;
        }

        event.preventDefault();
        var y = ypos(event);
        var delta = this.reference - y;
        if (delta > this.threshold || delta < -this.threshold) {
          this.reference = y;
          this.scrollTo(this.offset + delta);
        }
      }
    }
  }, {
    key: 'release',
    value: function release(event) {
      if (!this.hasScroll() || !this.pressed) {
        return;
      }

      this.pressed = false;
      this.updateMaxScroll();
      if (this.isArrowTarget(event.target)) {
        event.preventDefault();
      }

      clearInterval(this.ticker);
      if (this.velocity > 10 || this.velocity < -10) {
        this.amplitude = this.initialAmplitude * this.velocity;
        this.target = Math.round(this.offset + this.amplitude);
        this.timestamp = Date.now();
        requestAnimationFrame(this.autoScroll);
      }
    }
  }, {
    key: 'scrollTo',
    value: function scrollTo(offset) {
      if (!this.viewNode) {
        return null;
      }

      this.offset = (0, _clamp2.default)(offset, 0, this.max);
      this.setScrollPosition(this.offset);
    }
  }, {
    key: 'autoScroll',
    value: function autoScroll() {
      var elapsed = void 0,
          delta = void 0;
      var timeConstant = this.timeConstant; // ms

      if (this.amplitude) {
        elapsed = Date.now() - this.timestamp;
        delta = -this.amplitude * Math.exp(-elapsed / timeConstant);
        if (delta > 0.1 || delta < -0.1) {
          this.scrollTo(this.target + delta);
          requestAnimationFrame(this.autoScroll);
        } else {
          this.scrollTo(this.target);
        }
      }
    }
  }, {
    key: 'updateMaxScroll',
    value: function updateMaxScroll() {
      this.max = this.viewNode && this.viewNode.offsetHeight - this.node.offsetHeight;
    }
  }, {
    key: 'hasScroll',
    value: function hasScroll() {
      if ((this.viewNode && this.viewNode.offsetHeight) !== undefined && (this.node && this.node.offsetHeight) !== undefined) {
        return this.viewNode.offsetHeight > this.node.offsetHeight;
      } else {
        return false;
      }
    }
  }, {
    key: 'track',
    value: function track() {
      var now = void 0,
          elapsed = void 0,
          delta = void 0,
          v = void 0;

      now = Date.now();
      elapsed = now - this.timeStamp;
      this.timeStamp = now;
      delta = this.offset - this.frame;
      this.frame = this.offset;

      v = 1000 * delta / (1 + elapsed);
      this.velocity = 0.8 * v + 0.2 * this.velocity;
    }
  }]);

  return InertialManager;
}();

exports.default = InertialManager;
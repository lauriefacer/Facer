'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _getLabelWrapperSize = require('./getLabelWrapperSize');

var _getLabelWrapperSize2 = _interopRequireDefault(_getLabelWrapperSize);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; } /**
                                                                                                                                                                                                                   * Copyright (c) 2015-present, Zippy Technologies
                                                                                                                                                                                                                   *
                                                                                                                                                                                                                   * This source code is licensed under the MIT license found in the
                                                                                                                                                                                                                   * LICENSE file in the root directory of this source tree.
                                                                                                                                                                                                                   */

/** label wrapper must have the full width of
 * the progressbar in some cases (see getWrappersStyles)
 * so oposite label is placed in the right position
 **/

function getWrappersStyles(_ref) {
  var labelPosition = _ref.labelPosition,
      dimension = _ref.dimension,
      fillSize = _ref.fillSize,
      remainingSize = _ref.remainingSize,
      parentSize = _ref.parentSize;

  /**
   * one of the label wrapper will have
   * a size in % equal to the entire with of the component
   * so we can have different label color for each part
   */
  var fillLabelWrapperStyle = void 0;
  var remainingLabelWrapperStyle = void 0;

  /**
   * on fill/remianing relativ positions
   * labelWrapper needs to have the same dimension
   * as portion that has label.
   * e.g. fillCenter, must have labelWrapper 100%
   */
  if (labelPosition === 'fillCenter' || labelPosition === 'fillEnd') {
    fillLabelWrapperStyle = _defineProperty({}, dimension, '100%');
    remainingLabelWrapperStyle = _defineProperty({}, dimension, parentSize);
  } else if (labelPosition === 'remainingCenter' || labelPosition === 'remainingStart') {
    fillLabelWrapperStyle = _defineProperty({}, dimension, parentSize);
    remainingLabelWrapperStyle = _defineProperty({}, dimension, '100%');
  } else {
    fillLabelWrapperStyle = _defineProperty({}, dimension, parentSize);
    remainingLabelWrapperStyle = _defineProperty({}, dimension, parentSize);
  }

  return {
    fillLabelWrapperStyle: fillLabelWrapperStyle,
    remainingLabelWrapperStyle: remainingLabelWrapperStyle
  };
}

exports.default = getWrappersStyles;
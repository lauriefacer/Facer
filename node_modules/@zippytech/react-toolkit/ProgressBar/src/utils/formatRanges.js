'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _isNumeric = require('./isNumeric');

var _isNumeric2 = _interopRequireDefault(_isNumeric);

var _range = require('../../../common/range');

var _range2 = _interopRequireDefault(_range);

var _normalizeValue = require('./normalizeValue');

var _normalizeValue2 = _interopRequireDefault(_normalizeValue);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * @return a structure easy to work with.
 * [{from, to}, {from, to}]
 * from and to are normalized value from 0 - 100
 *
 * !reverse
 * in case of:
 * - vertical reverse, nothing happens
 * - vertical simple, from and two are reversed
 *
 * - horizontal reverse - from and two are reversed
 */
function formatRange(step, min, max, direction) {
  var valueRange = max - min;
  var formatedSteps = void 0;

  // simple value
  if ((0, _isNumeric2.default)(step)) {
    formatedSteps = formatSingleNumericValue(step, valueRange);
  }

  if (Array.isArray(step)) {
    formatedSteps = formatMultipleNumericValue(step, valueRange);
  }

  // normalize values to 0 - 100
  formatedSteps = normalizeValues(formatedSteps, min, max);

  // ajust to be used as position (horizontal, right)
  formatedSteps = formatRangeRelativeToPosition(formatedSteps);

  // direction, if is is -1 then it is reversed from and to
  // reversal of rendering is dome inside component
  if (direction === -1) {
    formatedSteps = formatedSteps.map(function (_ref) {
      var from = _ref.from,
          to = _ref.to;
      return {
        to: from,
        from: to
      };
    });
  }

  return formatedSteps;
}

/**
 * Takes into acount that when rendering
 * you position elements with left and right.
 * takes a one dimensional position scheme and
 * fixes to, to be relative to 'right' if right is end.
 */
/**
 * Copyright (c) 2015-present, Zippy Technologies
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

function formatRangeRelativeToPosition(formatedSteps) {
  return formatedSteps.map(function (_ref2) {
    var from = _ref2.from,
        to = _ref2.to;
    return {
      from: from,
      to: 100 - to
    };
  });
}

function normalizeValues(formatedSteps, min, max) {
  return formatedSteps.map(function (_ref3) {
    var from = _ref3.from,
        to = _ref3.to;

    return {
      from: (0, _normalizeValue2.default)({ value: from, min: min, max: max }),
      to: (0, _normalizeValue2.default)({ value: to, min: min, max: max })
    };
  });
}

function formatSingleNumericValue(step, valueRange) {
  // TODO change range deps when imported inside react-toolkit
  return formateValuesRange((0, _range2.default)(step, valueRange + step, step), valueRange);
}

function formatMultipleNumericValue(range, valueRange) {
  return formateValuesRange(range.concat(valueRange), valueRange);
}

function formateValuesRange(range, valueRange) {
  return range.reduce(function (acc, stepPosition, index, list) {
    var stepConfig = {};

    // first from is 0
    if (index === 0) {
      stepConfig.from = 0;
    } else {
      // the rest are previous to
      stepConfig.from = acc[acc.length - 1].to;
    }

    stepConfig.to = stepPosition;

    acc.push(stepConfig);

    return acc;
  }, []);
}

exports.default = formatRange;
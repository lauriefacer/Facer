'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _normalizeValue = require('./normalizeValue');

var _normalizeValue2 = _interopRequireDefault(_normalizeValue);

var _getRotateStyle = require('./getRotateStyle');

var _getRotateStyle2 = _interopRequireDefault(_getRotateStyle);

var _join = require('../../../common/join');

var _join2 = _interopRequireDefault(_join);

var _assign = require('../../../common/assign');

var _assign2 = _interopRequireDefault(_assign);

var _formatRanges = require('./formatRanges');

var _formatRanges2 = _interopRequireDefault(_formatRanges);

var _constrainValueToStep = require('./constrainValueToStep');

var _constrainValueToStep2 = _interopRequireDefault(_constrainValueToStep);

var _getStepTickDirection = require('./getStepTickDirection');

var _getStepTickDirection2 = _interopRequireDefault(_getStepTickDirection);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var ORIENTATION_DIRECTION_MAP = {
  horizontal: {
    start: 'left',
    end: 'right'
  },
  vertical: {
    start: 'top',
    end: 'bottom'
  }
};

/**
 * creates an object with props, that can come from
 * this.props, this.state, or computed
 * it is helpful to have a single point of access
 */
/**
 * Copyright (c) 2015-present, Zippy Technologies
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

function prepareProps(props, state, rootBem) {
  var orientation = props.orientation,
      value = props.value,
      min = props.min,
      max = props.max,
      labelPosition = props.labelPosition,
      showSteps = props.showSteps,
      rtl = props.rtl,
      transition = props.transition,
      rootClassName = props.rootClassName;
  var labelOverflow = state.labelOverflow;


  var direction = void 0;

  if (rtl) {
    direction = -1;
  } else {
    direction = props.direction;
  }

  var normalizedValue = (0, _normalizeValue2.default)({ value: value, min: min, max: max });

  var stepTickDirection = (0, _getStepTickDirection2.default)(direction, orientation);

  // steps
  var step = typeof props.step === 'function' ? props.step(props, state) : props.step;
  // an array of procent values where each step begins and ends
  var formatedStep = step && (0, _formatRanges2.default)(step, min, max, stepTickDirection);

  // incrementInSteps defaults to showSteps
  var incrementInSteps = props.incrementInSteps !== undefined ? props.incrementInSteps : showSteps;

  var tick = void 0;
  var formatedTick = void 0;
  if (props.tick != undefined) {
    tick = typeof props.tick === 'function' ? props.tick(props, state) : props.tick;
    formatedTick = tick && (0, _formatRanges2.default)(tick, min, max, stepTickDirection);
  } else {
    tick = step;
    formatedTick = formatedStep;
  }

  /**
   * constrain value to steps
   */
  if (incrementInSteps && step) {
    normalizedValue = (0, _constrainValueToStep2.default)(normalizedValue, formatedStep, stepTickDirection);
  }

  // we consider indeterminate when
  // identerminate is true
  // or when the value is null or undefined
  var indeterminate = props.indeterminate !== undefined ? props.indeterminate : value == undefined; // also null

  var vertical = orientation === 'vertical';
  var horizontal = orientation === 'horizontal';

  // dimension
  var dimension = horizontal ? 'width' : 'height';

  var fillSize = normalizedValue;
  var remainingSize = 100 - fillSize;

  var reverse = direction === -1;

  var className = (0, _join2.default)(props.className, rootClassName, vertical && rootClassName + '--vertical', transition && rootClassName + '--transition', horizontal && rootClassName + '--horizontal', indeterminate && rootClassName + '--indeterminate', reverse && rootClassName + '--reverse', labelOverflow && rootClassName + '--labelOverflow',
  // label position
  rootClassName + '--labelPosition-' + labelPosition,
  // direction
  reverse && rootClassName + '--direction-reverse');

  var labelRotateStyle = (0, _getRotateStyle2.default)(props.rotateLabel);

  var directionMap = ORIENTATION_DIRECTION_MAP[orientation];

  return (0, _assign2.default)({}, props, {
    vertical: vertical,
    horizontal: horizontal,
    className: className,
    fillSize: fillSize,
    remainingSize: remainingSize,
    dimension: dimension,
    normalizedValue: normalizedValue,
    originalValue: value,
    labelRotateStyle: labelRotateStyle,
    step: step,
    tick: tick,
    formatedStep: formatedStep,
    incrementInSteps: incrementInSteps,
    formatedTick: formatedTick,
    directionMap: directionMap,
    stepTickDirection: stepTickDirection,
    direction: direction
  });
}

exports.default = prepareProps;
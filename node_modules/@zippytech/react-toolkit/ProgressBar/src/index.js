'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _reactClass = require('@zippytech/react-class');

var _reactClass2 = _interopRequireDefault(_reactClass);

var _NotifyResize = require('../../NotifyResize');

var _Steps = require('./Steps');

var _Steps2 = _interopRequireDefault(_Steps);

var _Ticks = require('./Ticks');

var _Ticks2 = _interopRequireDefault(_Ticks);

var _cleanProps = require('../../common/cleanProps');

var _cleanProps2 = _interopRequireDefault(_cleanProps);

var _assign3 = require('../../common/assign');

var _assign4 = _interopRequireDefault(_assign3);

var _join = require('../../common/join');

var _join2 = _interopRequireDefault(_join);

var _getWrappersStyles2 = require('./utils/getWrappersStyles');

var _getWrappersStyles3 = _interopRequireDefault(_getWrappersStyles2);

var _capitalizeFirstLetter = require('./utils/capitalizeFirstLetter');

var _capitalizeFirstLetter2 = _interopRequireDefault(_capitalizeFirstLetter);

var _getLabelBasedOnValue = require('./utils/getLabelBasedOnValue');

var _getLabelBasedOnValue2 = _interopRequireDefault(_getLabelBasedOnValue);

var _shouldComponentUpdate2 = require('../../common/shouldComponentUpdate');

var _shouldComponentUpdate3 = _interopRequireDefault(_shouldComponentUpdate2);

var _Indeterminate = require('./Indeterminate');

var _Indeterminate2 = _interopRequireDefault(_Indeterminate);

var _isNumeric = require('./utils/isNumeric');

var _isNumeric2 = _interopRequireDefault(_isNumeric);

var _prepareProps = require('./utils/prepareProps');

var _prepareProps2 = _interopRequireDefault(_prepareProps);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Copyright (c) 2015-present, Zippy Technologies
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * This source code is licensed under the MIT license found in the
file in the root directory of this source tree.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */

var raf = global.requestAnimationFrame;

var FILL_LABEL_POSITIONS_THAT_OVERFLOW_WRONG = ['fillEnd', 'fillCenter'];

var REMAINING_LABEL_POSITIONS_THAT_OVERFLOW_WRONG = ['remainingCenter', 'remainingStart'];

var LABEL_POSITIONS_THAT_OVERFLOW_WRONG = [].concat(FILL_LABEL_POSITIONS_THAT_OVERFLOW_WRONG, REMAINING_LABEL_POSITIONS_THAT_OVERFLOW_WRONG);

var ZippyProgressBar = function (_Component) {
  _inherits(ZippyProgressBar, _Component);

  function ZippyProgressBar(props) {
    _classCallCheck(this, ZippyProgressBar);

    var _this = _possibleConstructorReturn(this, (ZippyProgressBar.__proto__ || Object.getPrototypeOf(ZippyProgressBar)).call(this, props));

    _this.state = {};
    return _this;
  }

  _createClass(ZippyProgressBar, [{
    key: 'shouldComponentUpdate',
    value: function shouldComponentUpdate(nextProps, nextState) {
      return (0, _shouldComponentUpdate3.default)(this, nextProps, nextState);
    }
  }, {
    key: 'componentDidMount',
    value: function componentDidMount() {
      this.checkLabelOverflow();
      this.updateProgressBarSize();
    }
  }, {
    key: 'componentDidUpdate',
    value: function componentDidUpdate(previousProps) {
      /**
       * need to read the updated dom
       */
      if (this.props.value !== previousProps.value) {
        this.checkLabelOverflow();
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _this2 = this;

      var preparedProps = this.p = (0, _prepareProps2.default)(this.props, this.state);

      var indeterminate = preparedProps.indeterminate,
          className = preparedProps.className,
          rootClassName = preparedProps.rootClassName,
          indeterminateBarStyle = preparedProps.indeterminateBarStyle;


      return _react2.default.createElement(
        'div',
        _extends({}, (0, _cleanProps2.default)(this.props, ZippyProgressBar.propTypes), {
          className: className,
          ref: function ref(el) {
            return _this2.node = el;
          }
        }),
        this.renderTicks(),
        this.renderSteps(),
        indeterminate ? _react2.default.createElement(_Indeterminate2.default, {
          barStyle: indeterminateBarStyle,
          className: rootClassName + '__indeterminate'
        }) : this.renderProgress(),
        _react2.default.createElement(_NotifyResize.NotifyResize, { rafOnResize: true, onResize: this.onResize })
      );
    }
  }, {
    key: 'renderTicks',
    value: function renderTicks() {
      var _p = this.p,
          tick = _p.tick,
          formatedTick = _p.formatedTick,
          showSteps = _p.showSteps,
          renderTick = _p.renderTick,
          showTicks = _p.showTicks,
          directionMap = _p.directionMap,
          stepTickDirection = _p.stepTickDirection,
          tickStyle = _p.tickStyle,
          ticksStyle = _p.ticksStyle,
          rootClassName = _p.rootClassName,
          value = _p.value;

      /**
       * show ticks:
       * - showTicks is defined use it's value
       * - is not defined, than default to showSteps
       */

      if (showTicks === false || !formatedTick) {
        return null;
      } else if (!showSteps) {
        return;
      }

      var className = rootClassName + '__ticks';
      var tickClassName = rootClassName + '__tick';

      return _react2.default.createElement(_Ticks2.default, {
        ticksStyle: ticksStyle,
        tickStyle: tickStyle,
        renderTick: renderTick,
        className: className,
        tickClassName: tickClassName,
        formatedTick: formatedTick,
        directionMap: directionMap,
        stepTickDirection: stepTickDirection,
        value: value
      });
    }
  }, {
    key: 'renderSteps',
    value: function renderSteps() {
      var _p2 = this.p,
          formatedStep = _p2.formatedStep,
          showSteps = _p2.showSteps,
          renderStep = _p2.renderStep,
          directionMap = _p2.directionMap,
          stepTickDirection = _p2.stepTickDirection,
          rootClassName = _p2.rootClassName,
          stepsStyle = _p2.stepsStyle,
          stepStyle = _p2.stepStyle,
          value = _p2.value;


      if (!showSteps || !formatedStep) {
        return;
      }

      var className = rootClassName + '__steps';
      var stepClassName = rootClassName + '__step';

      return _react2.default.createElement(_Steps2.default, {
        className: className,
        stepClassName: stepClassName,
        formatedStep: formatedStep,
        renderStep: renderStep,
        style: stepsStyle,
        stepStyle: stepStyle,
        directionMap: directionMap,
        stepTickDirection: stepTickDirection,
        value: value
      });
    }

    // both fill and remaining bars are rendererd in the same place
    // because both of them are very similar

  }, {
    key: 'renderProgress',
    value: function renderProgress() {
      var _this3 = this;

      var _p3 = this.p,
          horizontal = _p3.horizontal,
          value = _p3.value,
          direction = _p3.direction,
          rootClassName = _p3.rootClassName,
          labelPosition = _p3.labelPosition,
          fillSize = _p3.fillSize,
          remainingSize = _p3.remainingSize,
          dimension = _p3.dimension,
          remainingColor = _p3.remainingColor,
          fillColor = _p3.fillColor,
          transition = _p3.transition,
          transitionDuration = _p3.transitionDuration,
          springConfig = _p3.springConfig;

      var _getWrappersStyles = (0, _getWrappersStyles3.default)({
        labelPosition: labelPosition,
        dimension: dimension,
        fillSize: fillSize,
        remainingSize: remainingSize,
        parentSize: this.state.parentSize
      }),
          fillLabelWrapperStyle = _getWrappersStyles.fillLabelWrapperStyle,
          remainingLabelWrapperStyle = _getWrappersStyles.remainingLabelWrapperStyle;

      var partsRenderFunction = function partsRenderFunction(_ref) {
        var _assign;

        var size = _ref.size;

        /**
         * Check on each transition step to ajust label position if
         * it overflows. This is the main reason react-motion
         * is used so this check can be made during the transition
         */
        if (raf) {
          raf(_this3.checkLabelOverflow);
        }

        var liveFillSize = size;
        var liveRemainingSize = 100 - liveFillSize;

        var passedFillStyle = typeof _this3.p.fillStyle === 'function' ? _this3.p.fillStyle(_this3.p) : _this3.p.fillStyle;

        var fillStyle = (0, _assign4.default)((_assign = {
          backgroundColor: typeof fillColor === 'function' ? fillColor(_this3.p) : fillColor
        }, _defineProperty(_assign, dimension, liveFillSize + '%'), _defineProperty(_assign, 'transitionDuration', transition && transitionDuration), _assign), passedFillStyle);

        var passedRemainingStyle = typeof _this3.p.remainingStyle === 'function' ? _this3.p.remainingStyle(_this3.p) : _this3.p.remainingStyle;

        var remainingStyle = (0, _assign4.default)(_defineProperty({
          transitionDuration: transition && transitionDuration,
          backgroundColor: typeof remainingColor === 'function' ? remainingColor(_this3.p) : remainingColor
        }, dimension, liveRemainingSize + '%'), passedRemainingStyle);

        var fill = _react2.default.createElement(
          'div',
          {
            key: 'fill',
            ref: function ref(el) {
              return _this3.fill = el;
            },
            className: rootClassName + '__fill',
            style: fillStyle
          },
          _react2.default.createElement(
            'div',
            {
              style: fillLabelWrapperStyle,
              className: rootClassName + '__fill-label-wrapper'
            },
            _this3.renderLabel('fill', liveFillSize, fillSize)
          )
        );

        var remaining = _react2.default.createElement(
          'div',
          {
            key: 'remaining',
            ref: function ref(el) {
              return _this3.remaining = el;
            },
            className: rootClassName + '__remaining',
            style: remainingStyle
          },
          _react2.default.createElement(
            'div',
            {
              style: remainingLabelWrapperStyle,
              className: rootClassName + '__remaining-label-wrapper'
            },
            _this3.renderLabel('remaining', liveRemainingSize, remainingSize)
          )
        );

        var parts = void 0;
        // direction -1 reverse parts
        if (direction === -1) {
          parts = [remaining, fill];
        } else {
          parts = [fill, remaining];
        }

        return _react2.default.createElement(
          'div',
          { className: rootClassName + '__barsWrapper' },
          parts
        );
      };

      return partsRenderFunction({ size: fillSize });
    }
  }, {
    key: 'renderLabel',
    value: function renderLabel(type, size, finalSize) {
      var _this4 = this;

      var _p4 = this.p,
          labelClassName = _p4.labelClassName,
          labelStyle = _p4.labelStyle,
          labelRotateValue = _p4.labelRotateValue,
          labelRotateStyle = _p4.labelRotateStyle,
          rootClassName = _p4.rootClassName,
          labelFillColor = _p4.labelFillColor,
          labelRemainingColor = _p4.labelRemainingColor,
          remainingColor = _p4.remainingColor,
          fillColor = _p4.fillColor,
          value = _p4.value,
          max = _p4.max;


      var result = void 0;

      var label = void 0;
      if (this.p.label === false || this.p.label === null) {
        return null;
      }

      var className = (0, _join2.default)(rootClassName + '__label', labelClassName);
      var style = (0, _assign4.default)({}, labelRotateValue, labelRotateStyle);

      // add label colors
      if (type === 'fill' && (labelFillColor || remainingColor)) {
        if (!labelFillColor) {
          style.color = typeof remainingColor === 'function' ? remainingColor(this.p) : remainingColor;
        } else {
          style.color = labelFillColor;
        }
      }

      if (type === 'remaining' && (labelRemainingColor || fillColor)) {
        if (!labelRemainingColor) {
          style.color = typeof fillColor === 'function' ? fillColor(this.p) : fillColor;
        } else {
          style.color = labelRemainingColor;
        }
      }

      // labelStyle should overwrite color
      if (labelStyle) {
        (0, _assign4.default)(style, labelStyle);
      }

      var labelBasedOnValue = (0, _getLabelBasedOnValue2.default)({ size: size, finalSize: finalSize, value: value });
      if (this.p.label != undefined) {
        label = this.p.label;
      } else {
        label = labelBasedOnValue;
      }

      // labelProps can be modified by render label render function
      var domProps = {
        className: className,
        style: style,
        ref: function ref(el) {
          return _this4['label' + (0, _capitalizeFirstLetter2.default)(type)] = el;
        },
        children: labelBasedOnValue
      };

      if (this.p.label) {
        if (typeof this.p.label === 'function') {
          result = this.p.label({ domProps: domProps, value: value });
        } else {
          result = this.p.label;
        }
      }

      if (result === undefined) {
        result = _react2.default.createElement('div', domProps);
      }

      return result;
    }
  }, {
    key: 'getOffsetDimensionText',
    value: function getOffsetDimensionText() {
      return 'offset' + (0, _capitalizeFirstLetter2.default)(this.p.dimension);
    }

    /**
     * Called whenever parts change size
     * - *value* changes
     * - parent changes size
     *
     * if label is smaller than it's container add a class on parent
     * .labelOverflow
     */

  }, {
    key: 'checkLabelOverflow',
    value: function checkLabelOverflow() {
      if (LABEL_POSITIONS_THAT_OVERFLOW_WRONG.indexOf(this.props.labelPosition) === -1) {
        return;
      }

      var isFillPosition = FILL_LABEL_POSITIONS_THAT_OVERFLOW_WRONG.indexOf(this.props.labelPosition) !== -1;
      var isRemainingPosition = REMAINING_LABEL_POSITIONS_THAT_OVERFLOW_WRONG.indexOf(this.props.labelPosition) !== -1;

      var fill = this.fill,
          remaining = this.remaining,
          labelFill = this.labelFill,
          labelRemaining = this.labelRemaining;


      if (!(fill && remaining && labelFill && labelRemaining)) {
        return;
      }

      var dimension = this.getOffsetDimensionText();

      if (isFillPosition) {
        var fillSize = fill[dimension];
        var labelFillSize = labelFill[dimension];
        var fillOverflowsWrong = fillSize < labelFillSize;

        if (fillOverflowsWrong) {
          this.setState({
            labelOverflow: true
          });
          return;
        }
      }

      if (isRemainingPosition) {
        var remainingSize = remaining[dimension];
        var labelRemainingSize = labelRemaining[dimension];
        var remainingOverflowsWrong = remainingSize < labelRemainingSize;

        if (remainingOverflowsWrong) {
          this.setState({
            labelOverflow: true
          });
          return;
        }
      }

      if (this.state.labelOverflow !== false) {
        this.setState({
          labelOverflow: false
        });
      }
    }
  }, {
    key: 'updateProgressBarSize',
    value: function updateProgressBarSize() {
      var node = this.node;
      var childElement = node.firstElementChild;
      var parentSize = childElement[this.getOffsetDimensionText()];

      if (this.state.parentSize !== parentSize) {
        this.setState({
          parentSize: parentSize
        });
      }
    }
  }, {
    key: 'onResize',
    value: function onResize() {
      this.updateProgressBarSize();
      this.checkLabelOverflow();
    }
  }]);

  return ZippyProgressBar;
}(_reactClass2.default);

ZippyProgressBar.defaultProps = {
  // General
  rootClassName: 'zippy-react-toolkit-progress-bar',

  // value
  min: 0,
  max: 100,

  orientation: 'horizontal',
  transitionDuration: '300ms',
  renderLabel: function renderLabel(value) {
    return value + ' %';
  },
  indeterminate: false,

  // label
  labelPosition: 'end',
  labelStyle: {},
  labelClassName: '',
  rotateLabel: false,

  // direction
  direction: 1,
  rtl: false,

  // fill style/color
  fillColor: '#428bca',
  remainingColor: '#fff',

  // animation
  transition: true,
  springConfig: {},

  // Step
  showSteps: true,
  renderStep: null,
  renderTick: null,

  onChange: function onChange() {}
};

ZippyProgressBar.propTypes = {
  // General
  rootClassName: _propTypes2.default.string,

  // `min` and `max` are related, so they are validate both here
  minMax: function minMax(props, propName, componentName) {
    var min = props.min,
        max = props.max;


    if (!(0, _isNumeric2.default)(min)) {
      return new Error('min must be numeric, min: ' + min);
    }

    if (!(0, _isNumeric2.default)(max)) {
      return new Error('max must be numeric, max: ' + max);
    }

    if (max < min) {
      return new Error('min must be smaller than max. min: ' + min + ', max: ' + max);
    }
  },

  value: _propTypes2.default.number,

  // label
  label: _propTypes2.default.oneOfType([_propTypes2.default.element, _propTypes2.default.string, _propTypes2.default.func]),

  orientation: _propTypes2.default.oneOf(['horizontal', 'vertical']),

  // label position
  labelPosition: _propTypes2.default.oneOf(['start', 'end', 'center', 'fillEnd', 'fillCenter', 'remainingCenter', 'remainingStart'
  // we also will (not now) support equvalent values,
  // - for horizontal
  // 'left', 'right',
  // - for vertical
  // 'top', 'bottom', 'middle'
  ]),

  // direction, rtl === direction = -1
  direction: _propTypes2.default.oneOf([1, -1]),
  rtl: _propTypes2.default.bool,

  // states
  indeterminate: _propTypes2.default.bool,

  // style
  completeStyle: _propTypes2.default.object,
  incompleteStyle: _propTypes2.default.object,
  indeterminateBarStyle: _propTypes2.default.object,
  fillStyle: _propTypes2.default.oneOfType([_propTypes2.default.object, _propTypes2.default.func]),
  remainingStyle: _propTypes2.default.oneOfType([_propTypes2.default.object, _propTypes2.default.func]),
  // label style
  labelStyle: _propTypes2.default.object,
  labelClassName: _propTypes2.default.string,
  rotateLabel: _propTypes2.default.oneOfType([_propTypes2.default.bool, _propTypes2.default.number]),

  // label
  renderLabel: _propTypes2.default.func,
  labelFillColor: _propTypes2.default.string,
  fillColor: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.func]),
  remainingColor: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.func]),
  labelRemainingColor: _propTypes2.default.string,

  // animation
  transition: _propTypes2.default.bool,
  springConfig: _propTypes2.default.object,
  transitionDuration: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]),

  // Step
  showSteps: _propTypes2.default.bool,
  stepStyle: _propTypes2.default.object,
  stepsStyle: _propTypes2.default.object,
  step: _propTypes2.default.oneOfType([_propTypes2.default.arrayOf(_propTypes2.default.number), _propTypes2.default.number, _propTypes2.default.func]),
  stepDuration: _propTypes2.default.number,
  renderStep: _propTypes2.default.func,
  incrementInSteps: _propTypes2.default.bool,

  // ticks
  tick: _propTypes2.default.oneOfType([_propTypes2.default.arrayOf(_propTypes2.default.number), _propTypes2.default.number, _propTypes2.default.func]),
  tickStyle: _propTypes2.default.object,
  ticksStyle: _propTypes2.default.object,
  showTicks: _propTypes2.default.bool,
  renderTick: _propTypes2.default.func
};

exports.default = ZippyProgressBar;
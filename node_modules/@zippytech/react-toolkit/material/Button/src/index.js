'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _Button = require('../../../Button');

var _Button2 = _interopRequireDefault(_Button);

var _Ripple = require('../../../Ripple');

var _Ripple2 = _interopRequireDefault(_Ripple);

var _join = require('../../../common/join');

var _join2 = _interopRequireDefault(_join);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Copyright (c) 2015-present, Zippy Technologies
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * This source code is licensed under the MIT license found in the
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * LICENSE file in the root directory of this source tree.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */

var getClassNameForType = function getClassNameForType(props) {
  if (!props.type) {
    return '';
  }

  return props.rootClassName + '--' + props.type || '';
};

var ZippyMaterialButton = function (_Component) {
  _inherits(ZippyMaterialButton, _Component);

  function ZippyMaterialButton(props) {
    _classCallCheck(this, ZippyMaterialButton);

    var _this = _possibleConstructorReturn(this, (ZippyMaterialButton.__proto__ || Object.getPrototypeOf(ZippyMaterialButton)).call(this, props));

    _this.state = {
      rippleSize: {
        width: null,
        height: null
      }
    };

    _this.onMouseDownHandle = _this.onMouseDownHandle.bind(_this);
    _this.onRippleStop = _this.onRippleStop.bind(_this);
    return _this;
  }

  _createClass(ZippyMaterialButton, [{
    key: 'onMouseDownHandle',
    value: function onMouseDownHandle(event) {
      var node = event.currentTarget;
      var rect = node.getBoundingClientRect();
      var ripplePosition = {
        top: event.clientY - rect.top,
        left: event.clientX - rect.left
      };
      var rippleSize = {
        width: node.offsetWidth,
        height: node.offsetHeight
      };

      this.setState({
        ripplePosition: ripplePosition,
        rippleSize: rippleSize,
        wave: true
      });

      if (this.props.onMouseDown) {
        this.props.onMouseDown(event);
      }
    }
  }, {
    key: 'onRippleStop',
    value: function onRippleStop() {
      this.setState({
        wave: false
      });
    }
  }, {
    key: 'renderRipple',
    value: function renderRipple() {
      return _react2.default.createElement(_Ripple2.default, {
        key: 'ripple',
        position: this.state.ripplePosition,
        wave: this.state.wave,
        size: this.state.rippleSize,
        waveDuration: 300,
        onStop: this.onRippleStop
      });
    }
  }, {
    key: 'renderChildren',
    value: function renderChildren() {
      if (!_react2.default.Fragment) {
        return [this.props.children, this.renderRipple()];
      }

      return _react2.default.createElement(
        _react2.default.Fragment,
        null,
        this.props.children,
        this.renderRipple()
      );
    }
  }, {
    key: 'render',
    value: function render() {
      var props = this.props;
      var className = props.className;


      var classNameForType = getClassNameForType(props);
      var buttonClassName = (0, _join2.default)(classNameForType, className);

      var children = this.renderChildren();

      return _react2.default.createElement(_Button2.default, _extends({}, props, {
        className: buttonClassName,
        children: children,
        onMouseDown: this.onMouseDownHandle
      }));
    }
  }]);

  return ZippyMaterialButton;
}(_react.Component);

ZippyMaterialButton.defaultProps = {
  type: 'flat',
  theme: 'material-light',
  rootClassName: 'zippy-react-toolkit-material-button'
};

exports.default = ZippyMaterialButton;
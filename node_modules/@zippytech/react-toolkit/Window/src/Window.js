'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _reactClass = require('@zippytech/react-class');

var _region = require('@zippytech/region');

var _region2 = _interopRequireDefault(_region);

var _dragHelper = require('@zippytech/drag-helper');

var _dragHelper2 = _interopRequireDefault(_dragHelper);

var _Panel = require('../../Panel');

var _Panel2 = _interopRequireDefault(_Panel);

var _Button = require('../../Button');

var _Button2 = _interopRequireDefault(_Button);

var _Icon = require('../../common/Icon');

var _Icon2 = _interopRequireDefault(_Icon);

var _toUpperFirst = require('../../common/toUpperFirst');

var _toUpperFirst2 = _interopRequireDefault(_toUpperFirst);

var _assign = require('../../common/assign');

var _assign2 = _interopRequireDefault(_assign);

var _isMobile = require('../../common/isMobile');

var _isMobile2 = _interopRequireDefault(_isMobile);

var _cleanProps = require('../../common/cleanProps');

var _cleanProps2 = _interopRequireDefault(_cleanProps);

var _throttle = require('../../common/throttle');

var _throttle2 = _interopRequireDefault(_throttle);

var _shallowequal = require('../../common/shallowequal');

var _shallowequal2 = _interopRequireDefault(_shallowequal);

var _pxToFloat = require('../../common/pxToFloat');

var _pxToFloat2 = _interopRequireDefault(_pxToFloat);

var _containsNode = require('../../common/containsNode');

var _containsNode2 = _interopRequireDefault(_containsNode);

var _getOffsetParent = require('../../common/getOffsetParent');

var _getOffsetParent2 = _interopRequireDefault(_getOffsetParent);

var _getParentWithTranslate = require('../../common/getParentWithTranslate');

var _getParentWithTranslate2 = _interopRequireDefault(_getParentWithTranslate);

var _getConstrainRegion2 = require('../../common/getConstrainRegion');

var _getConstrainRegion3 = _interopRequireDefault(_getConstrainRegion2);

var _getRelativeRegion2 = require('./utils/getRelativeRegion');

var _getRelativeRegion3 = _interopRequireDefault(_getRelativeRegion2);

var _getMinMaxSize = require('../../common/getMinMaxSize');

var _getMinMaxSize2 = _interopRequireDefault(_getMinMaxSize);

var _isEventDoubleTap = require('../../common/isEventDoubleTap');

var _isEventDoubleTap2 = _interopRequireDefault(_isEventDoubleTap);

var _getFocusableElements = require('../../common/getFocusableElements');

var _getFocusableElements2 = _interopRequireDefault(_getFocusableElements);

var _getViewportRegion = require('../../common/getViewportRegion');

var _getViewportRegion2 = _interopRequireDefault(_getViewportRegion);

var _join = require('../../common/join');

var _join2 = _interopRequireDefault(_join);

var _updateSizeWithDirection = require('./utils/updateSizeWithDirection');

var _updateSizeWithDirection2 = _interopRequireDefault(_updateSizeWithDirection);

var _getDefaultMobileHandleConfig = require('./utils/getDefaultMobileHandleConfig');

var _getDefaultMobileHandleConfig2 = _interopRequireDefault(_getDefaultMobileHandleConfig);

var _getPositionRelativeToNewRegion = require('./utils/getPositionRelativeToNewRegion');

var _getPositionRelativeToNewRegion2 = _interopRequireDefault(_getPositionRelativeToNewRegion);

var _getHandles = require('./getHandles');

var _getHandles2 = _interopRequireDefault(_getHandles);

var _onResizeDrag = require('./utils/onResizeDrag');

var _onResizeDrag2 = _interopRequireDefault(_onResizeDrag);

var _manager = require('./manager');

var _manager2 = _interopRequireDefault(_manager);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Copyright (c) 2015-present, Zippy Technologies
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * This source code is licensed under the MIT license found in the
file in the root directory of this source tree.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */

function emptyFn() {}

var raf = global.requestAnimationFrame;

var returnNull = function returnNull() {
  return null;
};

var ZippyWindow = function (_Component) {
  _inherits(ZippyWindow, _Component);

  function ZippyWindow(props) {
    _classCallCheck(this, ZippyWindow);

    var _this = _possibleConstructorReturn(this, (ZippyWindow.__proto__ || Object.getPrototypeOf(ZippyWindow)).call(this, props));

    (0, _reactClass.autoBind)(_this);

    _this.state = {
      dragging: false,
      resizing: false,
      size: props.defaultSize,
      position: props.defaultPosition,
      maximized: props.defaultMaximized,
      centered: props.defaultCentered,
      collapsed: props.defaultCollapsed,
      visible: props.visible !== undefined ? props.visible : props.defaultVisible,
      relativeToViewport: props.defaultRelativeToViewport
    };

    _this.setupPanelRefs = function (node) {
      _this.node = node && node.getDOMRootNode();
      _this.titleBarNode = node && node.getDOMTitleBarNode();
      _this.bodyNode = node && node.getBodyNode();
    };

    _this.getProxyRef = function (node) {
      _this.proxy = node;
    };

    _this.handleTitleDragThrottle = (0, _throttle2.default)(_this.handleTitleDrag, 16);
    return _this;
  }

  _createClass(ZippyWindow, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      var _this2 = this;

      var domNode = this.node;

      this.props.onMount(this, domNode);
      if (this.props.constrainOnWindowResize) {
        this.setupWindowResizeListener();
      }
      if (this.props.constrainOnWindowScroll) {
        this.setupWindowScrollListener();
      }
      this.register();

      this.componentIsMounted = true;

      if (this.isAutoFocus()) {
        raf(function () {
          if (_this2.isAutoFocus() && _this2.componentIsMounted) {
            _this2.focus();
          }
        });
      }
    }
  }, {
    key: 'isAutoFocus',
    value: function isAutoFocus() {
      return this.props.autoFocus || this.props.autofocus;
    }
  }, {
    key: 'UNSAFE_componentWillReceiveProps',
    value: function UNSAFE_componentWillReceiveProps(nextProps) {
      if (this.isMaximizedControlled() && this.props.maximized !== nextProps.maximized) {
        this.handleMaximizedChange(nextProps.maximized);
      }

      if (this.isRelativeToViewportControlled() && this.props.relativeToViewport !== nextProps.relativeToViewport) {
        this.updatePositionWithOffsetParentChange(nextProps.relativeToViewport);
      }
    }
  }, {
    key: 'componentDidUpdate',
    value: function componentDidUpdate(prevProps) {
      var _this3 = this;

      if (this.props.modal != prevProps.modal) {
        this.refreshZIndex();
      }

      if (this.props.visible !== prevProps.visible) {
        this.handleVisibleChange(this.props.visible);
        if (this.isAutoFocus()) {
          raf(function () {
            if (_this3.props.visible) {
              _this3.focus();
            }
          });
        }
      }
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      this.componentIsMounted = null;
      if (this.windowResizeListener) {
        this.detachWindowResizeListener();
      }
      if (this.windowScrollListener) {
        this.detachWindowScrollListener();
      }

      this.layer = null;
      this.unRegister();
    }
  }, {
    key: 'render',
    value: function render() {
      var state = this.state;
      var props = this.props;

      if (!this.getVisible() && props.renderNullWhenInvisible) {
        return null;
      }

      var rootClassName = this.props.rootClassName;
      var className = this.getClassNames();
      var style = this.prepareStyle(props, state);

      var scrollerClassName = (0, _join2.default)(props.bodyClassName, rootClassName + '__body', props.bodyScrollable && rootClassName + '__body--scrollable');

      var footerClassName = (0, _join2.default)(rootClassName + '__body-footer', props.bodyScrollable && rootClassName + '__body-footer--scrollable');

      var bodyClassName = props.renderFooter === undefined ? scrollerClassName : footerClassName;

      var children = props.enableMoveProxy ? [state.dragging && !props.keepChildrenOnMove ? null : props.children, _react2.default.createElement('div', {
        key: 'proxy',
        className: (0, _join2.default)(rootClassName + '__body-move-proxy', state.dragging && rootClassName + '__body-move-proxy--visible')
      })] : props.children;

      var panel = _react2.default.createElement(
        _Panel2.default,
        _extends({}, (0, _cleanProps2.default)(props, ZippyWindow.propTypes), this.getToolBarProps(), {
          tabIndex: 0,
          style: style,
          renderFooter: this.getCollapsed() ? returnNull : this.props.renderFooter,
          renderTitleBar: this.renderTitleBar,
          onKeyDown: this.onWindowKeyDown,
          ref: this.setupPanelRefs,
          className: className,
          rootClassName: rootClassName,
          onMouseDown: this.handleWindowMouseDown,
          onTouchStart: this.handleWindowTouchStart,
          onFocus: this.onWindowFocus,
          onBlur: this.onWindowBlur,
          onMouseEnter: this.onWindowMouseEnter,
          onMouseLeave: this.onWindowMouseLeave,
          directChildren: [this.renderResizeHandles(props, this.state), props.enableResizeProxy && this.renderResizeProxy()]
          /**
           * panel direct props
           * that have propTypes on window
           * they are removed by cleanProps
           */
          , titleClassName: props.titleClassName,
          bodyClassName: bodyClassName,
          titleStyle: props.titleStyle,
          bodyStyle: this.prepareBodyStyle(props),
          bodyScrollable: props.bodyScrollable
        }),
        props.url ? this.renderIFrame() : children
      );

      if (props.modal && this.state.visible) {
        return this.renderModalWrapper(panel, style);
      }
      return panel;
    }
  }, {
    key: 'renderIFrame',
    value: function renderIFrame() {
      var props = this.props;

      var style = {};
      var domProps = {
        style: style
      };
      return _react2.default.createElement('iframe', _extends({
        className: props.rootClassName + '__iframe',
        src: props.url
      }, domProps));
    }
  }, {
    key: 'renderModalWrapper',
    value: function renderModalWrapper(panel, style) {
      // Wrapper must have the same position as window
      var wrapperStyle = _extends({}, this.getTransitionStyle());
      if (style) {
        if (style.position) {
          wrapperStyle.position = style.position;
        }
        if (style.zIndex) {
          wrapperStyle.zIndex = style.zIndex;
        }
      }

      var className = (0, _join2.default)(this.props.rootClassName + '__modal-wrapper', this.props.rootClassName + '__modal-wrapper--theme-' + this.props.theme, this.state.isTopModal && this.props.rootClassName + '__modal-wrapper--top', !this.isVisible() && this.props.rootClassName + '__modal-wrapper--invisible', this.getRelativeToViewport() && this.props.rootClassName + '__modal-wrapper--fixed', this.getTransitionClassNames(this.props.rootClassName));

      return _react2.default.createElement(
        'div',
        { style: wrapperStyle, className: className },
        panel
      );
    }
  }, {
    key: 'getCenteredClassName',
    value: function getCenteredClassName() {
      var className = null;
      var centered = this.getCentered();
      var rootClassName = this.props.rootClassName;


      if (centered === true) {
        className = rootClassName + '--centered';
      } else if (centered === 'vertical') {
        className = rootClassName + '--centered-vertical';
      } else if (centered === 'horizontal') {
        className = rootClassName + '--centered-horizontal';
      }

      return className;
    }
  }, {
    key: 'prepareRegion',
    value: function prepareRegion(props, state) {
      return state.region;
    }

    // style

  }, {
    key: 'prepareStyle',
    value: function prepareStyle(props, state) {
      var style = _extends({}, this.getTransitionStyle());

      var maximizedStyle = null;
      if (props.maximizable && props.maximizeTransition) {
        maximizedStyle = this.getMaximizedStyle();
        (0, _assign2.default)(style, maximizedStyle);
      }

      if (!this.getMaximized() && !maximizedStyle) {
        var size = this.getSizeStyle(props, state);
        (0, _assign2.default)(style, size, maxMinSize);

        var maxMinSize = (0, _getMinMaxSize2.default)(props);
        (0, _assign2.default)(style, maxMinSize);
      }

      var centered = this.getCentered();
      if (!this.getMaximized() && centered !== true) {
        // position
        var positionStyle = this.getPositionStyle(props, state);

        if (centered === 'vertical' && positionStyle) {
          delete positionStyle.top;
          delete positionStyle.bottom;
        }

        if (centered === 'horizontal' && positionStyle) {
          delete positionStyle.left;
          delete positionStyle.right;
        }

        (0, _assign2.default)(style, positionStyle);
      }

      if (props.border) {
        style.border = props.border;
      }

      if (props.borderRadius) {
        style.borderRadius = props.borderRadius;
      }

      if (state.zIndex) {
        style.zIndex = state.zIndex;
      }

      (0, _assign2.default)(style, props.style);

      if (this.getCollapsed()) {
        if (this.props.titleBarPosition === 'top' || this.props.titleBarPosition === 'bottom') {
          delete style.height;
          delete style.minHeight;
          if (this.titleBarNode) {
            style.height = this.titleBarNode.offsetHeight;
          }
        }

        if (this.props.titleBarPosition === 'left' || this.props.titleBarPosition === 'right') {
          delete style.width;
          delete style.minWidth;
          if (this.titleBarNode) {
            style.width = this.titleBarNode.offsetHeight;
          }
        }
      }

      return style;
    }
  }, {
    key: 'getMaximizedStyle',
    value: function getMaximizedStyle() {
      var state = this.state;
      // return;

      if (state.transitionMaximizeEnter && !state.transitionMaximizeEnterActive) {
        // add all directions
        var position = this.getComputedStylePosition();
        return _extends({}, position, {
          transition: 'all 300ms ease'
        });
      }

      if (state.transitionMaximizeEnterActive) {
        return {
          top: 0,
          left: 0,
          right: 0,
          bottom: 0,
          transition: 'all 300ms ease'
        };
      }

      if (state.transitionRestoreEnter && !state.transitionRestoreEnterActive) {
        return {
          top: 0,
          left: 0,
          right: 0,
          bottom: 0,
          transition: 'all 300ms ease',
          width: 'none',
          height: 'none',
          minHeight: 'none',
          maxHeight: 'none'
        };
      }

      if (state.transitionRestoreEnterActive) {
        var _position = this.positionBeforeMaximize;

        return _extends({}, _position, {
          transition: 'all 300ms ease'
        });
      }
    }
  }, {
    key: 'getTransitionStyle',
    value: function getTransitionStyle() {
      if (!this.props.transition) {
        return null;
      }

      if (this.state.transitionEnterActive) {
        return {
          transitionDuration: this.props.showTransitionDuration + 'ms'
        };
      }

      if (this.state.transitionLeaveActive) {
        return {
          transitionDuration: this.props.hideTransitionDuration + 'ms'
        };
      }
      return null;
    }
  }, {
    key: 'getClassNames',
    value: function getClassNames() {
      var state = this.state,
          props = this.props;
      var rootClassName = props.rootClassName;


      var shadow = props.shadow == null ? !props.modal : props.shadow;
      var className = (0, _join2.default)(props.className, rootClassName + '--theme-' + this.props.theme, !this.isVisible() && rootClassName + '--invisible', props.rtl && rootClassName + '--rtl', this.getRelativeToViewport() && rootClassName + '--fixed', this.getCenteredClassName(),
      // stacking and modal
      state.isTop && rootClassName + '--is-top', state.isTopModal && rootClassName + '--is-top-modal', props.modal && rootClassName + '--modal', state.hover && rootClassName + '--hover', shadow && rootClassName + '--shadow', state.dragging && rootClassName + '--dragging', props.keepCenteredOnResize && rootClassName + '--keep-position-centered',
      // states
      props.collapsible && rootClassName + '--collapsible', this.getCollapsed() && rootClassName + '--collapsed', props.draggable && rootClassName + '--draggable', props.resizable && rootClassName + '--resizable', props.closeable && rootClassName + '--closeable', props.maximizable && rootClassName + '--maximizable', this.getMaximized() && rootClassName + '--maximized', this.maximizeTransition && rootClassName + '--maximized-transition', this.getTransitionClassNames(rootClassName), state.focus && rootClassName + '--focus', props.url && rootClassName + '--has-iframe', props.enableMoveProxy && rootClassName + '--has-move-proxy');

      return className;
    }
  }, {
    key: 'getTransitionClassNames',
    value: function getTransitionClassNames(rootClassName) {
      var props = this.props,
          state = this.state;
      // animation

      return (0, _join2.default)(props.transition && rootClassName + '--has-transition', state.transitionEnter && rootClassName + '--transition-enter', state.transitionEnterActive && rootClassName + '--transition-enter-active', state.transitionLeave && rootClassName + '--transition-leave', state.transitionLeaveActive && rootClassName + '--transition-leave-active');
    }

    // root events

  }, {
    key: 'onWindowKeyDown',
    value: function onWindowKeyDown(event) {
      // let event pass through
      if (this.props.onKeyDown) {
        this.props.onKeyDown(event);
      }

      if (this.getCaptureTabNavigation() && event.key === 'Tab') {
        this.captureTabNavigation(event);
      }

      if (event.target === this.node) {
        event.preventDefault();
        this.handleKeyBoardNavigation(event);
        if (event.key === 'Escape') {
          this.close();
        }
      }

      // let event propagate
      if (this.props.onKeyDown) {
        this.props.onKeyDown(event);
      }
    }
  }, {
    key: 'captureTabNavigation',
    value: function captureTabNavigation(event) {
      var shiftKey = event.shiftKey;
      var nodes = (0, _getFocusableElements2.default)(this.bodyNode);
      var firstNode = nodes[0];
      var lastNode = nodes[nodes.length - 1];

      if (lastNode === event.target && !shiftKey) {
        firstNode.focus();
        event.preventDefault();
        event.stopPropagation();
      }

      if (firstNode === event.target && shiftKey) {
        lastNode.focus();
        event.preventDefault();
        event.stopPropagation();
      }
    }
  }, {
    key: 'handleWindowMouseDown',
    value: function handleWindowMouseDown(event) {
      if (!this.state.isTop) {
        this.bringToFront();
      }
      if (this.props.onMouseDown) {
        this.props.onMouseDown(event);
      }
    }
  }, {
    key: 'handleWindowTouchStart',
    value: function handleWindowTouchStart(event) {
      if (!this.state.isTop) {
        this.bringToFront();
      }

      if (this.props.onMouseDown) {
        this.props.onMouseDown(event);
      }
    }
  }, {
    key: 'onWindowFocus',
    value: function onWindowFocus(event) {
      if (this.props.modal && !this.state.isTopModal) {
        event.stopPropagation();
        return;
      }
      if (!this.state.isTop) {
        this.bringToFront(this.id);
      }

      if (!this.state.focus) {
        this.setState({ focus: true });
      }

      this.props.onFocus(event);
    }
  }, {
    key: 'onWindowBlur',
    value: function onWindowBlur(event) {
      var _this4 = this;

      // at this moment the body will have focus then it will jump
      // to next item when navigating with tab key
      raf(function () {
        if (_this4.componentIsMounted && !_this4.hasGeneralFocus() && !_this4.hasFocus()) {
          _this4.setState({ focus: false });
        }
      });

      this.props.onBlur(event);
    }
  }, {
    key: 'onWindowMouseEnter',
    value: function onWindowMouseEnter(event) {
      this.setState({ hover: true });
      if (this.props.onMouseEnter) {
        this.props.onMouseEnter(event);
      }
    }
  }, {
    key: 'onWindowMouseLeave',
    value: function onWindowMouseLeave(event) {
      this.setState({ hover: false });
      if (this.props.onMouseLeave) {
        this.props.onMouseLeave(event);
      }
    }

    // handlers

  }, {
    key: 'renderResizeHandles',
    value: function renderResizeHandles(props, state) {
      if (this.getMaximized()) {
        return null;
      }

      if (!props.resizable) {
        return null;
      }

      if (this.getCollapsed()) {
        return null;
      }

      if (!_isMobile2.default && props.showHandlesOnOver && !state.hover) {
        return null;
      }

      var handles = this.prepareResizeHandles(props, state).map(this.renderHandle.bind(this, props));

      return handles;
    }
  }, {
    key: 'renderHandle',
    value: function renderHandle(props, handle) {
      var result = void 0;
      var domProps = {
        onMouseDown: this.handleHandleMouseDown.bind(this, props, handle),
        onTouchStart: this.handleHandleTouchStart.bind(this, props, handle),
        key: handle.name,
        style: handle.style,
        className: (0, _join2.default)(props.rootClassName + '__handle', props.rootClassName + '__handle--' + handle.name)
      };

      if (this.props.renderResizeHandle) {
        result = this.props.renderResizeHandle({
          domProps: domProps,
          handle: handle.name,
          props: props
        });
      }

      if (typeof result === 'undefined') {
        result = _react2.default.createElement('div', domProps);
      }

      return result;
    }
  }, {
    key: 'handleHandleMouseDown',
    value: function handleHandleMouseDown(props, handle, event) {
      event.preventDefault();

      if (event.nativeEvent.which === 1) {
        // not right click
        this.setupResizeEvents(handle, event);
      }
    }
  }, {
    key: 'handleHandleTouchStart',
    value: function handleHandleTouchStart(props, handle, event) {
      event.preventDefault();
      event.stopPropagation();
      this.setupResizeEvents(handle, event);
    }
  }, {
    key: 'setupResizeEvents',
    value: function setupResizeEvents(handle, event) {
      var constrainRegion = this.getConstrainRegion();
      (0, _dragHelper2.default)(event, {
        constrainTo: constrainRegion,
        scope: this,
        onDragStart: function onDragStart(event, config) {
          this.handleResizeDragStart({ event: event, config: config, handle: handle, constrainRegion: constrainRegion });
        },
        onDrag: function onDrag(event, config) {
          this.handleResizeDrag(event, config);
        },
        onDrop: function onDrop(event, config) {
          this.handleResizeDrop(event, config);
        }
      });
    }
  }, {
    key: 'handleResizeDragStart',
    value: function handleResizeDragStart(_ref) {
      var event = _ref.event,
          config = _ref.config,
          handle = _ref.handle,
          constrainRegion = _ref.constrainRegion;

      var props = this.props;
      var region = this.getRegion();

      this.setState({
        resizing: true,
        activeHandle: handle
      });

      var defaultConfig = this.getResizeDefaultConfig({
        handle: handle,
        constrainRegion: constrainRegion,
        region: region
      });

      if (this.getCentered()) {
        this.adjustCenteredPosition(region, defaultConfig.initialComputedStylePosition);

        /**
         * Only change position when
         * keepCenteredOnResize is false
         */
        if (!this.props.keepCenteredOnResize) {
          this.setCentered(false);
          var position = this.getNormalizedPosition(defaultConfig.initialComputedStylePosition);

          this.setPosition(position);
        }
      }

      (0, _assign2.default)(config, defaultConfig);

      if (this.props.enableResizeProxy) {
        this.setState({
          showResizeProxy: true
        });
      }

      this.props.onResizeStart(this.getSize());
    }
  }, {
    key: 'handleResizeDrag',
    value: function handleResizeDrag(event, config) {
      var region = config.initialResizeRegion;

      /**
       * If it is centered and keepCenteredOnResize
       * is true, diff must be doubled
       */
      if (this.getCentered() && this.props.keepCenteredOnResize) {
        this.ajustCenteredSize(config);
      }

      var _getResizeDimensions = this.getResizeDimensions(config),
          resizeRegion = _getResizeDimensions.resizeRegion,
          position = _getResizeDimensions.position,
          size = _getResizeDimensions.size,
          proxyPosition = _getResizeDimensions.proxyPosition;

      /**
       * Used to set when resize stops
       * to set/trigger size/position change
       */


      this.position = position;
      this.size = size;

      if (this.props.enableResizeProxy) {
        this.setProxyDimensions({ size: size, position: proxyPosition });
      } else if (this.props.useDirectDomPositionSizeChange) {
        this.setDOMSize(size);

        /**
         * Move Window only when it should
         * not keep it's position while resizing/popsition change
         */
        if (!this.props.keepCenteredOnResize || !this.getCentered()) {
          this.setDOMPosition(position);
        }
      } else {
        this.setPosition(position);
        this.setSize(size);
      }

      this.props.onResizeDrag(size);
    }
  }, {
    key: 'handleResizeDrop',
    value: function handleResizeDrop(event, config) {
      var diff = config ? config.diff : {};
      var region = config.initialResizeRegion;

      this.setState({
        resizing: false,
        activeHandle: null
      });

      if (!region || !diff || !diff.top && !diff.left) {
        return null;
      }

      this.props.onResizeStop(this.size);
      this.setSize(this.size);
      this.setPosition(this.position);
      this.size = null;
      this.position = null;

      // reset proxy state
      this.setState({
        showResizeProxy: null
      });
    }

    /**
     * Calculates new size and position
     * based on a handle drag
     * @param {Object} config a config that has information
     *                 about handle, the ammount the handle
     *                 has been dragged (see getResizeDefaultConfig)
     * @param {Region} region
     * @return {Object} {
     *   - region
     *   - size
     *   - position
     * }
     */

  }, {
    key: 'getResizeDimensions',
    value: function getResizeDimensions(config) {
      var resizeRegion = (0, _onResizeDrag2.default)(config);

      var newRegion = void 0;

      if (!config.initialResizeRegion) {
        return null;
      }

      var initialRegion = config.initialResizeRegion.clone();

      var newSize = {
        width: resizeRegion.width,
        height: resizeRegion.height
      };

      var positionDiff = {
        left: resizeRegion.left - initialRegion.left,
        top: resizeRegion.top - initialRegion.top,
        bottom: resizeRegion.bottom - initialRegion.bottom,
        right: resizeRegion.right - initialRegion.right
      };

      var newPosition = this.getResizeDiffPosition(positionDiff, config.initialComputedStylePosition);

      var proxyPosition = void 0;

      if (this.props.enableResizeProxy) {
        proxyPosition = this.getResizeDiffPosition(positionDiff, {
          top: 0,
          left: 0,
          /**
           *  these are dummy not used by proxy, because proxy is always
           *  positioned absolute to top,left
           */
          right: 0,
          bottom: 0
        });
      }

      return {
        resizeRegion: resizeRegion,
        position: newPosition,
        size: newSize,
        proxyPosition: proxyPosition
      };
    }

    /**
     * Mutates config, it doubles
     * the difference so when it is
     * centered it resizees corectr
     * @return {void}
     */

  }, {
    key: 'ajustCenteredSize',
    value: function ajustCenteredSize(config) {
      var centered = this.getCentered();
      if (centered === true) {
        config.diff.left = config.diff.left * 2;
        config.diff.top = config.diff.top * 2;
      } else if (centered === 'horizontal') {
        config.diff.left = config.diff.left * 2;
      } else if (centered === 'vertical') {
        config.diff.top = config.diff.top * 2;
      }
    }

    /**
     * Prepares configuration objects for each handle
     * @return {Array} handleConfigurations
     */

  }, {
    key: 'prepareResizeHandles',
    value: function prepareResizeHandles(props, state) {
      var allHandles = this.getAllHandlers();

      var configHandles = this.filterValidHandlers(allHandles);

      if (!configHandles) {
        return [];
      }

      return Object.keys(configHandles).map(function (handleName) {
        var handle = configHandles[handleName];
        var style = handle.style;

        (0, _assign2.default)(handle, {
          style: style,
          name: handleName
        });

        return handle;
      });
    }
  }, {
    key: 'getAllHandlers',
    value: function getAllHandlers() {
      var props = this.props;

      var width = _isMobile2.default ? props.mobileHandleWidth : props.handleWidth;
      var outside = _isMobile2.default ? props.mobileHandlesOutside : props.handlesOutside;

      var config = _isMobile2.default;
      if (_isMobile2.default) {
        config = props.mobileHandleConfig !== undefined ? props.mobileHandleConfig : (0, _getDefaultMobileHandleConfig2.default)(props.titleBarPosition);
      } else {
        config = props.handleConfig;
      }

      return (0, _getHandles2.default)(_extends({}, config, {
        width: width,
        outside: outside,
        handleStyle: props.handleStyle
      }));
    }

    /**
     * Makes the intersection of
     * resizeHanders and resizable(object)
     * @param {Array} allHandlers
     * @instance props.resizeHandles
     * @instance props.resizable
     */

  }, {
    key: 'filterValidHandlers',
    value: function filterValidHandlers(allHandles) {
      var filteredHandles = {};
      var resizeHandles = this.props.resizeHandles;
      var resizableValidHandles = this.getResizableValidHandles();

      if (resizeHandles === true && resizableValidHandles === true) {
        // all are valid
        return allHandles;
      }

      if (resizeHandles === false && resizableValidHandles === false) {
        return null;
      }

      /**
       * both props can be true
       * and both can have values
       * `resizable` is normalized to `resizableValidHandles`
       */
      filteredHandles = Object.keys(allHandles).reduce(function (acc, handleName) {
        // when both are set
        if (resizableValidHandles && resizableValidHandles.length && resizeHandles && resizeHandles.length) {
          var isValidInResizeHandlers = resizeHandles.indexOf(handleName) !== -1;
          var isValidInResizableValidHandles = resizableValidHandles.indexOf(handleName) !== -1;
          if (isValidInResizeHandlers && isValidInResizableValidHandles) {
            acc[handleName] = allHandles[handleName];
          }
        }

        // only resizeHandles is set
        if (resizeHandles && resizeHandles.length && !Array.isArray(resizableValidHandles)) {
          var _isValidInResizeHandlers = resizeHandles.indexOf(handleName) !== -1;
          if (_isValidInResizeHandlers) {
            acc[handleName] = allHandles[handleName];
          }
        }

        // only resizeHandles is set
        if (resizableValidHandles && resizableValidHandles.length && !Array.isArray(resizeHandles)) {
          var _isValidInResizableValidHandles = resizableValidHandles.indexOf(handleName) !== -1;
          if (_isValidInResizableValidHandles) {
            acc[handleName] = allHandles[handleName];
          }
        }

        return acc;
      }, {});

      return filteredHandles;
    }

    /**
     * Retruns a list of valid directions
     * if all directions are valid then
     * it returns null
     * @instance props.resizable
     * @return {Array|null}
     */

  }, {
    key: 'getResizableValidHandles',
    value: function getResizableValidHandles() {
      var validHandles = [];

      if (this.props.resizable === true) {
        return true;
      }

      if (this.props.resizable && this.props.resizable.height) {
        validHandles = [].concat(_toConsumableArray(validHandles), ['t', 'b']);
      }

      if (this.props.resizable && this.props.resizable.width) {
        validHandles = [].concat(_toConsumableArray(validHandles), ['l', 'r']);
      }

      // if both directions
      if (this.props.resizable && this.props.resizable.height && this.props.resizable.width) {
        validHandles = true;
      }

      return validHandles;
    }

    // position

  }, {
    key: 'getPositionStyle',
    value: function getPositionStyle(props, state) {
      var style = this.getPosition(props, state);
      return style;
    }
  }, {
    key: 'getPosition',
    value: function getPosition(props, state) {
      props = props || this.props;
      state = state || this.state;

      return this.isPositionControlled() ? props.position : state.position;
    }

    // get a valid position, fill empty spaces with actualPosition

  }, {
    key: 'getValidNormalizedPosition',
    value: function getValidNormalizedPosition() {
      return _extends({}, this.getPosition, this.getActualPosition());
    }
  }, {
    key: 'isPositionControlled',
    value: function isPositionControlled() {
      return this.props.position != null;
    }

    // size

  }, {
    key: 'getSizeStyle',
    value: function getSizeStyle(props, state) {
      var result = {};
      var size = this.getSize();

      if (!size) {
        return null;
      }

      var sizeType = typeof size === 'undefined' ? 'undefined' : _typeof(size);
      var single = sizeType == 'number' || sizeType == 'string' || size === null;
      var width = single ? size : size.width;
      var height = single ? size : size.height;

      if (width != null) {
        result.width = width;
      }

      if (height != null) {
        result.height = height;
      }

      return result;
    }
  }, {
    key: 'isSizeControlled',
    value: function isSizeControlled() {
      return !!this.props.size;
    }
  }, {
    key: 'isResizeOrDrag',
    value: function isResizeOrDrag(state) {
      state = state || this.state;
      return state.resizing || state.dragging;
    }
  }, {
    key: 'getSize',
    value: function getSize() {
      return this.isSizeControlled() ? this.props.size : this.state.size;
    }

    // renderers

  }, {
    key: 'renderTitleBar',
    value: function renderTitleBar(domProps) {
      if (this.props.renderTitleBar === false || this.props.renderTitleBar === null) {
        return null;
      }

      domProps.onMouseDown = this.handleTitleMouseDown;
      domProps.onTouchStart = this.handleTitleTouchStart;
      domProps.onDoubleClick = this.onTitleDoubleClick;
      domProps.className = (0, _join2.default)(domProps.className, this.props.rootClassName + '__title-bar--align-' + this.props.titleAlign, this.props.rootClassName + '__title-bar--position-' + this.props.titleBarPosition);

      var _props = this.props,
          titleRotate = _props.titleRotate,
          titleBarPosition = _props.titleBarPosition,
          borderRadius = _props.borderRadius;


      if (borderRadius) {
        domProps.style = domProps.style || {};
        if (titleBarPosition == 'top' || titleRotate == -90 && titleBarPosition == 'left' || titleRotate == 90 && titleBarPosition == 'right') {
          domProps.style.borderTopLeftRadius = borderRadius;
          domProps.style.borderTopRightRadius = borderRadius;
          domProps.style.borderBottomLeftRadius = 0;
          domProps.style.borderBottomRightRadius = 0;
        } else {
          domProps.style.borderTopLeftRadius = 0;
          domProps.style.borderTopRightRadius = 0;
          domProps.style.borderBottomLeftRadius = borderRadius;
          domProps.style.borderBottomRightRadius = borderRadius;
        }
      }

      if (typeof this.props.renderTitleBar === 'function') {
        return this.props.renderTitleBar(domProps, this.props);
      }
    }
  }, {
    key: 'onTitleDoubleClick',
    value: function onTitleDoubleClick() {
      if (this.props.maximizeOnDoubleClick && this.props.maximizable) {
        this.toggleMaximized();
      }
    }
  }, {
    key: 'getToolBarProps',
    value: function getToolBarProps() {
      var _this5 = this;

      var toolBarPosition = void 0;
      if (this.props.titlePosition === 'start') {
        toolBarPosition = 'renderAfterTitle';
      } else {
        toolBarPosition = 'renderBeforeTitle';
      }

      return _defineProperty({}, toolBarPosition, function () {
        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        return _this5.renderTitleBarTools({
          args: args,
          toolBarPosition: toolBarPosition
        });
      });
    }
  }, {
    key: 'renderTitleBarTools',
    value: function renderTitleBarTools(_ref3) {
      var args = _ref3.args,
          toolBarPosition = _ref3.toolBarPosition;
      var props = this.props;

      var domProps = {
        className: props.rootClassName + '__tools',
        onMouseDown: function onMouseDown(event) {
          return event.stopPropagation();
        },
        onDoubleClick: function onDoubleClick(event) {
          return event.stopPropagation();
        },
        children: [props.enableRelativeToViewportToggle && this.renderRelativeToViewportTool(), props.collapsible && !this.getMaximized() && this.renderCollapseTool(), props.maximizable && this.renderMaximizableTool(), props.closeable && this.renderCloseTool()]
      };

      if (props.toolbarButtons) {
        var toolbarButtons = Array.isArray(props.toolbarButtons) ? props.toolbarButtons : [props.toolbarButtons];
        toolbarButtons = toolbarButtons.map(function (child, index) {
          return _react2.default.cloneElement(child, {
            key: child.props.key || 'tool-' + index,
            className: (0, _join2.default)(child.props.className, props.rootClassName + '__tool')
          });
        });
        domProps.children = [].concat(_toConsumableArray(toolbarButtons), _toConsumableArray(domProps.children));
      }

      var result = void 0;
      // you don't want to overwrite panel renderBefore or renderAfter
      // they are extended

      if (props.renderToolBar) {
        result = props.renderToolBar(domProps, props);
      }

      if (result == null) {
        result = _react2.default.createElement('div', _extends({ key: 'tools' }, domProps));
      }

      if (props[toolBarPosition]) {
        var tools = props[toolBarPosition](domProps, props);
        result = Array.isArray(result) ? result : [result];
        result = toolBarPosition === 'renderBeforeTitle' ? [].concat(_toConsumableArray(result), [tools]) : [tools].concat(_toConsumableArray(result));
      }

      return result;
    }
  }, {
    key: 'renderCloseTool',
    value: function renderCloseTool() {
      var _this6 = this;

      var props = this.props;

      var icon = props.closeIcon || _react2.default.createElement(_Icon2.default, {
        size: props.closeIconSize,
        type: 'close',
        className: (0, _join2.default)(props.rootClassName + '__close-icon', props.rootClassName + '__icon')
      });

      var domProps = {
        className: props.rootClassName + '__tool',
        theme: null,
        key: 'closeable',
        children: icon
      };

      if (_isMobile2.default) {
        domProps.onTouchStart = function (event) {
          event.stopPropagation();
          _this6.close();
        };
      } else {
        domProps.onClick = function () {
          return _this6.close();
        };
      }

      var result = void 0;
      if (props.renderCloseButton) {
        result = props.renderCloseButton({ domProps: domProps, props: props, close: this.close });
      }

      if (result === undefined) {
        result = _react2.default.createElement(_Button2.default, domProps);
      }

      return result;
    }
  }, {
    key: 'renderCollapseTool',
    value: function renderCollapseTool() {
      var _this7 = this;

      var props = this.props;

      var domProps = {
        key: 'collapsetool',
        className: props.rootClassName + '__tool',
        theme: null
      };

      var collapsed = this.getCollapsed();

      if (_isMobile2.default) {
        domProps.onTouchStart = function (event) {
          event.stopPropagation();
          event.preventDefault();
          (collapsed ? _this7.expand : _this7.collapse)();
        };
      } else {
        domProps.onClick = collapsed ? this.expand : this.collapse;
      }

      var maximized = this.getMaximized();

      var icon = void 0;
      if (collapsed && props.expandIcon) {
        icon = props.expandIcon;
      }
      if (!collapsed && props.collapseIcon) {
        icon = props.collapseIcon;
      }

      if (!icon) {
        var type = 'collapse';
        var size = collapsed ? props.expandIconSize : props.collapseIconSize;

        var collapsedOrExpanded = collapsed ? props.rootClassName + '__expand-icon' : props.rootClassName + '__collapse-icon';
        var className = (0, _join2.default)(collapsedOrExpanded, this.props.rootClassName + '__icon');
        icon = _react2.default.createElement(_Icon2.default, { size: size, type: type, className: className });
      }

      domProps.children = icon;

      var result = void 0;
      if (props.renderCollapseButton) {
        result = props.renderCollapseButton({
          domProps: domProps,
          collapsed: collapsed,
          props: props,
          collapse: this.collapse,
          expand: this.expand
        });
      }

      if (result === undefined) {
        result = _react2.default.createElement(_Button2.default, domProps);
      }

      return result;
    }
  }, {
    key: 'renderMaximizableTool',
    value: function renderMaximizableTool() {
      var _this8 = this;

      if (this.getCollapsed()) {
        return null;
      }

      var props = this.props;

      var domProps = {
        key: 'maximizeIcon',
        className: props.rootClassName + '__tool',
        theme: null
      };

      if (_isMobile2.default) {
        domProps.onTouchStart = function (event) {
          _this8.toggleMaximized();
          event.stopPropagation();
          event.preventDefault();
        };
      } else {
        domProps.onClick = function () {
          return _this8.toggleMaximized();
        };
      }

      var maximized = this.getMaximized();

      var icon = void 0;
      if (maximized && props.restoreIcon) {
        icon = props.restoreIcon;
      }
      if (!maximized && props.maximizeIcon) {
        icon = props.maximizeIcon;
      }

      if (!icon) {
        var type = maximized ? 'exitFullScreen' : 'fullScreen';
        var size = maximized ? props.restoreIconSize : props.maximizeIconSize;
        var className = (0, _join2.default)(maximized && props.rootClassName + '__restore-icon', !maximized && props.rootClassName + '__maximized-icon', this.props.rootClassName + '__icon');
        icon = _react2.default.createElement(_Icon2.default, { size: size, type: type, className: className });
      }

      domProps.children = icon;

      var result = void 0;
      if (props.renderMaximizeButton) {
        result = props.renderMaximizeButton({
          domProps: domProps,
          maximized: maximized,
          props: props,
          toggleMaximized: this.toggleMaximized,
          restore: this.restore,
          maximize: this.maximize
        });
      }

      if (result === undefined) {
        result = _react2.default.createElement(_Button2.default, domProps);
      }

      return result;
    }
  }, {
    key: 'renderRelativeToViewportTool',
    value: function renderRelativeToViewportTool() {
      var _this9 = this;

      var props = this.props;

      var domProps = {
        key: 'relativeToViewportTool',
        className: props.rootClassName + '__tool',
        theme: null
      };

      var toggleRelativeToViewport = function toggleRelativeToViewport() {
        return _this9.setRelativeToViewport(!_this9.getRelativeToViewport());
      };

      if (_isMobile2.default) {
        domProps.onTouchStart = function (event) {
          event.stopPropagation();
          event.preventDefault();
          toggleRelativeToViewport();
        };
      } else {
        domProps.onClick = function () {
          return toggleRelativeToViewport();
        };
      }

      var relativeToViewport = this.getRelativeToViewport();

      var icon = void 0;
      if (relativeToViewport && props.pinUpIcon) {
        icon = props.pinUpIcon;
      }
      if (!relativeToViewport && props.pinDownIcon) {
        icon = props.pinDownIcon;
      }

      if (!icon) {
        var type = 'pin';
        var size = relativeToViewport ? props.pinUpIconSize : props.pinDownIconSize;

        var pinUpOrDown = relativeToViewport ? props.rootClassName + '__pin-up-icon' : props.rootClassName + '__pin-down-icon';
        var className = (0, _join2.default)(pinUpOrDown, props.rootClassName + '__pin-icon', props.rootClassName + '__icon');
        icon = _react2.default.createElement(_Icon2.default, { size: size, type: type, className: className });
      }

      domProps.children = icon;

      var result = void 0;
      if (props.renderPinButton) {
        result = props.renderPinButton({
          domProps: domProps,
          relativeToViewport: relativeToViewport,
          props: props,
          toggleRelativeToViewport: toggleRelativeToViewport
        });
      }

      if (result === undefined) {
        result = _react2.default.createElement(_Button2.default, domProps);
      }

      return result;
    }
  }, {
    key: 'renderResizeProxy',
    value: function renderResizeProxy() {
      if (!this.state.resizing || !this.state.showResizeProxy) {
        return null;
      }

      var size = this.size;
      var position = this.position;

      var style = (0, _assign2.default)({
        position: 'absolute'
      }, size);

      if (!this.getCentered()) {
        style = _extends({}, style, {
          top: 0,
          left: 0
        });
      }

      return _react2.default.createElement('div', {
        style: style,
        ref: this.getProxyRef,
        key: 'resize-proxy',
        className: this.props.rootClassName + '__proxy'
      });
    }
  }, {
    key: 'handleTitleMouseDown',
    value: function handleTitleMouseDown(event) {
      if (this.props.draggable && event.nativeEvent.which === 1 && !this.getMaximized()) {
        this.setupTitleDrag(event);
      }

      if (!this.state.isTop) {
        this.bringToFront();
      }
    }
  }, {
    key: 'handleTitleTouchStart',
    value: function handleTitleTouchStart(event) {
      if (this.props.draggable && !this.getMaximized()) {
        event.preventDefault();
        this.setupTitleDrag(event);
      }

      if ((0, _isEventDoubleTap2.default)(event)) {
        this.onTitleDoubleClick();
      }
    }
  }, {
    key: 'setupTitleDrag',
    value: function setupTitleDrag(event) {
      /**
       * If centered and centered is controlled
       * don't allow window to be moved
       */
      if (this.getCentered() && this.isCenteredControlled()) {
        this.setCentered(false);
        return null;
      }

      var constrainTo = this.getConstrainRegion();
      var region = this.getDragRegion();
      var computedStylePosition = this.getComputedStylePosition();

      event.preventDefault();
      event.stopPropagation();

      // because event is stoped, focus must be manualy added back
      if (!this.hasGeneralFocus()) {
        this.focus();
      }

      (0, _dragHelper2.default)(event, {
        region: region,
        constrainTo: constrainTo,
        scope: this,
        onDragStart: function onDragStart(event, config) {
          this.handleTitleDragStart({
            event: event,
            config: config,
            region: region,
            computedStylePosition: computedStylePosition
          });
        },
        onDrag: function onDrag(event, config) {
          this.handleTitleDragThrottle(event, config);
        },
        onDrop: function onDrop(event, config) {
          this.handleTitleDragDrop(event, config);
        }
      });
    }
  }, {
    key: 'handleTitleDragStart',
    value: function handleTitleDragStart(_ref4) {
      var event = _ref4.event,
          config = _ref4.config,
          region = _ref4.region,
          computedStylePosition = _ref4.computedStylePosition;

      if (this.getCentered()) {
        var rootRegion = this.props.constrainTitleOnly ? this.getRegion() : region;
        var offset = {
          width: rootRegion.width,
          height: rootRegion.height
        };

        this.adjustCenteredPosition(offset, computedStylePosition);
        this.setPosition(this.getNormalizedPosition(computedStylePosition));
        this.setCentered(false);
      }

      config.initialRegion = region;
      config.initialComputedStylePosition = computedStylePosition;

      this.setState({ dragging: true });

      this.props.onMoveStart(this.getPosition());
    }
  }, {
    key: 'handleTitleDrag',
    value: function handleTitleDrag(event, config) {
      var diff = (0, _assign2.default)({}, config.diff);
      if (_typeof(this.props.draggable) === 'object') {
        if (!this.props.draggable.horizontal) {
          diff.left = 0;
        }
        if (!this.props.draggable.vertical) {
          diff.top = 0;
        }
      }
      var newPosition = this.getDiffPosition(diff, config.initialComputedStylePosition);

      this.position = newPosition;
      if (this.props.useDirectDomPositionSizeChange) {
        this.setDOMPosition(this.position);
      } else {
        this.setPosition(this.position);
      }
    }
  }, {
    key: 'handleTitleDragDrop',
    value: function handleTitleDragDrop(event, config) {
      var diff = config ? config.diff : {};
      this.setState({ dragging: false });

      if (!diff || !diff.top && !diff.left) {
        return;
      }

      this.setPosition(this.position);
      this.props.onMoveStop(this.position);
      this.position = null;
    }
  }, {
    key: 'prepareBodyStyle',
    value: function prepareBodyStyle(props) {
      var bodyStyle = (0, _assign2.default)({
        padding: props.bodyPadding,
        border: props.bodyBorder
      }, props.bodyStyle);

      if (this.getCollapsed()) {
        bodyStyle.overflow = 'hidden';
        bodyStyle.padding = 0;

        if (this.props.titleBarPosition === 'top' || this.props.titleBarPosition === 'bottom') {
          bodyStyle.height = 0;
          bodyStyle.maxHeight = 0;
          bodyStyle.maxWidth = '100%';
        }

        if (this.props.titleBarPosition === 'left' || this.props.titleBarPosition === 'right') {
          bodyStyle.width = 0;
          bodyStyle.maxWidth = 0;
          bodyStyle.maxHeight = '100%';
          bodyStyle.height = this.getRegion().height;
        }
      }

      return bodyStyle;
    }
  }, {
    key: 'getBorderRadius',
    value: function getBorderRadius() {
      var borderRadius = this.props.borderRadius;

      return typeof borderRadius === 'boolean' ? 3 : borderRadius;
    }

    // dynamic setters

    /**
     * Checks on resize wether position or size should change
     */

  }, {
    key: 'checkFitToConstrain',
    value: function checkFitToConstrain() {
      var initialRegion = this.getRegion();
      var constrainRegion = void 0;

      if (this.props.keepPositionOnConstrain) {
        constrainRegion = this.ajustRegionToPosition(this.getConstrainRegion());
      } else {
        constrainRegion = this.getConstrainRegion();
      }

      // constrainedRegion is mutated by constrainTo
      var constrainedRegion = initialRegion.clone();
      var isConstrained = constrainedRegion.constrainTo(constrainRegion);

      if (isConstrained) {
        var isSizeChanged = initialRegion.width !== constrainedRegion.width || initialRegion.height !== constrainedRegion.height;

        if (isSizeChanged && !this.props.keepSizeOnConstrain) {
          var _getNewSizeConstrain = this.getNewSizeConstrain({
            initialRegion: initialRegion,
            constrainRegion: constrainRegion,
            constrainedRegion: constrainedRegion
          }),
              newPosition = _getNewSizeConstrain.position,
              size = _getNewSizeConstrain.size;

          this.setPosition(newPosition);
          this.setSize(size);
        } else {
          /**
           * Window fits into new region
           * only have to move
           */
          var diff = {
            left: constrainedRegion.left - initialRegion.left,
            top: constrainedRegion.top - initialRegion.top
          };
          var _newPosition = this.getDiffPosition(diff, this.getComputedStylePosition());
          this.setPosition(_newPosition);
        }
      }
    }
  }, {
    key: 'getNewSizeConstrain',
    value: function getNewSizeConstrain(_ref5) {
      var _this10 = this;

      var initialRegion = _ref5.initialRegion,
          constrainRegion = _ref5.constrainRegion,
          constrainedRegion = _ref5.constrainedRegion;

      var diffs = [{
        name: 'right',
        handle: 'r',
        diffSide: 'left',
        diff: constrainedRegion.right - initialRegion.right
      }, {
        name: 'left',
        handle: 'l',
        diffSide: 'left',
        diff: constrainedRegion.left - initialRegion.left
      }, {
        name: 'top',
        handle: 't',
        diffSide: 'top',
        diff: constrainedRegion.top - initialRegion.top
      }, {
        name: 'bottom',
        handle: 'b',
        diffSide: 'top',
        diff: constrainedRegion.bottom - initialRegion.bottom
      }];

      var newSize = void 0;
      var newPosition = void 0;
      /**
       * Iterate over each position/size change
       * and get last position/size
       */
      diffs.forEach(function (config) {
        if (config.diff === 0) {
          return null;
        }

        var handle = _this10.getAllHandlers()[config.handle];
        var defaultDragConfig = _this10.getResizeDefaultConfig({
          handle: handle,
          constrainedRegion: constrainedRegion,
          region: initialRegion
        });

        var diff = _defineProperty({}, config.diffSide, config.diff);
        var dragConfig = (0, _assign2.default)({}, defaultDragConfig, { diff: diff });

        var _getResizeDimensions2 = _this10.getResizeDimensions(dragConfig, initialRegion),
            position = _getResizeDimensions2.position,
            size = _getResizeDimensions2.size;

        newSize = size;
        newPosition = position;
      });

      return {
        size: newSize,
        position: newPosition
      };
    }

    /**
     * Restricts region to position
     * e.g if position left is set
     * then new region should not inclue
     * the area from the left part of the window
     * to the left edge of the constrainer
     *
     * @param {Region}
     * @instance {Function} getPosition
     * @return {Region} ajusted region to position
     */

  }, {
    key: 'ajustRegionToPosition',
    value: function ajustRegionToPosition(region) {
      var position = this.getRegion();
      var newRegion = region.clone();

      if (position.top) {
        newRegion.addTop(position.top);
      }

      if (position.bottom) {
        newRegion.addBottom(-position.bottom);
      }

      if (position.left) {
        newRegion.addLeft(position.left);
      }

      if (position.right) {
        newRegion.addRight(-position.right);
      }

      console.group();
      console.log('region', region);
      console.log('newRegion', newRegion);
      console.log('position', position);
      console.groupEnd();

      return newRegion;
    }

    // seters

    /**
     * Called whe posiiton changes
     * sets position and calls props.onMove
     * @param {Object} size
     * @return {Object} size
     */

  }, {
    key: 'setPosition',
    value: function setPosition(position) {
      if ((0, _shallowequal2.default)(position, this.getPosition())) {
        return null;
      }
      if (!this.isPositionControlled()) {
        this.setState({ position: position });
      }

      this.props.onPositionChange(position);

      return position;
    }
  }, {
    key: 'setProxyDimensions',
    value: function setProxyDimensions(_ref6) {
      var size = _ref6.size,
          position = _ref6.position,
          resizeRegion = _ref6.resizeRegion;

      if (this.proxy) {
        this.setDOMSize(size, this.proxy);
        /**
         * Don't move dialog when it is resized
         * and keepPositionOnConstrain is true
         */
        if (this.props.keepCenteredOnResize && this.getCentered()) {
          return null;
        }

        this.setDOMPosition(position, this.proxy);
      }
    }

    /**
     * Called when size changes
     * sets size and calls props.onResize
     * @param {Object} size
     * @return {Object} size
     */

  }, {
    key: 'setSize',
    value: function setSize(size) {
      if (!this.isSizeControlled()) {
        this.setState({ size: size });
      }

      this.props.onResize(size);

      return size;
    }

    /**
     * Sets position directy on dom element
     * on live position change.
     * This way it doesn't trigger
     * setState on each drag event.
     * @param {Object} { top, left, right, bottom }
     */

  }, {
    key: 'setDOMPosition',
    value: function setDOMPosition(position) {
      var node = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.node;

      if (node) {
        if (position.top !== undefined) {
          node.style.top = position.top + 'px';
        }
        if (position.left !== undefined) {
          node.style.left = position.left + 'px';
        }
        if (position.right !== undefined) {
          node.style.right = position.right + 'px';
        }
        if (position.bottom !== undefined) {
          node.style.bottom = position.bottom + 'px';
        }
      }
    }

    /**
     * Sets position directy on dom element
     * on live position change.
     * This way it doesn't trigger
     * setState on each drag event.
     * @param {Object} { width, height }
     */

  }, {
    key: 'setDOMSize',
    value: function setDOMSize(size) {
      var node = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.node;

      if (node) {
        node.style.width = size.width + 'px';
        node.style.height = size.height + 'px';
      }
    }

    // getters

    /**
     * Returns only positions that are provided
     * on this.props.position || this.props.defaultPosition
     * if not, it will default to
     * - top
     * - left
     *
     * There always must be a x position and a y position
     * @param {Object}
     * @return {Object} newPosition
     */

  }, {
    key: 'getNormalizedPosition',
    value: function getNormalizedPosition(newPosition) {
      var initialPosition = this.getPosition();
      var positions = initialPosition && Object.keys(initialPosition);

      if (!positions) {
        positions = ['top', 'left'];
      } else {
        if (positions.indexOf('left') == -1 && positions.indexOf('right') == -1) {
          positions.push('left');
        }
        if (positions.indexOf('top') == -1 && positions.indexOf('bottom') == -1) {
          positions.push('top');
        }
      }

      return positions.reduce(function (acc, position) {
        acc[position] = newPosition[position];
        return acc;
      }, {});
    }

    /**
     * Calculates new position after resize
     * relative to offsetParent
     * @param {Object} diff holds diffs for all sides
     * @param {Object} computedStylePosition
     */

  }, {
    key: 'getResizeDiffPosition',
    value: function getResizeDiffPosition(diff, computedStylePosition) {
      var position = {};

      position.top = computedStylePosition.top + diff.top;
      position.left = computedStylePosition.left + diff.left;

      position.bottom = computedStylePosition.bottom - diff.bottom;
      position.right = computedStylePosition.right - diff.right;

      return this.getNormalizedPosition(position);
    }

    /**
     * Returns new position, using getComputedStyle
     * @param {Object} diff - top, left diff
     * @param {Object} computedStylePosition
     */

  }, {
    key: 'getDiffPosition',
    value: function getDiffPosition(diff, computedStylePosition) {
      var position = {};

      position.top = computedStylePosition.top + diff.top;
      position.bottom = computedStylePosition.bottom - diff.top;
      position.left = computedStylePosition.left + diff.left;
      position.right = computedStylePosition.right - diff.left;

      return this.getNormalizedPosition(position);
    }

    /**
     * Using getComputedStyle returns an object of the form
     * { top: Number, left: Number, right: Number, bottom: Number}
     * @instance {Node} this.node
     * @global {Function} getComputedStyle
     * @return {Object}
     */

  }, {
    key: 'getComputedStylePosition',
    value: function getComputedStylePosition(node) {
      var _this11 = this;

      node = node || this.node;
      if (!node) {
        return null;
      }

      var computedStyle = void 0;
      if (global.getComputedStyle) {
        computedStyle = global.getComputedStyle(node);
      }
      if (!computedStyle) {
        return null;
      }

      var centered = this.getCentered();

      return ['top', 'left', 'right', 'bottom'].reduce(function (acc, position) {
        acc[position] = (0, _pxToFloat2.default)(computedStyle[position]);
        if (centered === true || centered === 'horizontal' && (position == 'left' || position == 'right') || centered === 'vertical' && (position == 'top' || position == 'bottom')) {
          var oldValue = acc[position];
          // if we are centered, marginTop is really the value for top, ...etc
          var newValue = (0, _pxToFloat2.default)(computedStyle['margin' + (0, _toUpperFirst2.default)(position)]);

          // in FF, oldValue is not 0, but newValue is 0, so treat this separately
          if (oldValue && !newValue) {
            // skip FF
          } else {
            acc[position] = newValue;
          }
        }
        if (computedStyle[position] === 'auto') {
          // tablet fix
          acc[position] = _this11.node['offset' + position[0].toUpperCase() + position.slice(1)];

          if (acc[position] === undefined) {
            var offsetParent = node.offsetParent || global;
            var offfsetParentWidth = offsetParent.offsetWidth || offsetParent.innerWidth;
            var offfsetParentHeight = offsetParent.offsetHeight || offsetParent.innerHeight;
            if (position === 'right') {
              acc[position] = offfsetParentWidth - node.offsetLeft + (0, _pxToFloat2.default)(computedStyle.width);
            }
            if (position === 'bottom') {
              acc[position] = offfsetParentHeight - node.offsetTop + (0, _pxToFloat2.default)(computedStyle.height);
            }
          }
        }
        return acc;
      }, {});
    }

    /**
     * The difference between this and this.getPosition
     * is that this reads it from the dom
     * and this.getPosition is stored position from
     * state or props
     * @instance getComputedStylePosition
     * @instance getNormalizedPosition
     * @return actualPosition
     */

  }, {
    key: 'getActualPosition',
    value: function getActualPosition() {
      return this.getNormalizedPosition(this.getComputedStylePosition());
    }

    /**
     * Setups a config object for resize
     * It is used when a handle is dragged
     * but also when the window must
     * be constrained
     * @instance props
     * @param {Object} config
     */

  }, {
    key: 'getResizeDefaultConfig',
    value: function getResizeDefaultConfig(_ref7) {
      var handle = _ref7.handle,
          constrainRegion = _ref7.constrainRegion,
          region = _ref7.region;

      var props = this.props;

      var config = {
        keepAspectRatio: props.keepAspectRatio,
        horizontalResizeOnly: props.horizontalResizeOnly,
        verticalResizeOnly: props.verticalResizeOnly,
        constrainRegion: constrainRegion,
        activeHandle: handle,
        initialComputedStylePosition: this.getComputedStylePosition(),
        sizeContraints: (0, _getMinMaxSize2.default)(props),
        initialResizeRegion: region
      };

      if (props.keepAspectRatio) {
        config.aspectRatio = (region.width / region.height).toFixed(props.aspectRatioPrecision) * 1;
      }

      return config;
    }

    /**
     * Ajust position and computed style when is centered.
     * Because it is translated -50% on both axex.
     * Note! it mutates
     * @param {Region} region
     * @param {Object} computedStylePosition
     * @return {Void}
     */

  }, {
    key: 'adjustCenteredPosition',
    value: function adjustCenteredPosition(_ref8, computedStylePosition) {
      var width = _ref8.width,
          height = _ref8.height;

      var centered = this.getCentered();
      var verticalAjust = 0;
      var horizontalAjust = 0;

      if (centered !== 'horizontal') {
        computedStylePosition.top -= verticalAjust;
        computedStylePosition.bottom += verticalAjust;
      }

      if (centered !== 'vertical') {
        computedStylePosition.left -= horizontalAjust;
        computedStylePosition.right += horizontalAjust;
      }
    }
  }, {
    key: 'getRelativeRegion',
    value: function getRelativeRegion() {
      return (0, _getRelativeRegion3.default)(this.node);
    }
  }, {
    key: 'getRegion',
    value: function getRegion(domNode) {
      return _region2.default.from(domNode || this.node);
    }
  }, {
    key: 'getTitleRegion',
    value: function getTitleRegion(domNode) {
      return _region2.default.from(domNode || this.titleBarNode);
    }
  }, {
    key: 'getConstrainRegion',
    value: function getConstrainRegion(props) {
      props = props || this.props;
      return (0, _getConstrainRegion3.default)(props.constrainTo, this.node);
    }

    /**
     * Can be the entire window or only the title region
     */

  }, {
    key: 'getDragRegion',
    value: function getDragRegion() {
      return this.props.constrainTitleOnly ? this.getTitleRegion() : this.getRegion();
    }
  }, {
    key: 'getCaptureTabNavigation',
    value: function getCaptureTabNavigation() {
      var captureTabNavigation = this.props.captureTabNavigation;

      if (captureTabNavigation === undefined) {
        if (this.props.modal === true) {
          captureTabNavigation = true;
        } else {
          captureTabNavigation = false;
        }
      }

      return captureTabNavigation;
    }
  }, {
    key: 'getVisible',
    value: function getVisible() {
      return this.state.visible;
    }
  }, {
    key: 'isVisible',
    value: function isVisible() {
      return this.props.visible != null ? this.props.visible : this.state.visible;
    }

    // maxmized

  }, {
    key: 'isMaximizedControlled',
    value: function isMaximizedControlled() {
      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props;

      return props.maximized !== undefined;
    }
  }, {
    key: 'getMaximized',
    value: function getMaximized() {
      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props;

      return this.isMaximizedControlled(props) ? props.maximized : this.state.maximized;
    }
  }, {
    key: 'setMaximized',
    value: function setMaximized(maximized) {
      if (!this.props.maximizable) {
        return null;
      }

      if (!this.isMaximizedControlled()) {
        this.setState({
          maximized: maximized
        });
        this.handleMaximizedChange(maximized);
      }

      if (maximized) {
        this.props.onMaximize(maximized);
      } else {
        this.props.onRestore(maximized);
      }

      this.props.onMaximizeChange(maximized);
    }
  }, {
    key: 'toggleMaximized',
    value: function toggleMaximized() {
      this.setMaximized(!this.getMaximized());
    }

    // centered

  }, {
    key: 'isCenteredControlled',
    value: function isCenteredControlled() {
      return this.props.centered !== undefined;
    }
  }, {
    key: 'getCentered',
    value: function getCentered() {
      return this.isCenteredControlled() ? this.props.centered : this.state.centered;
    }
  }, {
    key: 'setCentered',
    value: function setCentered(centered) {
      if (!this.isCenteredControlled()) {
        this.setState({
          centered: centered
        });
      }

      this.props.onCenteredChange(centered);
    }

    // collapsed

  }, {
    key: 'isCollapsedControlled',
    value: function isCollapsedControlled() {
      return this.props.collapsed !== undefined;
    }
  }, {
    key: 'setCollapsed',
    value: function setCollapsed(collapsed) {
      if (!this.isCollapsedControlled()) {
        this.setState({ collapsed: collapsed });
      }

      if (collapsed) {
        this.props.onCollapse();
      } else {
        this.props.onExpand();
      }

      this.props.onCollapseChange(collapsed);
    }
  }, {
    key: 'getCollapsed',
    value: function getCollapsed() {
      return this.isCollapsedControlled() ? this.props.collapsed : this.state.collapsed;
    }
  }, {
    key: 'expand',
    value: function expand() {
      this.setCollapsed(false);
    }
  }, {
    key: 'collapse',
    value: function collapse() {
      this.setCollapsed(true);
    }

    // relativeToViewport

  }, {
    key: 'isRelativeToViewportControlled',
    value: function isRelativeToViewportControlled() {
      return this.props.relativeToViewport !== undefined;
    }
  }, {
    key: 'getRelativeToViewport',
    value: function getRelativeToViewport() {
      if (this.props.relativeToViewportWhenMaximized && this.getMaximized()) {
        return true;
      }
      return this.isRelativeToViewportControlled() ? this.props.relativeToViewport : this.state.relativeToViewport;
    }
  }, {
    key: 'setRelativeToViewport',
    value: function setRelativeToViewport(relativeToViewport) {
      if (!this.isRelativeToViewportControlled()) {
        this.setState({ relativeToViewport: relativeToViewport });
        this.updatePositionWithOffsetParentChange(relativeToViewport);
      }

      this.props.onRelativeToViewportChange(relativeToViewport);
    }
  }, {
    key: 'updatePositionWithOffsetParentChange',
    value: function updatePositionWithOffsetParentChange(relativeToViewport) {
      if (this.props.shouldUpdatePositionWithOffsetParentChange === false) {
        return;
      }
      var offsetParent = (0, _getOffsetParent2.default)(this.node);
      var parentWithTranslate = (0, _getParentWithTranslate2.default)(this.node);
      var viewportRegion = (0, _getViewportRegion2.default)();

      var finalRegion = void 0;
      var initialRegion = void 0;

      // from absolute to fixed
      if (relativeToViewport) {
        initialRegion = offsetParent;
        finalRegion = parentWithTranslate || viewportRegion;

        // from fixed to absolute
      } else {
        initialRegion = parentWithTranslate || viewportRegion;
        finalRegion = offsetParent;
      }

      initialRegion = _region2.default.from(initialRegion);
      finalRegion = _region2.default.from(finalRegion);

      var newPosition = (0, _getPositionRelativeToNewRegion2.default)({
        initialPosition: this.getComputedStylePosition(),
        finalRegion: finalRegion,
        initialRegion: initialRegion
      });

      this.setPosition(this.getNormalizedPosition(newPosition));
    }

    // animation

  }, {
    key: 'handleVisibleChange',
    value: function handleVisibleChange(visible) {
      if (visible) {
        // bring a window to front when it becomes visible
        this.bringToFront();
      } else {
        this.sendToBack();
      }
      if (!this.props.transition) {
        this.setState({ visible: visible });
        return null;
      }

      if (visible) {
        this.setupEnterTransition();
      } else {
        this.setupLeaveTransition();
      }
    }
  }, {
    key: 'handleMaximizedChange',
    value: function handleMaximizedChange(maximized) {
      if (maximized) {
        this.setupMaxmizeTransition();
      } else {
        this.setupRestoreTransition();
      }
    }
  }, {
    key: 'close',
    value: function close() {
      this.props.onClose();
      // if visible is undefined, toggle visible
      if (this.props.visible === undefined && this.state.visible !== false) {
        this.handleVisibleChange(false);
      }
    }
  }, {
    key: 'show',
    value: function show() {
      this.props.onShow();
      if (this.props.visible === undefined && this.state.visible !== true) {
        this.handleVisibleChange(true);
      }
    }
  }, {
    key: 'setupEnterTransition',
    value: function setupEnterTransition() {
      var _this12 = this;

      this.setState({
        visible: true,
        transitionEnter: true,
        transitionEnterActive: false,

        // reset leave
        transitionLeave: false,
        transitionLeaveActive: false
      }, function () {
        raf(function () {
          if (_this12.componentIsMounted) {
            _this12.setState({
              transitionEnterActive: true
            });
          }
        });
      });
    }
  }, {
    key: 'setupLeaveTransition',
    value: function setupLeaveTransition() {
      var _this13 = this;

      this.setState({
        transitionLeave: true,
        transitionLeaveActive: false,

        // reset enter
        transitionEnter: false,
        transitionEnterActive: false
      }, function () {
        raf(function () {
          if (!_this13.componentIsMounted) {
            return;
          }
          _this13.setState({
            transitionLeaveActive: true
          }, function () {
            setTimeout(function () {
              if (!_this13.componentIsMounted) {
                return;
              }
              _this13.setState({
                visible: false,
                transitionLeave: false,
                transitionLeaveActive: false
              });
            }, _this13.props.hideTransitionDuration);
          });
        });
      });
    }
  }, {
    key: 'setupMaxmizeTransition',
    value: function setupMaxmizeTransition() {
      var _this14 = this;

      this.positionBeforeMaximize = this.getComputedStylePosition();

      this.setState({
        transitionMaximizeEnter: true,
        transitionMaximizeEnterActive: false,

        transitionRestoreEnter: false,
        transitionRestoreEnterActive: false
      }, function () {
        raf(function () {
          if (!_this14.componentIsMounted) {
            return;
          }
          _this14.setState({
            transitionMaximizeEnterActive: true
          });
        });
      });
    }
  }, {
    key: 'setupRestoreTransition',
    value: function setupRestoreTransition() {
      var _this15 = this;

      this.setState({
        transitionRestoreEnter: true,
        transitionRestoreEnterActive: false,

        transitionMaximizeEnter: false,
        transitionMaximizeEnterActive: false
      }, function () {
        raf(function () {
          if (!_this15.componentIsMounted) {
            return;
          }
          _this15.setState({
            transitionRestoreEnterActive: true
          }, function () {
            if (!_this15.componentIsMounted) {
              return;
            }
            setTimeout(function () {
              _this15.setState({
                transitionRestoreEnter: false,
                transitionRestoreEnterActive: false,
                transitionMaximizeEnter: false,
                transitionMaximizeEnterActive: false
              });
            }, 300);
          });
        });
      });
    }

    // window on resize

  }, {
    key: 'setupWindowResizeListener',
    value: function setupWindowResizeListener() {
      if (this.props.constrainTo && !this.windowResizeListener) {
        this.windowResizeListener = (0, _throttle2.default)(this.onWindowResize, this.props.constrainOnWindowResizeDelay);
        global.addEventListener('resize', this.windowResizeListener, false);
      }
    }
  }, {
    key: 'setupWindowScrollListener',
    value: function setupWindowScrollListener() {
      if (this.props.constrainTo && !this.windowScrollListener) {
        this.windowScrollListener = (0, _throttle2.default)(this.onWindowScroll, this.props.constrainOnWindowScrollDelay);
        global.addEventListener('scroll', this.windowScrollListener, false);
      }
    }
  }, {
    key: 'detachWindowResizeListener',
    value: function detachWindowResizeListener() {
      window.removeEventListener('resize', this.windowResizeListener);
      this.windowResizeListener = null;
    }
  }, {
    key: 'detachWindowScrollListener',
    value: function detachWindowScrollListener() {
      if (this.windowScrollListener) {
        window.removeEventListener('resize', this.windowScrollListener);
      }
      this.windowScrollListener = null;
    }
  }, {
    key: 'onWindowResize',
    value: function onWindowResize() {
      this.checkFitToConstrain();
    }
  }, {
    key: 'onWindowScroll',
    value: function onWindowScroll() {
      this.checkFitToConstrain();
    }

    // layer manager

  }, {
    key: 'register',
    value: function register() {
      this.id = this.getManager().register(this, this.props.nameSpace);
    }
  }, {
    key: 'unRegister',
    value: function unRegister() {
      this.getManager().unRegister(this.getId(), this.props.nameSpace);
    }
  }, {
    key: 'getManager',
    value: function getManager() {
      return this.props.manager || _manager2.default;
    }
  }, {
    key: 'setZIndex',
    value: function setZIndex(_ref9) {
      var zIndex = _ref9.zIndex,
          isTop = _ref9.isTop,
          isTopModal = _ref9.isTopModal;

      if (isTop != undefined) {
        this.setState({ isTop: isTop });
      }
      if (isTopModal != undefined) {
        this.setState({ isTopModal: isTopModal });
      }
      if (zIndex != undefined) {
        var newZIndex = zIndex + this.props.startFromZIndex;
        this.setState({ zIndex: newZIndex });
      }
    }
  }, {
    key: 'getId',
    value: function getId() {
      return this.id;
    }
  }, {
    key: 'refreshZIndex',
    value: function refreshZIndex() {
      this.getManager().refreshWindow(this.getId(), this.props.nameSpace);
    }

    // methods

  }, {
    key: 'bringToFront',
    value: function bringToFront() {
      this.getManager().bringToFront(this.id, this.props.nameSpace);
      return this;
    }
  }, {
    key: 'sendToBack',
    value: function sendToBack() {
      this.getManager().sendToBack(this.id, this.props.nameSpace);
      return this;
    }
  }, {
    key: 'sendBackwards',
    value: function sendBackwards() {
      this.getManager().sendBackwards(this.id, this.props.nameSpace);
      return this;
    }
  }, {
    key: 'bringForwards',
    value: function bringForwards() {
      this.getManager().bringForwards(this.id, this.props.nameSpace);
      return this;
    }
  }, {
    key: 'maximize',
    value: function maximize() {
      this.setMaximized(true);
      return this;
    }
  }, {
    key: 'restore',
    value: function restore() {
      this.setMaximized(false);
      return this;
    }
  }, {
    key: 'center',
    value: function center() {
      this.setCentered(true);
      return this;
    }
  }, {
    key: 'focus',
    value: function focus() {
      if (this.node) {
        this.node.focus();
      }
    }
  }, {
    key: 'hasGeneralFocus',
    value: function hasGeneralFocus() {
      return this.hasChildFocus() || this.hasFocus();
    }
  }, {
    key: 'hasChildFocus',
    value: function hasChildFocus() {
      return (0, _containsNode2.default)(this.node, global.document && global.document.activeElement);
    }
  }, {
    key: 'hasFocus',
    value: function hasFocus() {
      return this.node === (global.document && global.document.activeElement);
    }

    // arrows navigation

  }, {
    key: 'handleKeyBoardNavigation',
    value: function handleKeyBoardNavigation(event) {
      var mapping = {
        ArrowUp: 'up',
        ArrowDown: 'down',
        ArrowLeft: 'left',
        ArrowRight: 'right'
      };
      var direction = mapping[event.key];
      if (event.ctrlKey || event.metaKey) {
        event.stopPropagation();
        this.handleWindowResizeWithKeys(direction);
      } else {
        this.handleWindowMoveWithKeys(direction);
      }
    }
  }, {
    key: 'handleWindowResizeWithKeys',
    value: function handleWindowResizeWithKeys(direction) {
      if (!this.props.enableKeyboardSizeChange) {
        return;
      }
      var position = this.getValidNormalizedPosition();
      var region = this.getRegion();
      var initialSize = {
        width: region.width,
        height: region.height
      };

      var _updateSizeWithDirect = (0, _updateSizeWithDirection2.default)({
        position: position,
        size: initialSize,
        step: this.props.keyboardSizeChangeStep,
        direction: direction
      }),
          newSize = _updateSizeWithDirect.size,
          newPosition = _updateSizeWithDirect.position;

      this.setPosition(newPosition);
      this.setSize(newSize);
    }
  }, {
    key: 'handleWindowMoveWithKeys',
    value: function handleWindowMoveWithKeys(direction) {
      if (!this.props.enableKeyboardPositionChange) {
        return;
      }

      var step = this.props.keyboardPositionChangeStep;
      var shift = { left: 0, top: 0 };
      if (direction === 'up') {
        shift.top -= step;
      }
      if (direction === 'down') {
        shift.top += step;
      }
      if (direction === 'left') {
        shift.left -= step;
      }
      if (direction === 'right') {
        shift.left += step;
      }

      var position = this.getComputedStylePosition();
      var originalRegion = this.getRegion();
      var region = this.getRegion().clone();
      var constrain = this.getConstrainRegion();

      region.shift(shift);
      region.constrainTo(constrain);

      var newPosition = this.getDiffPosition({
        top: region.top - originalRegion.top,
        left: region.left - originalRegion.left
      }, position);

      newPosition = this.getNormalizedPosition(newPosition);
      this.setPosition(newPosition);
    }
  }]);

  return ZippyWindow;
}(_react.Component);

ZippyWindow.propTypes = {
  border: _propTypes2.default.string,
  shadow: _propTypes2.default.bool,
  borderRadius: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number, _propTypes2.default.bool]),
  autofocus: _propTypes2.default.bool,
  autoFocus: _propTypes2.default.bool,
  url: _propTypes2.default.string,
  enableMoveProxy: _propTypes2.default.bool,
  keepChildrenOnMove: _propTypes2.default.bool,

  // animation
  transition: _propTypes2.default.bool,
  hideTransitionDuration: _propTypes2.default.number,
  showTransitionDuration: _propTypes2.default.number,

  // stacking and modal
  manager: _propTypes2.default.object,
  nameSpace: _propTypes2.default.string, // used for stacking, not documented
  startFromZIndex: _propTypes2.default.number, // not documented

  // title
  titlePosition: _propTypes2.default.oneOf(['start', 'end']),
  renderToolBar: _propTypes2.default.func,
  toolbarButtons: _propTypes2.default.oneOfType([_propTypes2.default.node, _propTypes2.default.arrayOf(_propTypes2.default.node)]),

  // misc
  captureTabNavigation: _propTypes2.default.bool,

  // events
  onMount: _propTypes2.default.func,
  onBlur: _propTypes2.default.func,
  onFocus: _propTypes2.default.func,

  // centered
  centered: _propTypes2.default.oneOfType([_propTypes2.default.bool, _propTypes2.default.oneOf(['vertical', 'horizontal'])]),
  defaultCentered: _propTypes2.default.oneOfType([_propTypes2.default.bool, _propTypes2.default.oneOf(['vertical', 'horizontal'])]),
  onCenteredChange: _propTypes2.default.func,
  keepCenteredOnResize: _propTypes2.default.bool,

  // size
  size: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.object, _propTypes2.default.number]),
  defaultSize: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.object, _propTypes2.default.number]),
  onResize: _propTypes2.default.func,
  onResizeStart: _propTypes2.default.func,
  onResizeStop: _propTypes2.default.func,
  onResizeDrag: _propTypes2.default.func,
  minSize: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string, _propTypes2.default.shape({
    height: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]),
    width: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string])
  })]),
  maxSize: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string, _propTypes2.default.shape({
    height: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]),
    width: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string])
  })]),
  resizable: _propTypes2.default.oneOfType([_propTypes2.default.bool, _propTypes2.default.object]),

  // proxy
  enableResizeProxy: _propTypes2.default.bool,

  // display
  enableRelativeToViewportToggle: _propTypes2.default.bool,
  relativeToViewport: _propTypes2.default.bool,
  relativeToViewportWhenMaximized: _propTypes2.default.bool,
  defaultRelativeToViewport: _propTypes2.default.bool,
  onRelativeToViewportChange: _propTypes2.default.func,
  pinUpIconSize: _propTypes2.default.number,
  pinDownIconSize: _propTypes2.default.number,
  pinUpIcon: _propTypes2.default.oneOfType([_propTypes2.default.node, _propTypes2.default.func]),
  pinDownIcon: _propTypes2.default.oneOfType([_propTypes2.default.node, _propTypes2.default.func]),
  renderPinButton: _propTypes2.default.func,

  // visibility
  visible: _propTypes2.default.bool,
  renderNullWhenInvisible: _propTypes2.default.bool,
  defaultVisible: _propTypes2.default.bool,

  // domWrite
  useDirectDomPositionSizeChange: _propTypes2.default.bool,

  // position/move
  onMove: _propTypes2.default.func,
  onPositionChange: _propTypes2.default.func,
  onMoveStart: _propTypes2.default.func,
  onMoveStop: _propTypes2.default.func,
  position: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.object]),
  defaultPosition: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.object]),
  draggable: _propTypes2.default.oneOfType([_propTypes2.default.bool, _propTypes2.default.object]),
  aspectRatioPrecision: _propTypes2.default.number,
  keepAspectRatio: _propTypes2.default.bool,

  // constrain relation to size/position
  constrainOnWindowResize: _propTypes2.default.bool,
  keepPositionOnConstrain: _propTypes2.default.bool,
  keepSizeOnConstrain: _propTypes2.default.bool,
  constrainOnWindowScroll: _propTypes2.default.bool,

  // constrains
  constrainTitleOnly: _propTypes2.default.bool,
  constrainTo: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.node, _propTypes2.default.bool, _propTypes2.default.object]),
  constrainOnWindowResizeDelay: _propTypes2.default.number,
  constrainOnWindowScrollDelay: _propTypes2.default.number,

  // maximize
  maximizable: _propTypes2.default.bool,
  maximizeOnDoubleClick: _propTypes2.default.bool,
  maximizeIconSize: _propTypes2.default.number,
  maximized: _propTypes2.default.bool,
  defaultMaximized: _propTypes2.default.bool,
  maximizeIcon: _propTypes2.default.oneOfType([_propTypes2.default.node, _propTypes2.default.func]),
  restoreIcon: _propTypes2.default.oneOfType([_propTypes2.default.node, _propTypes2.default.func]),
  restoreIconSize: _propTypes2.default.number,
  onMaximizeChange: _propTypes2.default.func,
  onMaximize: _propTypes2.default.func,
  onRestore: _propTypes2.default.func,
  maximizeTransition: _propTypes2.default.bool,
  renderMaximizeButton: _propTypes2.default.func,

  shouldUpdatePositionWithOffsetParentChange: _propTypes2.default.bool,

  // closeable
  closeable: _propTypes2.default.bool,
  onClose: _propTypes2.default.func,
  onShow: _propTypes2.default.func,
  closeIcon: _propTypes2.default.oneOfType([_propTypes2.default.node, _propTypes2.default.func]),
  closeIconSize: _propTypes2.default.number,
  renderCloseButton: _propTypes2.default.func,

  // collapsible
  collapsed: _propTypes2.default.bool,
  defaultCollapsed: _propTypes2.default.bool,
  collapsible: _propTypes2.default.bool,
  onCollapse: _propTypes2.default.func,
  onCollapseChange: _propTypes2.default.func,
  onExpand: _propTypes2.default.func,
  collapseIconSize: _propTypes2.default.number,
  expandIconSize: _propTypes2.default.number,
  expandIcon: _propTypes2.default.node,
  collapseIcon: _propTypes2.default.node,
  renderCollapseButton: _propTypes2.default.func,

  // handles
  handleStyle: _propTypes2.default.object,
  showHandlesOnOver: _propTypes2.default.bool,
  handleWidth: _propTypes2.default.number,
  mobileHandleWidth: _propTypes2.default.number,
  resizeHandles: _propTypes2.default.oneOfType([_propTypes2.default.bool, _propTypes2.default.array]),
  handlesOutside: _propTypes2.default.bool,
  mobileHandlesOutside: _propTypes2.default.bool,
  renderResizeHandle: _propTypes2.default.func,
  mobileHandleConfig: _propTypes2.default.object,
  handleConfig: _propTypes2.default.object,

  // modal
  modal: _propTypes2.default.bool,

  // body
  bodyStyle: _propTypes2.default.object,
  bodyPadding: _propTypes2.default.number,
  bodyClassName: _propTypes2.default.string,
  bodyBorder: _propTypes2.default.string,
  bodyScrollable: _propTypes2.default.bool,

  // keyboard navigation
  enableKeyboardPositionChange: _propTypes2.default.bool,
  enableKeyboardSizeChange: _propTypes2.default.bool,
  keyboardSizeChangeStep: _propTypes2.default.number,
  keyboardPositionChangeStep: _propTypes2.default.number,

  // title
  titleStyle: _propTypes2.default.object,
  titleClassName: _propTypes2.default.string
};

ZippyWindow.defaultProps = {
  // stacking and modal
  manager: _manager2.default,
  nameSpace: 'all',
  startFromZIndex: 100,
  enableMoveProxy: true,
  keepChildrenOnMove: true,

  onMount: emptyFn,
  rootClassName: 'zippy-react-toolkit-window',
  theme: 'default',
  shadow: undefined,
  borderRadius: 0,
  autofocus: false,
  autoFocus: false,
  onBlur: emptyFn,
  onFocus: emptyFn,

  useDirectDomPositionSizeChange: true,

  // animation
  transition: true,
  hideTransitionDuration: 300,
  showTransitionDuration: 300,

  // display
  defaultRelativeToViewport: false,
  enableRelativeToViewportToggle: false,
  relativeToViewportWhenMaximized: true,
  pinUpIconSize: 21,
  pinDownIconSize: 21,
  onRelativeToViewportChange: emptyFn,

  // title
  titlePosition: 'start',
  titleStyle: {},
  titleBarPosition: 'top',

  // visibility
  defaultVisible: true,
  renderNullWhenInvisible: false,

  // size
  onResizeStart: emptyFn,
  onResizeStop: emptyFn,
  onResizeDrag: emptyFn,
  onResize: emptyFn,
  enableResizeProxy: true,

  onMoveStart: emptyFn,
  onMoveStop: emptyFn,
  onPositionChange: emptyFn,
  onMaximizeChange: emptyFn,
  onMaximize: emptyFn,
  onRestore: emptyFn,

  // position
  position: null,

  // size
  size: null,
  defaultSize: { width: 300, height: 200 },
  minSize: 200,

  // maximized
  maximizable: true,
  defaultMaximized: false,
  maximizeTransition: false,
  maximizeOnDoubleClick: true,
  maximizeIconSize: 21,
  restoreIconSize: 21,

  // closeable
  closeable: true,
  onClose: emptyFn,
  onShow: emptyFn,
  closeIconSize: 21,

  // collapsible
  collapsible: true,
  defaultCollapsed: false,
  onCollapse: emptyFn,
  onExpand: emptyFn,
  onCollapseChange: emptyFn,
  collapseIconSize: 18,
  expandIconSize: 18,

  // resize
  aspectRatioPrecision: 5,
  keepAspectRatio: false,
  resizeHandles: true,
  resizable: true,
  draggable: true,

  // handles
  handleWidth: 5,
  mobileHandleWidth: 30,
  handleStyle: null,
  showHandlesOnOver: true,
  renderResizeHandle: emptyFn,
  handlesOutside: false,
  mobileHandlesOutside: false,

  // constrains
  constrainTo: true,
  constrainTitleOnly: false,

  // centered
  defaultCentered: false,
  onCenteredChange: emptyFn,
  keepCenteredOnResize: true,

  // modal
  modal: false,

  // constrain relation to size/position
  constrainOnWindowResizeDelay: 16,
  constrainOnWindowScrollDelay: 16,
  constrainOnWindowResize: false,
  keepPositionOnConstrain: false,
  keepSizeOnConstrain: false,
  constrainOnWindowScroll: false,

  // body
  bodyStyle: null,
  bodyPadding: 10,
  bodyClassName: '',
  bodyScrollable: true,

  // keyboard navigation
  enableKeyboardPositionChange: true,
  enableKeyboardSizeChange: true,

  keyboardSizeChangeStep: 10,
  keyboardPositionChangeStep: 10
};

exports.default = ZippyWindow;
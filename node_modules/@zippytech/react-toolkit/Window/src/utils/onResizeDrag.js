'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _computeXYDiff = require('./computeXYDiff');

var _computeXYDiff2 = _interopRequireDefault(_computeXYDiff);

var _positionResizableProxy = require('./positionResizableProxy');

var _positionResizableProxy2 = _interopRequireDefault(_positionResizableProxy);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Copyright (c) 2015-present, Zippy Technologies
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var abs = Math.abs;
var signum = function signum(v) {
  return v === 0 ? 1 : v < 0 ? -1 : 1;
};

function onResizeDrag(config) {
  var xDiff = config.diff.left;
  var yDiff = config.diff.top;

  if (config.horizontalResizeOnly) {
    yDiff = 0;
  }

  if (config.verticalResizeOnly) {
    xDiff = 0;
  }

  var activeHandle = config.activeHandle;
  var region = config.initialResizeRegion;
  var handleName = activeHandle.name;

  var handleX = activeHandle.x;
  var handleY = activeHandle.y;

  var sizeContraints = config.sizeContraints;
  var constrainRegion = config.constrainRegion;

  var originalHandleX = handleX;
  var originalHandleY = handleY;

  var absX = abs(xDiff);
  var absY = abs(yDiff);

  var signX = xDiff ? xDiff / absX : 1;
  var signY = yDiff ? yDiff / absY : 1;

  var result = void 0;

  var clonedRegion = region.clone();
  var keepAspectRatio = config.keepAspectRatio;
  var aspectRatio = config.aspectRatio;
  var regionWidth = clonedRegion.width;
  var regionHeight = clonedRegion.height;

  // protect against very quick resize and make sure the resize still happens, to the min size
  xDiff = handleX > 0 ? Math.max(xDiff, -regionWidth) : Math.min(xDiff, regionWidth);

  yDiff = handleY > 0 ? Math.max(yDiff, -regionHeight) : Math.min(yDiff, regionHeight);

  // process the aspect ratio details
  if (keepAspectRatio) {
    result = (0, _computeXYDiff2.default)(xDiff, yDiff, handleX, handleY, handleName, aspectRatio);

    xDiff = result[0];
    yDiff = result[1];

    handleX = result[2];
    handleY = result[3];

    signX = signum(xDiff);
    signY = signum(yDiff);
  } else {
    // top/bottom/left/right handles, so make the other diff zero
    if (!handleX) {
      xDiff = 0;
    }

    if (!handleY) {
      yDiff = 0;
    }
  }

  var positionXResult = void 0;
  var positionYResult = void 0;

  if (xDiff) {
    positionXResult = (0, _positionResizableProxy2.default)(xDiff, handleX, clonedRegion, ['left', 'right'], 'width', sizeContraints, constrainRegion);
  }

  if (keepAspectRatio && positionXResult && positionXResult.constrained) {
    // x was constrained, so we need to recompute the value of yDiff, taking into account the new value of xDiff
    xDiff = signX * abs(positionXResult.addValue);

    result = (0, _computeXYDiff2.default)(xDiff, yDiff, originalHandleX, originalHandleY, handleName, aspectRatio, true /*forceXDominate */
    );

    xDiff = result[0];
    yDiff = result[1];

    handleX = result[2];
    handleY = result[3];

    signY = signum(yDiff);
  }

  if (yDiff) {
    positionYResult = (0, _positionResizableProxy2.default)(yDiff, handleY, clonedRegion, ['top', 'bottom'], 'height', sizeContraints, constrainRegion);
  }

  if (keepAspectRatio && positionYResult && positionXResult && positionYResult.constrained) {
    // restore to position before x transform and add the y transforms
    clonedRegion.set(positionXResult.restore).shift(positionYResult.shiftObject).add(positionYResult.addObject);

    // y was constrained, so we need to recompute the value of xDiff,
    // taking into account the new value of yDiff
    yDiff = signY * abs(positionYResult.addValue);

    result = (0, _computeXYDiff2.default)(xDiff, yDiff, handleX, handleY, handleName, aspectRatio, false, true /* forceYDominate */
    );

    xDiff = result[0];
    handleX = result[2];

    (0, _positionResizableProxy2.default)(xDiff, handleX, clonedRegion, ['left', 'right'], 'width', sizeContraints, constrainRegion);
  }

  if (clonedRegion) {
    return clonedRegion;
  }

  return null;
}

exports.default = onResizeDrag;
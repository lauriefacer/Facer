'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

/**
 * Copyright (c) 2015-present, Zippy Technologies
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

function updateSizeWithDirection(_ref) {
  var position = _ref.position,
      size = _ref.size,
      direction = _ref.direction,
      _ref$step = _ref.step,
      step = _ref$step === undefined ? 10 : _ref$step;

  var newPosition = _extends({}, position);
  var newSize = _extends({}, size);
  // top means height smaller
  // position changes if position has bottom
  if (direction === 'up') {
    newSize.height -= step;
    if (position.bottom !== undefined) {
      newPosition.bottom += step;
    }
  }

  // down means height bigger
  // position changes if position has bottom
  if (direction === 'down') {
    newSize.height += step;
    if (position.bottom !== undefined) {
      newPosition.bottom -= step;
    }
  }
  // left means width smaller
  // position changes if position has right
  if (direction === 'left') {
    newSize.width -= step;
    if (position.right !== undefined) {
      newPosition.right += step;
    }
  }
  // right means width bigger
  // position changes if position has right
  if (direction === 'right') {
    newSize.width += step;
    if (position.right !== undefined) {
      newPosition.right -= step;
    }
  }

  return {
    size: newSize,
    position: newPosition
  };
}

exports.default = updateSizeWithDirection;
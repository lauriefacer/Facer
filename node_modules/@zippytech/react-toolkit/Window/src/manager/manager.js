'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _getListDiff = require('./getListDiff');

var _getListDiff2 = _interopRequireDefault(_getListDiff);

var _bringToFront2 = require('./bringToFront');

var _bringToFront3 = _interopRequireDefault(_bringToFront2);

var _sendToBack2 = require('./sendToBack');

var _sendToBack3 = _interopRequireDefault(_sendToBack2);

var _bringForwards2 = require('./bringForwards');

var _bringForwards3 = _interopRequireDefault(_bringForwards2);

var _sendBackwards2 = require('./sendBackwards');

var _sendBackwards3 = _interopRequireDefault(_sendBackwards2);

var _getTopModalWindow = require('./getTopModalWindow');

var _getTopModalWindow2 = _interopRequireDefault(_getTopModalWindow);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } } /**
                                                                                                                                                                                                     * Copyright (c) 2015-present, Zippy Technologies
                                                                                                                                                                                                     *
                                                                                                                                                                                                     * This source code is licensed under the MIT license found in the
                                                                                                                                                                                                     * LICENSE file in the root directory of this source tree.
                                                                                                                                                                                                     */

/**
 * Manages zIndex for windows
 * - a window registers and gets back an id, that it saves
 * - manager calls windows with it's zIndex when it Registers
 * or when a change in order has happened
 * - zIndex is calculated idList.indexOf(id) + 1 * 10
 */
function manager() {
  var initialId = 0;
  var defaultNameSpace = 'all';
  var step = 10;
  var startFrom = 100;

  var id = initialId;

  return {
    _windows: {},

    updateStartFrom: function updateStartFrom(index) {
      var nameSpace = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultNameSpace;

      startFrom = index;
      this.ajustZIndex(nameSpace, true);
    },
    updateStep: function updateStep(index) {
      var nameSpace = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultNameSpace;

      step = index;
      this.ajustZIndex(nameSpace, true);
    },


    /**
     * Registers window
     * @param {Object} instance
     * @return {Int} Id
     */
    register: function register(instance) {
      var nameSpace = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultNameSpace;

      if (!this._windows[nameSpace]) {
        this._windows[nameSpace] = {
          nameSpace: nameSpace,
          list: [],
          previousList: [],
          instances: {},
          previousTop: null,
          previousTopModal: null
        };
      } else {
        // save in previous
        this.saveCurrentListToPrevious(nameSpace);
      }

      this._windows[nameSpace].instances[id] = instance;
      var newList = [].concat(_toConsumableArray(this.getList(nameSpace)), [id]);

      this.updateList(newList, nameSpace);
      this.ajustZIndex(nameSpace, true);

      var currentId = id;
      id += 1;

      return currentId;
    },
    unRegister: function unRegister(id) {
      var nameSpace = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultNameSpace;

      if (!this._windows[nameSpace].instances[id]) {
        return null;
      }

      // save in previous
      this.saveCurrentListToPrevious(nameSpace);

      delete this._windows[nameSpace].instances[id];
      // filter out id to remove
      var newList = this.getList(nameSpace).reduce(function (acc, el) {
        if (el !== id) {
          acc.push(el);
        }

        return acc;
      }, []);

      this.updateList(newList, nameSpace);
      this.ajustZIndex(nameSpace);

      return true;
    },
    getList: function getList() {
      var nameSpace = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultNameSpace;

      return this._windows[nameSpace].list;
    },
    getInstances: function getInstances() {
      var nameSpace = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultNameSpace;

      return this._windows[nameSpace].instances;
    },
    saveCurrentListToPrevious: function saveCurrentListToPrevious() {
      var nameSpace = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultNameSpace;

      var previousList = this.getPreviousList(nameSpace);
      this._windows[nameSpace].previousList = this.getList(nameSpace);
    },
    getPreviousList: function getPreviousList() {
      var nameSpace = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultNameSpace;

      return this._windows[nameSpace].previousList;
    },
    updateList: function updateList(list) {
      var nameSpace = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultNameSpace;

      this._windows[nameSpace].list = list;
    },
    bringToFront: function bringToFront(id) {
      var nameSpace = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultNameSpace;

      var newList = (0, _bringToFront3.default)(id, this.getList(nameSpace));

      this.saveCurrentListToPrevious(nameSpace);
      this.updateList(newList, nameSpace);
      this.ajustZIndex(nameSpace);
    },
    sendToBack: function sendToBack(id) {
      var nameSpace = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultNameSpace;

      var newList = (0, _sendToBack3.default)(id, this.getList(nameSpace));

      this.saveCurrentListToPrevious(nameSpace);
      this.updateList(newList, nameSpace);
      this.ajustZIndex(nameSpace);
    },
    bringForwards: function bringForwards(id) {
      var nameSpace = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultNameSpace;

      var newList = (0, _bringForwards3.default)(id, this.getList(nameSpace));

      this.saveCurrentListToPrevious(nameSpace);
      this.updateList(newList, nameSpace);
      this.ajustZIndex(nameSpace);
    },
    sendBackwards: function sendBackwards(id) {
      var nameSpace = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultNameSpace;

      var newList = (0, _sendBackwards3.default)(id, this.getList(nameSpace));

      this.saveCurrentListToPrevious(nameSpace);
      this.updateList(newList, nameSpace);
      this.ajustZIndex(nameSpace);
    },


    /**
     * Checks list with previusList to see
     * what has changed. Changed windows,
     * that are not in the same position
     * in the list will be called with window.setZIndex
     * to update their zIndexes
     * @param {Object} registered windows
     * @param {Boolean} ajustAll - wether to update all windows
     * @instance getListDiff
     * @return {Bool} true if something changed, false if not
     */
    ajustZIndex: function ajustZIndex() {
      var _this = this;

      var nameSpace = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultNameSpace;
      var ajustAll = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

      var _getWindows = this.getWindows(nameSpace),
          list = _getWindows.list,
          previousList = _getWindows.previousList,
          instances = _getWindows.instances;

      var changedWindows = ajustAll ? list : (0, _getListDiff2.default)(list, previousList);

      changedWindows.forEach(function (id) {
        return _this.refreshWindow(id, nameSpace);
      });
    },
    refreshWindow: function refreshWindow(id) {
      var nameSpace = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultNameSpace;

      var _getWindows2 = this.getWindows(nameSpace),
          list = _getWindows2.list,
          previousList = _getWindows2.previousList,
          instances = _getWindows2.instances;

      var topWindow = list[list.length - 1];
      var topModalWindow = (0, _getTopModalWindow2.default)(list, this.getInstances(nameSpace));
      var instance = instances[id];

      if (instance && instance.setZIndex) {
        var zIndex = this.getZIndex(id, nameSpace);
        var isTop = id === topWindow;
        var isTopModal = id === topModalWindow;

        instance.setZIndex({ zIndex: zIndex, isTop: isTop, isTopModal: isTopModal });
      }
    },


    /**
     * It is just it's index inside the list of ids
     * @param {Int} id
     * @return zIndex
     */
    getZIndex: function getZIndex(id) {
      var nameSpace = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultNameSpace;

      if (!this._windows[nameSpace]) {
        return null;
      }
      var windowIndex = this._windows[nameSpace].list.indexOf(id);
      return (windowIndex + 1) * step;
    },


    /**
     * @param {Int} id
     * @param {String} nameSpace?
     * @return {instance} registered instance or null
     */
    getWindow: function getWindow(id) {
      var nameSpace = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultNameSpace;

      var windows = this.getWindows(nameSpace);
      return windows && windows.instances[id] || null;
    },
    getWindows: function getWindows() {
      var nameSpace = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultNameSpace;

      return this._windows[nameSpace];
    },
    reset: function reset() {
      this._windows = {};
      id = initialId;
    }
  };
}

exports.default = manager();
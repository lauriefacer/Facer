'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _autoBind = require('@zippytech/react-class/autoBind');

var _autoBind2 = _interopRequireDefault(_autoBind);

var _assign = require('../../../common/assign');

var _assign2 = _interopRequireDefault(_assign);

var _ExpandTool = require('./ExpandTool');

var _ExpandTool2 = _interopRequireDefault(_ExpandTool);

var _LoadTool = require('./LoadTool');

var _LoadTool2 = _interopRequireDefault(_LoadTool);

var _cleanProps = require('../../../common/cleanProps');

var _cleanProps2 = _interopRequireDefault(_cleanProps);

var _join = require('../../../common/join');

var _join2 = _interopRequireDefault(_join);

var _pxToFloat = require('../../../common/pxToFloat');

var _pxToFloat2 = _interopRequireDefault(_pxToFloat);

var _shouldComponentUpdate2 = require('../../../common/shouldComponentUpdate');

var _shouldComponentUpdate3 = _interopRequireDefault(_shouldComponentUpdate2);

var _CheckBox = require('../../../CheckBox');

var _CheckBox2 = _interopRequireDefault(_CheckBox);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Copyright (c) 2015-present, Zippy Technologies
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * This source code is licensed under the MIT license found in the
file in the root directory of this source tree.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */

var ZippyNode = function (_Component) {
  _inherits(ZippyNode, _Component);

  function ZippyNode(props) {
    _classCallCheck(this, ZippyNode);

    var _this = _possibleConstructorReturn(this, (ZippyNode.__proto__ || Object.getPrototypeOf(ZippyNode)).call(this, props));

    (0, _autoBind2.default)(_this);

    _this.state = {
      showContent: !_this.props.collapsed
    };

    _this.componentIsMounted = true;
    return _this;
  }

  _createClass(ZippyNode, [{
    key: 'shouldComponentUpdate',
    value: function shouldComponentUpdate(nextProps, nextState) {
      return (0, _shouldComponentUpdate3.default)(this, nextProps, nextState);
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      this.componentIsMounted = false;
    }
  }, {
    key: 'UNSAFE_componentWillReceiveProps',
    value: function UNSAFE_componentWillReceiveProps(nextProps) {
      if (nextProps.transition) {
        this.startExpandTransitionIfNecessary(nextProps);
        this.startCollapseTransitionIfNecessary(nextProps);
      } else if (this.props.collapsed !== nextProps.collapsed) {
        this.setState({
          showContent: !nextProps.collapsed
        });
      }
    }
  }, {
    key: 'componentDidUpdate',
    value: function componentDidUpdate(previousProps) {
      if (this.props.transition) {
        this.doExpandTransitionIfNecessary();
        this.doCollapseTransitionIfNecessary();
      }

      if (previousProps.active !== this.props.active && this.props.active && this.props.enableScrollNodeIntoView) {
        this.scrollNodeIntoView();
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _this2 = this;

      var _props = this.props,
          children = _props.children,
          hasChildren = _props.hasChildren,
          node = _props.node,
          domProps = _props.domProps,
          collapsed = _props.collapsed,
          selected = _props.selected,
          active = _props.active,
          disabled = _props.disabled,
          loading = _props.loading,
          checked = _props.checked,
          hidden = _props.hidden,
          path = _props.path,
          rootClassName = _props.rootClassName;

      if (hidden) {
        return null;
      }

      var className = (0, _join2.default)('' + rootClassName, collapsed && rootClassName + '--collapsed', selected && rootClassName + '--selected', hasChildren && rootClassName + '--has-children', active && rootClassName + '--active', checked && rootClassName + '--checked', disabled && rootClassName + '--disabled', loading && rootClassName + '--loading', domProps.className, this.props.node.className);

      var treeLineStyleVertical = typeof this.props.treeLines === 'string' ? { borderLeft: this.props.treeLines } : {};

      if (this.props.nestingIndentation) {
        var direction = this.props.rtl ? 'right' : 'left';
        treeLineStyleVertical[direction] = -(this.props.nestingIndentation - this.props.expandToolSize * 0.5);
      }

      return _react2.default.createElement(
        'div',
        _extends({
          key: 'node_' + path
        }, domProps, {
          className: className,
          onContextMenu: this.onContextMenu,
          ref: function ref(el) {
            return _this2.rootNode = el;
          }
        }),
        this.renderLabel(),
        this.renderContent(),
        !this.props.isLast && this.props.parent && this.props.treeLines && _react2.default.createElement('div', {
          key: 'vertical_' + path,
          className: this.props.rootClassName + '__tree-line__vertical',
          style: treeLineStyleVertical
        })
      );
    }
  }, {
    key: 'onContextMenu',
    value: function onContextMenu(event) {
      var onNodeContextMenu = this.props.onNodeContextMenu;

      event.stopPropagation();
      if (onNodeContextMenu) {
        onNodeContextMenu(this.props, event);
      }
    }
  }, {
    key: 'renderLabel',
    value: function renderLabel() {
      var _this3 = this;

      var path = this.props.path;

      var result = void 0;
      var style = this.props.labelStyle;

      var domProps = {
        style: style,
        className: (0, _join2.default)(this.props.rootClassName + '__label', this.props.labelClassName),
        children: this.renderLabelChildren(),
        onClick: this.onLabelClick,
        onDoubleClick: this.onLabelDoubleClick
      };

      var nodeProps = this.props;
      result = this.props.renderLabel(domProps, nodeProps);
      if (result === undefined) {
        result = _react2.default.createElement('div', _extends({
          key: 'label_' + path
        }, domProps, {
          ref: function ref(node) {
            return _this3.labelNode = node;
          }
        }));
      }

      return result;
    }
  }, {
    key: 'renderIcon',
    value: function renderIcon() {
      var icon = this.props.nodeIcon;

      if (this.props.hasChildren && this.props.collapsed && this.props.nodeCollapsedIcon) {
        icon = this.props.nodeCollapsedIcon;
      }

      if (!this.props.hasChildren && this.props.leafNodeIcon) {
        icon = this.props.leafNodeIcon;
      }

      if (this.props.node.icon) {
        icon = this.props.node.icon;
        icon = typeof icon === 'function' ? icon(this.props) : icon;
      }

      icon = typeof icon === 'string' ? _react2.default.createElement('img', {
        key: 'icon',
        className: this.props.rootClassName + '__icon-img',
        src: icon
      }) : icon;

      if (this.props.renderIcon) {
        icon = this.props.renderIcon(this.props);
      }

      return icon;
    }
  }, {
    key: 'renderLabelChildren',
    value: function renderLabelChildren() {
      var _renderLabelTreeLines = this.renderLabelTreeLines(),
          treeLine = _renderLabelTreeLines.treeLine,
          treeLineTop = _renderLabelTreeLines.treeLineTop;

      var iconCheckList = [this.renderCheck(), this.renderIcon()];
      if (!this.props.checkBeforeIcon) {
        iconCheckList.reverse();
      }

      var children = [this.props.loading ? this.renderLoadTool() : this.renderExpandTool(), iconCheckList, this.renderNodeText(), treeLine, treeLineTop];

      return children;
    }
  }, {
    key: 'renderLabelTreeLines',
    value: function renderLabelTreeLines() {
      var path = this.props.path;

      var treeLine = null;
      var treeLineTop = null;

      if (this.props.treeLines && this.props.parent) {
        var offset = this.props.nestingIndentation - this.props.expandToolSize * 0.5;
        var treeLineStyleHorizontal = _defineProperty({
          width: offset
        }, this.props.rtl ? 'right' : 'left', -this.props.nestingIndentation);

        if (typeof this.props.treeLines === 'string') {
          treeLineStyleHorizontal.borderTop = this.props.treeLines;
        }

        treeLine = _react2.default.createElement('div', {
          key: 'horizontal_' + path,
          className: this.props.rootClassName + '__tree-line__horizontal',
          style: treeLineStyleHorizontal
        });

        if (this.props.isLast) {
          var treeLineTopStyle = _defineProperty({}, this.props.rtl ? 'right' : 'left', -offset);

          if (typeof this.props.treeLines === 'string') {
            treeLineTopStyle.borderLeft = this.props.treeLines;
          }

          treeLineTop = _react2.default.createElement('div', {
            key: 'vertical_top_' + path,
            className: this.props.rootClassName + '__tree-line__vertical-top',
            style: treeLineTopStyle
          });
        }
      }

      return {
        treeLine: treeLine,
        treeLineTop: treeLineTop
      };
    }
  }, {
    key: 'renderNodeText',
    value: function renderNodeText() {
      var path = this.props.path;

      var result = void 0;
      var children = void 0;

      if (typeof this.props.node.label === 'function') {
        children = this.props.node.label(this.props);
      } else {
        children = this.props.node.label;
      }

      var labelTextProps = {
        children: children,
        className: this.props.rootClassName + '__label__text'
      };

      if (this.props.renderNodeText) {
        var domProps = labelTextProps;
        var nodeProps = this.props;
        result = this.props.renderNodeText(domProps, nodeProps);
      }

      if (result === undefined) {
        var _nodeProps = this.props;
        result = _react2.default.createElement('div', _extends({ key: 'text_' + path }, labelTextProps));
      }

      return result;
    }
  }, {
    key: 'renderCheck',
    value: function renderCheck() {
      var result = void 0;

      if (!this.props.enableChecked) {
        return null;
      }
      if (this.props.renderCheck === false) {
        return null;
      }

      var checkProps = {
        key: 'checkbox',
        // can be null only if it is a parent
        supportIndeterminate: !!(this.props.children && this.props.children.length),
        className: (0, _join2.default)(this.props.rootClassName + '__checkbox', this.props.checked && this.props.rootClassName + '__checkbox--checked'),
        onChange: this.onCheckedChange,
        // need to stop propagation so it doen't toggle collapse
        onClick: function onClick(event) {
          event.stopPropagation();
        },
        disabled: this.props.disabled,
        /**
         * checked cannot be undefined
         * because components cannot change
         * from uncontrolled to controlled
         */
        checked: this.props.checked
      };

      if (typeof this.props.renderCheck == 'function') {
        var domProps = checkProps;
        var nodeProps = this.props;
        result = this.props.renderCheck(domProps, nodeProps);
      }

      if (result === undefined) {
        result = _react2.default.createElement(_CheckBox2.default, _extends({}, checkProps, {
          onChange: function onChange(value) {
            checkProps.onChange(value);
          }
        }));
      }

      return result;
    }
  }, {
    key: 'renderContent',
    value: function renderContent() {
      var _this4 = this;

      var path = this.props.path;
      /**
       * showContent is used because
       * when content should collapse
       * it's unmount is delayed
       */

      if (!this.state.showContent) {
        return null;
      }

      var result = void 0;
      var style = this.props.contentStyle;
      var domProps = {
        style: style,
        className: (0, _join2.default)(this.props.rootClassName + '__content', this.props.contentClassName),
        children: this.props.children,
        ref: function ref(c) {
          return _this4.contentNode = c;
        }
      };

      if (this.props.transition) {
        domProps.style = (0, _assign2.default)({}, domProps.style, this.getTransitionStyle());
      }

      var nodeProps = this.props;
      result = this.props.renderContent(domProps, nodeProps);
      if (result === undefined) {
        result = _react2.default.createElement(
          'div',
          _extends({ key: 'content_' + path }, domProps),
          domProps.children
        );
      }

      return result;
    }
  }, {
    key: 'renderExpandTool',
    value: function renderExpandTool() {
      var path = this.props.path;

      if (!this.props.hasChildren) {
        return null;
      }

      var expandToolProps = {
        key: 'expand_tool_' + path,
        size: this.props.expandToolSize,
        onClick: this.onExpanderClick,
        onDoubleClick: this.onExpanderDoubleClick,
        className: (0, _join2.default)(this.props.rootClassName + '__expander', this.props.collapsed && this.props.rootClassName + '__expander--collapsed')
      };
      var expandTool = this.props.expandTool;

      // react element
      switch (typeof expandTool === 'undefined' ? 'undefined' : _typeof(expandTool)) {
        case 'undefined':
          expandTool = _react2.default.createElement(_ExpandTool2.default, expandToolProps);
          break;
        case 'object':
          expandTool = (0, _react.cloneElement)(expandTool, expandToolProps);
          break;
        case 'function':
          expandTool = expandTool({
            domProps: expandToolProps,
            nodeProps: this.props
          });
          break;
        case 'string':
          expandTool = _react2.default.createElement(_ExpandTool2.default, _extends({}, expandToolProps, { children: expandTool }));
          break;
      }

      return expandTool;
    }
  }, {
    key: 'renderLoadTool',
    value: function renderLoadTool() {
      var expandTool = void 0;
      if (this.props.loadTool) {
        expandTool = typeof this.props.loadTool === 'function' ? this.props.loadTool(this.props) : this.props.loadTool;
      } else {
        expandTool = _react2.default.createElement(_LoadTool2.default, {
          key: 'loadtool',
          size: this.props.expandToolSize,
          className: this.props.rootClassName + '__loader'
        });
      }

      return expandTool;
    }
  }, {
    key: 'onExpanderClick',
    value: function onExpanderClick(event) {
      event.stopPropagation();

      if (this.props.disabled) {
        return null;
      }

      if (!this.props.expandOnDoubleClick) {
        this.onCollapsedChange();
      }
    }
  }, {
    key: 'onExpanderDoubleClick',
    value: function onExpanderDoubleClick(event) {
      if (this.props.disabled) {
        return null;
      }

      event.stopPropagation();
      if (this.props.expandOnDoubleClick) {
        this.onCollapsedChange();
      }
    }
  }, {
    key: 'onLabelClick',
    value: function onLabelClick(event) {
      event.stopPropagation();

      if (this.props.disabled) {
        return null;
      }

      if (!this.props.expandOnToolOnly && !this.props.expandOnDoubleClick) {
        this.onCollapsedChange();
      }

      if (this.props.enableSelection) {
        this.onSelectionChange();
      }

      if (this.props.enableKeyboardNavigation) {
        this.onActiveNodeChange();
      }

      if (this.props.checkOnClick) {
        this.onCheckedChange(!this.props.checked);
      }
    }
  }, {
    key: 'onLabelDoubleClick',
    value: function onLabelDoubleClick(event) {
      event.stopPropagation();

      if (this.props.disabled) {
        return null;
      }

      if (!this.props.expandOnToolOnly && this.props.expandOnDoubleClick) {
        this.onCollapsedChange();
      }
    }
  }, {
    key: 'onCheckedChange',
    value: function onCheckedChange(checked) {
      var newChecked = checked;

      // a change cannot go into null, only when
      // not all children are selectedMap
      if (newChecked === null) {
        newChecked = true;
      }

      /**
       * Handle situation:
       * - all nondisabled are checked
       * - next state should be false
       */
      if (this.props.children && this.props.checkNodesRecursive) {
        var nonDisabledChildren = this.props.children.filter(function (child) {
          return !child.props.disabled;
        });
        var nonDisabledCheckedChildren = nonDisabledChildren.filter(function (child) {
          return child.props.checked;
        });

        if (nonDisabledChildren.length === nonDisabledCheckedChildren.length) {
          newChecked = false;
        }
      }

      this.props.onCheckedChange({
        checked: newChecked,
        props: this.props
      });
    }
  }, {
    key: 'onSelectionChange',
    value: function onSelectionChange() {
      var newSelected = !this.props.selected;

      this.props.onSelectionChange({
        path: this.props.path,
        selected: newSelected,
        props: this.props
      });
    }
  }, {
    key: 'onCollapsedChange',
    value: function onCollapsedChange() {
      var newCollapsed = !this.props.collapsed;

      this.props.onCollapsedChange({
        path: this.props.path,
        collapsed: newCollapsed,
        props: this.props
      });
    }
  }, {
    key: 'onActiveNodeChange',
    value: function onActiveNodeChange() {
      if (this.props.disabled) {
        return null;
      }

      this.props.onActiveNodeChange(this.props);
    }
  }, {
    key: 'getAvailableWidth',
    value: function getAvailableWidth() {
      var node = this.rootNode;
      if (!node) {
        return null;
      }

      var totalWidth = node.offsetWidth;

      var _global$getComputedSt = global.getComputedStyle(node),
          paddingLeft = _global$getComputedSt.paddingLeft,
          paddingRight = _global$getComputedSt.paddingRight;

      var availableWidth = totalWidth - (0, _pxToFloat2.default)(paddingLeft) - (0, _pxToFloat2.default)(paddingRight);

      if (isNaN(availableWidth)) {
        return null;
      }

      return availableWidth;
    }

    /**
     *
     * Note - bug on safary
     * If transition is set and
     * - it doen't have height
     * - add height
     * - node will collapse and get up again because it tries to
     * transition from nothing to something, to fix this add transition
     * only when height is added
     *
     * transition:
     * 1 - position absolute, width fixed (from parent), mesure height - transitionPrepare = true
     * 2 - prepare animation render content with height 0 - transitionReady  = true
     * 3 - start transition render content with height calculated
     * 4 - remove height from content
     *
     * collapsing:
     * 1 - add height to content, prevent content from unmounting
     * 2 - add height 0
     * 3 - let content unmount
     */

  }, {
    key: 'getTransitionStyle',
    value: function getTransitionStyle() {
      var style = {
        // transition: `height ${this.props.transitionDuration}ms ease`
      };
      /**
       * transition #1
       * prepare content to be mesured
       */
      if (this.state.transitionPrepare) {
        (0, _assign2.default)(style, {
          width: this.state.availableWidth,
          position: 'absolute',
          visibility: 'hidden',
          transition: 'height ' + this.props.transitionDuration + 'ms ease'
        });
      }

      /**
       * transition #2
       * content ready to animate
       */
      if (this.state.transitionReady) {
        (0, _assign2.default)(style, {
          height: 0,
          overflow: 'hidden',
          transition: 'height ' + this.props.transitionDuration + 'ms ease'
        });
      }

      /**
       * transition #3
       * animation start
       */
      if (this.state.transitionStart) {
        (0, _assign2.default)(style, {
          height: this.state.contentHeight,
          overflow: 'hidden',
          transition: 'height ' + this.props.transitionDuration + 'ms ease'
        });
      }

      /**
       * Collapseing
       * prepare colapse transition
       */
      if (this.state.transitionColllapsePrepare) {
        (0, _assign2.default)(style, {
          height: this.state.contentHeight,
          overflow: 'hidden'
          // transition: `height ${this.props.transitionDuration}ms ease`
        });
      }

      /**
       * Start collapse transition
       */
      if (this.state.transitionColllapseStart) {
        (0, _assign2.default)(style, {
          height: 0,
          overflow: 'hidden',
          transition: 'height ' + this.props.transitionDuration + 'ms ease'
        });
      }

      return style;
    }

    // actions

  }, {
    key: 'startExpandTransitionIfNecessary',
    value: function startExpandTransitionIfNecessary(nextProps) {
      /**
       * transition #1
       * Start preparations for transition
       */

      if (nextProps.collapsed !== this.props.collapsed && !nextProps.collapsed && this.props.collapsed) {
        var availableWidth = this.getAvailableWidth();
        if (availableWidth === null) {
          return null;
        }
        this.setState({
          availableWidth: availableWidth,
          transitionPrepare: true,
          showContent: true
        });
        return null;
      }
    }
  }, {
    key: 'doExpandTransitionIfNecessary',
    value: function doExpandTransitionIfNecessary() {
      var _this5 = this;

      /**
       * transition #1
       * mesure content height and save it
       * to prepare transition
       */
      if (this.state.transitionPrepare) {
        var content = this.contentNode;
        if (!content) {
          return null;
        }
        var contentHeight = content.offsetHeight;

        this.setState({
          contentHeight: contentHeight,
          transitionPrepare: false,
          transitionReady: true
        });
      }

      /**
       * transition #3
       * at this point transition is ready to start (height is
       * known and height is also set to 0)
       * start transition
       * after `transitionDuration` the transition ends
       * and state is reseted, and height is removed
       */
      if (this.state.transitionReady) {
        setTimeout(function () {
          if (!_this5.componentIsMounted) {
            return null;
          }
          /**
           * Timeout is needed as transition is to fast without it
           */
          _this5.setState({
            transitionReady: false,
            transitionStart: true
          }, function () {
            // transition done after this.props.transitionDuration
            setTimeout(function () {
              if (!_this5.componentIsMounted) {
                return null;
              }
              _this5.setState({
                availableWidth: null,
                transitionPrepare: null,
                transitionStart: null,
                transitionReady: null,
                contentHeight: null
              });
            }, _this5.props.transitionDuration);
          });
        }, 0);
      }
    }
  }, {
    key: 'startCollapseTransitionIfNecessary',
    value: function startCollapseTransitionIfNecessary(nextProps) {
      /**
       *  collapse 1
       *  Start preparations for collapse transition
       */
      if (nextProps.collapsed !== this.props.collapsed && nextProps.collapsed) {
        var content = this.contentNode;
        if (!content) {
          return;
        }
        var contentHeight = content.offsetHeight;

        this.setState({
          transitionColllapsePrepare: true,
          contentHeight: contentHeight
        });
        return null;
      }
    }
  }, {
    key: 'doCollapseTransitionIfNecessary',
    value: function doCollapseTransitionIfNecessary() {
      var _this6 = this;

      /**
       * Start collapse transition
       * after transition started, and transiton duration
       * has run out content can be unmounted
       */
      if (this.state.transitionColllapsePrepare) {
        setTimeout(function () {
          if (!_this6.componentIsMounted) {
            return null;
          }
          _this6.setState({
            transitionColllapsePrepare: false,
            transitionColllapseStart: true
          }, function () {
            // transition done after this.props.transitionDuration
            if (_this6.contentNode) {
              _this6.contentNode.style.transition = 'height ' + _this6.props.transitionDuration + 'ms ease';
            }

            setTimeout(function () {
              if (!_this6.componentIsMounted) {
                return null;
              }
              if (_this6.contentNode) {
                _this6.contentNode.style.transition = null;
              }

              _this6.setState({
                transitionColllapsePrepare: null,
                transitionColllapseStart: null,
                contentHeight: null,
                showContent: !_this6.props.collapsed
              });
            }, _this6.props.transitionDuration);
          });
        }, 16);
      }
    }
  }, {
    key: 'scrollNodeIntoView',
    value: function scrollNodeIntoView() {
      this.props.scrollNodeIntoView(this.rootNode && this.labelNode.getBoundingClientRect());
    }
  }]);

  return ZippyNode;
}(_react.Component);

ZippyNode.defaultProps = {
  rootClassName: 'zippy-react-toolkit-tree-view__node',
  renderLabel: function renderLabel() {},
  renderContent: function renderContent() {},
  renderNodeText: function renderNodeText() {},
  onActiveNodeChange: function onActiveNodeChange() {},
  onCollapsedChange: function onCollapsedChange() {},
  onCheckedChange: function onCheckedChange() {},
  scrollNodeIntoView: function scrollNodeIntoView() {},
  node: {},
  domProps: {},
  collapsed: null,
  checked: false,
  checkOnClick: true,
  treeLines: true,
  disabled: false,
  checkBeforeIcon: true,
  nodeIcon: null,
  nodeCollapsedIcon: null,
  leafNodeIcon: null
};

ZippyNode.propTypes = {
  node: _propTypes2.default.object,
  hasChildren: _propTypes2.default.bool,
  index: _propTypes2.default.number,
  domProps: _propTypes2.default.object,
  treeLines: _propTypes2.default.oneOfType([_propTypes2.default.bool, _propTypes2.default.string]),
  nestingIndentation: _propTypes2.default.number,
  checkBeforeIcon: _propTypes2.default.bool,

  // icons
  nodeIcon: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.node]),
  nodeCollapsedIcon: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.node]),
  leafNodeIcon: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.node]),

  //context menu
  onNodeContextMenu: _propTypes2.default.func,
  // selection
  defaultSelected: _propTypes2.default.bool,

  // checked
  checked: _propTypes2.default.bool,
  onCheckedChange: _propTypes2.default.func,
  enableChecked: _propTypes2.default.bool,
  checkOnClick: _propTypes2.default.bool,

  // active
  enableKeyboardNavigation: _propTypes2.default.bool,

  // disabled
  disabled: _propTypes2.default.bool,

  // custon render
  renderLabel: _propTypes2.default.func,
  renderIcon: _propTypes2.default.func,
  renderContent: _propTypes2.default.func,
  renderNodeText: _propTypes2.default.func,

  // path, logic
  path: _propTypes2.default.string,

  // style
  contentStyle: _propTypes2.default.object,
  labelStyle: _propTypes2.default.object,

  // collapsed
  collapsed: _propTypes2.default.bool,
  expandTool: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.node, _propTypes2.default.func]),
  expandOnToolOnly: _propTypes2.default.bool,
  checkNodesRecursive: _propTypes2.default.bool,

  // async nodes
  loadTool: _propTypes2.default.oneOfType([_propTypes2.default.node, _propTypes2.default.func]),

  scrollNodeIntoView: _propTypes2.default.func,
  expandToolSize: _propTypes2.default.number
};

exports.default = ZippyNode;
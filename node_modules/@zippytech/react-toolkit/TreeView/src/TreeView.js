'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _autoBind = require('@zippytech/react-class/autoBind');

var _autoBind2 = _interopRequireDefault(_autoBind);

var _assign5 = require('../../common/assign');

var _assign6 = _interopRequireDefault(_assign5);

var _uglified = require('@zippytech/uglified');

var _uglified2 = _interopRequireDefault(_uglified);

var _shallowequal = require('../../common/shallowequal');

var _shallowequal2 = _interopRequireDefault(_shallowequal);

var _region = require('@zippytech/region');

var _region2 = _interopRequireDefault(_region);

var _reactDom = require('react-dom');

var _Node = require('./Node');

var _Node2 = _interopRequireDefault(_Node);

var _join = require('../../common/join');

var _join2 = _interopRequireDefault(_join);

var _cleanProps = require('../../common/cleanProps');

var _cleanProps2 = _interopRequireDefault(_cleanProps);

var _shouldComponentUpdate2 = require('../../common/shouldComponentUpdate');

var _shouldComponentUpdate3 = _interopRequireDefault(_shouldComponentUpdate2);

var _getNewRecursiveCheckedState = require('./utils/getNewRecursiveCheckedState');

var _getNewRecursiveCheckedState2 = _interopRequireDefault(_getNewRecursiveCheckedState);

var _isParentCollapsed = require('./utils/isParentCollapsed');

var _isParentCollapsed2 = _interopRequireDefault(_isParentCollapsed);

var _getLastRootNode = require('./utils/getLastRootNode');

var _getLastRootNode2 = _interopRequireDefault(_getLastRootNode);

var _injectNodes = require('./utils/injectNodes');

var _injectNodes2 = _interopRequireDefault(_injectNodes);

var _injectNode = require('./utils/injectNode');

var _injectNode2 = _interopRequireDefault(_injectNode);

var _safeParseInt = require('./utils/safeParseInt');

var _safeParseInt2 = _interopRequireDefault(_safeParseInt);

var _changeChildrenProperty = require('./utils/changeChildrenProperty');

var _changeChildrenProperty2 = _interopRequireDefault(_changeChildrenProperty);

var _getDataSourceUpdater = require('./utils/getDataSourceUpdater');

var _getDataSourceUpdater2 = _interopRequireDefault(_getDataSourceUpdater);

var _cleanUpFalseProps = require('./utils/cleanUpFalseProps');

var _cleanUpFalseProps2 = _interopRequireDefault(_cleanUpFalseProps);

var _Menu = require('../../Menu');

var _Menu2 = _interopRequireDefault(_Menu);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Copyright (c) 2015-present, Zippy Technologies
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * This source code is licensed under the MIT license found in the
file in the root directory of this source tree.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */

// comp


// utils


var NODE_MENU_ALIGN_POSITIONS = ['tl-tl', 'tr-tl', 'bl-tl', 'br-tl'];

var ZippyTreeView = function (_Component) {
  _inherits(ZippyTreeView, _Component);

  function ZippyTreeView(props) {
    _classCallCheck(this, ZippyTreeView);

    var _this = _possibleConstructorReturn(this, (ZippyTreeView.__proto__ || Object.getPrototypeOf(ZippyTreeView)).call(this, props));

    (0, _autoBind2.default)(_this);

    _this.state = {
      loading: !!(props.dataSource && props.dataSource.then),
      collapsed: props.defaultCollapsed || {},
      selected: props.defaultSelected,
      checked: props.defaultChecked,
      activeNode: props.defaultActiveNode,
      nodesLoading: {},
      collapsedDepth: props.defaultCollapsedDepth
    };

    /**
     * store nodes that have been loaded
     * async, used for loadNodeOnce
     */
    _this.loadedNodesPaths = {};
    return _this;
  }

  _createClass(ZippyTreeView, [{
    key: 'UNSAFE_componentWillMount',
    value: function UNSAFE_componentWillMount() {
      this.loadDataSource(this.props.dataSource);
    }
  }, {
    key: 'shouldComponentUpdate',
    value: function shouldComponentUpdate(nextProps, nextState) {
      return (0, _shouldComponentUpdate3.default)(this, nextProps, nextState);
    }
  }, {
    key: 'UNSAFE_componentWillReceiveProps',
    value: function UNSAFE_componentWillReceiveProps(nextProps) {
      if (nextProps.dataSource !== this.props.dataSource) {
        this.loadDataSource(nextProps.dataSource);
      }
    }
  }, {
    key: 'componentDidUpdate',
    value: function componentDidUpdate() {
      /**
       * Trigger collapseChange if
       * filter has a different value,
       * must check here as nodes have to be rendered
       * to determine if they are filtered or not
       */
      if (this.isFiltered() && this.hasFilterChanged()) {
        var newCollapsedForFilteredNodes = Object.keys(this.filteredNodes).reduce(function (acc, el) {
          acc[el] = false;

          return acc;
        }, {});

        var newCollapsed = (0, _assign6.default)({}, this.getCurrentCollapsedState(), newCollapsedForFilteredNodes);

        // Remove paths with false
        (0, _cleanUpFalseProps2.default)(newCollapsed);

        if (!(0, _shallowequal2.default)(this.getCurrentCollapsedState(), newCollapsed)) {
          this.setCollapsed(newCollapsed);
        }
      }
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      this.nodePropsMap = null;

      // usedt for loadNodeOnce, to know whether a node was loaded
      this.loadedNodesPaths = null;

      /**
       * Construct a map of nodes that are collapsed/selected/checked,
       * used to determine the correct state of the tree
       *
       * These maps are used to overwrite previous state (this.state.collapsed),
       * or props (this.props.collapsed) when a node changes state, to reflect
       * the real state.
       *
       * Real state for collapse (e.g):
       * - collapseDepth
       * - collapsed controlled and uncontrolled
       * - isNodeCollapsed
       * - node collapse change
       */
      this.visibleNodesPaths = null;
      this.collapsedNodesPaths = null;
      this.checkedNodesPaths = null;
      this.selectedNodesPaths = null;
    }
  }, {
    key: 'render',
    value: function render() {
      var _this2 = this;

      var _props = this.props,
          children = _props.children,
          theme = _props.theme,
          style = _props.style,
          rootClassName = _props.rootClassName;


      var isCheckedEnabled = this.isCheckedEnabled();
      var checkOnClick = this.props.checkOnClick === undefined ? isCheckedEnabled : this.props.checkOnClick;

      var className = (0, _join2.default)(rootClassName, rootClassName + '--theme-' + theme, this.props.enableSelection && rootClassName + '--selection-enabled', isCheckedEnabled && rootClassName + '--check-enabled', this.props.expandOnToolOnly && rootClassName + '--expand-on-tool-only', this.props.rtl ? rootClassName + '--rtl' : rootClassName + '--ltr', checkOnClick && rootClassName + '--check-onClick', this.isLoading() && rootClassName + '--loading', this.props.enableHoverStyle && rootClassName + '--enable-hover-style', this.props.className);

      var data = this.state.data;
      var loading = this.isLoading();
      /**
       * Store a pointer to each nodeProps.
       * This way there is the posibility to do usefull things,
       * like getNodePropsByPath, or simulate events easy.
       *
       * All other caches will be constructed using an array of paths.
       * And access to the actual node will be done using nodePropsMap
       */
      this.nodePropsMap = {};

      /**
       * An array of paths of visible nodes.
       */
      this.visibleNodesPaths = [];
      this.collapsedNodesPaths = [];
      this.checkedNodesPaths = [];
      this.selectedNodesPaths = [];
      this.previousFilteredNodes = this.filteredNodes;
      this.filteredNodes = {};

      var nodes = void 0;
      if (data && !this.isLoading()) {
        nodes = this.renderNodes(data);
      } else {
        nodes = this.renderLoader();
      }

      // NOTE props that are set globaly cannot also be set on
      // Node, they will be overwritten by global ones
      return _react2.default.createElement(
        'div',
        _extends({}, (0, _cleanProps2.default)(this.props, ZippyTreeView.propTypes), {
          className: className,
          style: style,
          tabIndex: -1,
          ref: function ref(node) {
            return _this2.node = node;
          },
          onKeyDown: this.onKeyDown
        }),
        nodes,
        this.renderNodeContextMenu()
      );
    }
  }, {
    key: 'hideNodeContextMenu',
    value: function hideNodeContextMenu() {
      this.setState({ nodeContextMenuProps: null });
    }
  }, {
    key: 'renderNodeContextMenu',
    value: function renderNodeContextMenu() {
      var nodeProps = this.state.nodeContextMenuProps;
      var renderNodeContextMenu = this.props.renderNodeContextMenu;


      if (!nodeProps) {
        return null;
      }
      if (!renderNodeContextMenu) {
        return null;
      }

      var items = [];

      var menuProps = {
        autoFocus: true,
        onDismiss: this.hideNodeContextMenu,
        style: { zIndex: 10000, position: 'absolute' },
        items: items,
        constrainTo: this.nodeContextMenuConstrainTo,
        alignPositions: NODE_MENU_ALIGN_POSITIONS,
        alignTo: this.nodeContextMenuAlignTo
      };

      var menu = renderNodeContextMenu(menuProps, {
        nodeProps: nodeProps,
        tree: this,
        props: this.p
      });

      if (menu === undefined) {
        return _react2.default.createElement(_Menu2.default, menuProps);
      }

      return menu;
    }
  }, {
    key: 'onNodeContextMenu',
    value: function onNodeContextMenu(nodeProps, event) {
      if (!this.props.renderNodeContextMenu) {
        return;
      }
      event.preventDefault();

      this.nodeContextMenuAlignTo = _region2.default.from(event);
      this.nodeContextMenuConstrainTo = (0, _reactDom.findDOMNode)(this);

      this.setState({ nodeContextMenuProps: nodeProps });
    }
  }, {
    key: 'renderLoader',
    value: function renderLoader() {
      var loader = 'Loading...';

      if (this.props.renderLoader) {
        loader = this.props.renderLoader(this.props);
      }

      return loader;
    }
  }, {
    key: 'renderNodes',
    value: function renderNodes(nodes) {
      var parentPath = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
      var parent = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

      var _this3 = this;

      var parentDepth = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : -1;
      var indexPath = arguments[4];

      var lastIndex = nodes.length - 1;
      return nodes.reduce(function (acc, node, index) {
        var config = {
          node: node,
          index: index,
          parentPath: parentPath,
          parentDepth: parentDepth,
          parent: parent,
          indexPath: indexPath,
          isLast: lastIndex === index
        };

        var renderedNode = _this3.renderNode(config);

        if (renderedNode) {
          acc.push(renderedNode);
        }

        return acc;
      }, []);
    }
  }, {
    key: 'renderNode',
    value: function renderNode(config) {
      var node = config.node,
          index = config.index,
          parentPath = config.parentPath,
          parentDepth = config.parentDepth,
          parent = config.parent,
          parentIndex = config.parentIndex,
          parentIndexPath = config.indexPath,
          isLast = config.isLast;


      var isCheckEnabled = this.isCheckedEnabled();

      var checkOnClick = this.props.checkOnClick === undefined ? isCheckEnabled : this.props.checkOnClick;

      var children = void 0;
      var nodeIdentifier = void 0;

      /**
       * It is assumed that if the node has nodes even if it is an empty
       * array it has children. See docs section about leaf node.
       */
      var hasChildren = !!node.nodes;
      var path = this.getPath({
        node: node,
        index: index,
        props: this.props,
        parentPath: parentPath
      });

      var result = void 0;
      var nodeProps = {
        node: node,
        children: children,
        parent: parent,
        path: path,
        index: index,
        hasChildren: hasChildren,
        isLast: isLast,
        matchText: undefined,
        rootClassName: this.props.rootClassName + '__node',
        expandToolSize: this.props.expandToolSize,
        rtl: this.props.rtl,
        key: path,
        expandTool: this.props.expandTool,
        loadTool: this.props.loadTool,
        checkBeforeIcon: this.props.checkBeforeIcon,
        scrollNodeIntoView: this.scrollNodeIntoView,
        enableScrollNodeIntoView: this.props.enableScrollNodeIntoView,
        onNodeContextMenu: this.onNodeContextMenu,
        // icons
        nodeIcon: this.props.nodeIcon,
        nodeCollapsedIcon: this.props.nodeCollapsedIcon,
        leafNodeIcon: this.props.leafNodeIcon,

        // custom renderers
        renderLabel: this.props.renderLabel,
        renderIcon: this.props.renderIcon,
        renderContent: this.props.renderContent,
        renderCheck: this.props.renderCheck,
        renderNodeText: this.props.renderNodeText,

        onCollapsedChange: this.onNodeCollapseChange,
        expandOnToolOnly: this.props.expandOnToolOnly,
        expandOnDoubleClick: this.props.expandOnDoubleClick,

        // animation
        transition: this.props.transition,
        transitionDuration: this.props.transitionDuration,

        // selection
        enableSelection: this.props.enableSelection,
        onSelectionChange: this.onSelectionChange,

        // check
        checkNodesRecursive: this.props.checkNodesRecursive,
        enableChecked: isCheckEnabled,
        onCheckedChange: this.onCheckedChange,
        checkOnClick: checkOnClick,

        // active - navigation
        onActiveNodeChange: this.onActiveNodeChange,
        enableKeyboardNavigation: this.props.enableKeyboardNavigation,

        // async nodes
        nodeLoader: this.props.nodeLoader,

        // treeLines
        treeLines: this.props.treeLines,
        nestingIndentation: this.props.nestingIndentation
      };

      var domProps = {};

      // depth - used for collapsedDepth
      nodeProps.depth = parentDepth + 1; // it is just like path but it uses indexes

      /**
       * indexPath
       * Used to identify a node, is needed for whenever
       * dataSource needs to be updated
       * path can be hard to decode if idProperty is used
       *
       * String is used as it uses less memory.
       */
      nodeProps.indexPath = '' + (parentIndexPath != undefined ? parentIndexPath + '/' : '') + index;

      // is loading
      nodeProps.loading = this.state.nodesLoading[path];

      // collapsed
      nodeProps.collapsed = this.getNodeCollapsedState(path);
      nodeProps.collapsed = this.getCollapsedDepthCollapseState(nodeProps);

      if (this.props.isNodeCollapsed) {
        nodeProps.collapsed = this.props.isNodeCollapsed(nodeProps);
      }

      if (nodeProps.collapsed) {
        this.collapsedNodesPaths.push(path);
      }

      /**
       * selected
       */
      if (this.props.enableSelection) {
        nodeProps.selected = this.getNodeSelectedState(path);
        if (this.props.isNodeSelected) {
          nodeProps.selected = this.props.isNodeSelected(nodeProps);
        }
      }

      if (nodeProps.selected) {
        this.selectedNodesPaths.push(path);
      }

      // active
      if (this.props.enableKeyboardNavigation) {
        nodeProps.active = this.getNodeActiveState(path);
      }

      // check
      nodeProps.checked = this.getNodeCheckedState(path);
      if (this.props.isNodeChecked) {
        nodeProps.checked = this.props.isNodeChecked(nodeProps);
      }

      if (nodeProps.checked) {
        this.checkedNodesPaths.push(path);
      }

      // disabled
      nodeProps.disabled = this.props.disabled[path] || node.disabled;
      if (this.props.isNodeDisabled) {
        nodeProps.disabled = this.props.isNodeDisabled(nodeProps);
      }

      // if disabled it is always collapsed
      if (nodeProps.disabled) {
        nodeProps.collapsed = true;
      }

      // is async
      if (this.props.loadNode) {
        nodeProps.async = true;
      } else if (this.props.loadNodeOnce && node.nodes === null) {
        nodeProps.async = true;
      }

      if ((this.props.loadNode || this.props.loadNodeOnce) && this.props.isNodeAsync) {
        nodeProps.async = this.props.isNodeAsync(nodeProps);
      }

      if (nodeProps.async && !nodeProps.hasChildren) {
        nodeProps.hasChildren = true;
        nodeProps.collapsed = true;
      }

      /**
       * so the order is correct
       * Save a reference to every node that will
       * be rendered, it is needed to navigate
       *
       * also push node before children, so
       * they are in the correct order.
       */
      var isVisible = !(0, _isParentCollapsed2.default)(parent);
      if (isVisible) {
        this.visibleNodesPaths.push(path);
      }

      // construct nodePropsMap
      this.nodePropsMap[path] = nodeProps;

      // chilren, if is loading there is no need to load children
      if (hasChildren && !nodeProps.loading) {
        nodeProps.children = this.renderNodes(node.nodes, path, nodeProps, nodeProps.depth, nodeProps.indexPath);
      }

      // filter
      if (this.props.filter) {
        var isNodeFiltered = this.props.filter(nodeProps);

        if (!isNodeFiltered) {
          if (!nodeProps.children) {
            nodeProps.hidden = true;
          }

          if (nodeProps.children && nodeProps.children.filter(function (node) {
            return !node.props.hidden;
          }).length === 0) {
            nodeProps.hidden = true;
          }
        }

        if (!nodeProps.hidden) {
          this.filteredNodes[nodeProps.path] = true;
        }
      }

      /**
       * It is set here, so contentStyle prop when is a function
       * can overwrite any style
       */
      if (this.props.nestingIndentation) {
        var paddingProp = this.props.rtl ? 'paddingRight' : 'paddingLeft';
        nodeProps.contentStyle = _defineProperty({}, paddingProp, this.props.nestingIndentation);
      }
      nodeProps.contentStyle = this.getStyle(nodeProps, nodeProps.contentStyle, this.props.contentStyle, node.contentStyle);

      // classNames
      domProps.className = this.getClassName(nodeProps, this.props.nodeClassName, node.className);
      nodeProps.labelClassName = this.getClassName(nodeProps, this.props.labelClassName, node.labelClassName);
      nodeProps.contentClassName = this.getClassName(nodeProps, this.props.contentClassName, node.contentClassName);

      // styles
      // must be set here so more props are available on nodeProps
      domProps.style = this.getStyle(nodeProps, this.props.nodeStyle, node.style);
      nodeProps.labelStyle = this.getStyle(nodeProps, this.props.labelStyle, node.labelStyle);

      if (typeof this.props.renderNode === 'function') {
        result = this.props.renderNode(domProps, nodeProps);
      }
      if (result === undefined) {
        result = _react2.default.createElement(_Node2.default, _extends({}, nodeProps, { domProps: domProps }));
      }

      return result;
    }

    // events

    /**
     * Called when  a node is collapsed or expanded
     * @prop isSimulated: it is true when it is not triggered by
     * a node.
     */

  }, {
    key: 'onNodeCollapseChange',
    value: function onNodeCollapseChange(_ref) {
      var collapsed = _ref.collapsed,
          nodeProps = _ref.props;

      var path = nodeProps.path;
      var actualCollapsedState = this.collapsedNodesPaths.reduce(function (acc, path) {
        acc[path] = true;
        return acc;
      }, {});

      var newCollapsed = (0, _assign6.default)({}, this.getCurrentCollapsedState(), actualCollapsedState, _defineProperty({}, path, collapsed));

      // Remove paths with false
      (0, _cleanUpFalseProps2.default)(newCollapsed);

      var getUpdatedDataSource = (0, _getDataSourceUpdater2.default)({
        data: this.state.data,
        extraProps: { collapsed: collapsed },
        nodeProps: nodeProps
      });

      this.props.onCollapsedChange(_extends({
        getUpdatedDataSource: getUpdatedDataSource,
        collapsedMap: newCollapsed
      }, nodeProps));

      if (this.props.onCollapsedDepthChange) {
        this.props.onCollapsedDepthChange(null);
      }

      /**
       * State should be update if:
       * - collapsed is uncontrolled
       * - and collapsedDepth is uncontrolleds
       */
      if (!this.isCollapsedControlled()) {
        this.setState({
          collapsed: newCollapsed,
          collapsedDepth: null
        });
      }

      /**
       * Aync nodes
       */
      if (!collapsed) {
        this.loadAsyncNode(nodeProps);
      }

      return newCollapsed;
    }
  }, {
    key: 'onSelectionChange',
    value: function onSelectionChange(_ref2) {
      var selected = _ref2.selected,
          nodeProps = _ref2.props;

      var path = nodeProps.path;
      var newSelected = void 0;

      if (this.props.singleSelect) {
        newSelected = selected ? _defineProperty({}, path, true) : {};
      } else {
        var actualSelectedState = this.selectedNodesPaths.reduce(function (acc, path) {
          acc[path] = true;

          return acc;
        }, {});

        newSelected = (0, _assign6.default)({}, this.getCurrentSelectedState(), actualSelectedState);
        // if false remove from map
        // it can be null for indeterminated
        if (selected === false) {
          delete newSelected[path];
        } else {
          newSelected[path] = selected;
        }
      }

      if (this.props.checkOnSelect) {
        this.onCheckedChange({
          checked: selected,
          props: nodeProps
        });
      }

      if (!this.isSelectedControlled()) {
        this.setState({
          selected: newSelected
        });
      }

      var getUpdatedDataSource = (0, _getDataSourceUpdater2.default)({
        data: this.state.data,
        extraProps: { selected: selected },
        nodeProps: nodeProps
      });

      this.props.onSelectionChange((0, _assign6.default)({}, nodeProps, {
        selectedMap: newSelected,
        selected: selected,
        getUpdatedDataSource: getUpdatedDataSource
      }));

      return newSelected;
    }
  }, {
    key: 'onCheckedChange',
    value: function onCheckedChange(_ref4) {
      var checked = _ref4.checked,
          nodeProps = _ref4.props;

      if (!this.isCheckedEnabled()) {
        return;
      }
      var actualCheckedState = this.checkedNodesPaths.reduce(function (acc, path) {
        acc[path] = true;

        return acc;
      }, {});
      var newChecked = (0, _assign6.default)({}, this.getCurrentCheckedState(), actualCheckedState);

      var path = nodeProps.path;

      if (this.props.checkNodesRecursive) {
        newChecked = (0, _getNewRecursiveCheckedState2.default)({
          nodeProps: nodeProps,
          checked: checked,
          currentState: newChecked
        });

        // Remove paths with false
        Object.keys(newChecked).forEach(function (path) {
          if (newChecked[path] === false) {
            delete newChecked[path];
          }
        });
      } else {
        /**
         * Simple case in which there is no check relation
         * between parent children nodes
         */
        if (checked === false) {
          delete newChecked[path];
        } else {
          newChecked[path] = checked;
        }
      }

      if (!this.isCheckedControlled()) {
        this.setState({
          checked: newChecked
        });
      }

      var getUpdatedDataSource = (0, _getDataSourceUpdater2.default)({
        data: this.state.data,
        extraProps: { checked: checked },
        nodeProps: nodeProps
      });

      this.props.onCheckedChange((0, _assign6.default)({}, nodeProps, {
        checked: checked,
        getUpdatedDataSource: getUpdatedDataSource,
        checkedMap: newChecked
      }));

      return newChecked;
    }
  }, {
    key: 'onActiveNodeChange',
    value: function onActiveNodeChange(nodeProps) {
      if (!this.props.enableKeyboardNavigation) {
        return null;
      }

      if (!this.isActiveNodeControlled()) {
        this.setState({
          activeNode: nodeProps.path
        });
      }

      /**
       * when active changes (by click)
       * need to add focus on tree so
       * arrow navigation works
       */
      if (!this.hasFocus()) {
        this.focus();
      }

      this.props.onActiveNodeChange((0, _assign6.default)({}, nodeProps, { activeNode: nodeProps.path }));
    }
  }, {
    key: 'onKeyDown',
    value: function onKeyDown(event) {
      if (!this.props.enableKeyboardNavigation) {
        return null;
      }

      switch (event.key) {
        case 'ArrowUp':
          this.onArrowUp(event);
          event.preventDefault();
          break;
        case 'ArrowDown':
          this.onArrowDown(event);
          event.preventDefault();
          break;
        case 'ArrowLeft':
          this.onArrowLeft(event);
          break;
        case 'ArrowRight':
          this.onArrowRight(event);
          break;
        case ' ':
          this.onSpace(event);
          event.preventDefault();
          break;
        case 'PageUp':
          this.onPageUp(event);
          event.preventDefault();
          break;
        case 'PageDown':
          this.onPageDown(event);
          event.preventDefault();
          break;
        case 'Home':
          this.onHome(event);
          break;
        case 'End':
          this.onEnd(event);
          break;
        case 'Enter':
          this.onEnter();
          event.preventDefault();
          break;
      }
    }

    /**
     * Handles change activeNode to next node
     * @return void
     */

  }, {
    key: 'onArrowUp',
    value: function onArrowUp() {
      this.setPreviousNodeActive();
    }

    /**
     * Handles change activeNode to previous node
     * @return void
     */

  }, {
    key: 'onArrowDown',
    value: function onArrowDown() {
      this.setNextNodeActive();
    }
  }, {
    key: 'onArrowLeft',
    value: function onArrowLeft() {
      var currentActiveNode = this.getActiveNodeProps();

      if (this.props.rtl) {
        if (currentActiveNode.collapsed && currentActiveNode.hasChildren) {
          this.onNodeCollapseChange({
            collapsed: false,
            props: currentActiveNode
          });
        } else {
          this.setNextNodeActive();
        }
      } else if (!currentActiveNode.collapsed && currentActiveNode.hasChildren) {
        this.onNodeCollapseChange({
          collapsed: true,
          props: currentActiveNode
        });
      } else {
        this.setPreviousNodeActive();
      }
    }
  }, {
    key: 'onArrowRight',
    value: function onArrowRight() {
      var currentActiveNode = this.getActiveNodeProps();
      if (!currentActiveNode) {
        return null;
      }

      if (this.props.rtl) {
        if (!currentActiveNode.collapsed) {
          this.onNodeCollapseChange({
            collapsed: true,
            props: currentActiveNode
          });
        } else {
          this.setPreviousNodeActive();
        }
      } else if (currentActiveNode.collapsed) {
        this.onNodeCollapseChange({
          collapsed: false,
          props: currentActiveNode
        });
      } else {
        this.setNextNodeActive();
      }
    }
  }, {
    key: 'onSpace',
    value: function onSpace() {
      this.checkActiveNode();
    }
  }, {
    key: 'onPageUp',
    value: function onPageUp() {
      this.setFirstChildActive();
    }
  }, {
    key: 'onPageDown',
    value: function onPageDown() {
      this.setLastChildActive();
    }
  }, {
    key: 'onHome',
    value: function onHome(event) {
      event.preventDefault();
      this.setFistRenderedNodeActive();
    }
  }, {
    key: 'onEnd',
    value: function onEnd(event) {
      event.preventDefault();
      this.setLastRenderedNodeActive();
    }
  }, {
    key: 'onEnter',
    value: function onEnter() {
      this.toggleCollapseActiveNode();
    }

    // set actions

  }, {
    key: 'loadAsyncNode',
    value: function loadAsyncNode(nodeProps) {
      var _this4 = this;

      var loadFunction = void 0;

      if (!nodeProps.async) {
        return null;
      }

      if (this.props.loadNodeOnce && !this.loadedNodesPaths[nodeProps.path]) {
        loadFunction = this.props.loadNodeOnce;

        /**
         * As it doen't influence render it can be a
         * property on the instance
         */
        this.loadedNodesPaths[nodeProps.path] = true;
      } else {
        loadFunction = this.props.loadNode;
      }

      if (loadFunction) {
        var newNodes = loadFunction(nodeProps);
        var updatePath = nodeProps.indexPath.split('/').map(_safeParseInt2.default);

        if (newNodes === nodeProps.node.nodes) {
          return null;
        }

        if (Array.isArray(newNodes) || newNodes == null // allow undefined also
        ) {
            var newData = (0, _injectNodes2.default)(newNodes, updatePath, this.state.data);
            this.setData(newData);
          } else if (newNodes && newNodes.then) {
          this.setState({
            nodesLoading: (0, _assign6.default)({}, this.state.nodesLoading, _defineProperty({}, nodeProps.path, true))
          });

          newNodes.then(function (newNodes) {
            _this4.props.onNodeLoad(newNodes, nodeProps);

            _this4.setState({
              nodesLoading: (0, _assign6.default)({}, _this4.state.nodesLoading, _defineProperty({}, nodeProps.path, false))
            });

            if (newNodes === nodeProps.node.nodes) {
              return null;
            }

            var newData = (0, _injectNodes2.default)(newNodes, updatePath, _this4.state.data);
            _this4.setData(newData);
          }).catch(function () {
            _this4.setState({
              nodesLoading: (0, _assign6.default)({}, _this4.state.nodesLoading, _defineProperty({}, nodeProps.path, false))
            });
          });
        }
      }
    }
  }, {
    key: 'checkActiveNode',
    value: function checkActiveNode() {
      if (!this.isCheckedEnabled()) {
        return;
      }
      var activeNode = this.getActiveNodeProps();
      this.onCheckedChange({
        props: activeNode,
        checked: !activeNode.checked
      });
    }
  }, {
    key: 'setPreviousNodeActive',
    value: function setPreviousNodeActive() {
      var previousNodeProps = this.getPreviousNodeProps();
      if (!previousNodeProps) {
        return null;
      }
      this.onActiveNodeChange(previousNodeProps);
    }
  }, {
    key: 'setFirstChildActive',
    value: function setFirstChildActive() {
      var activeNodeProps = this.getActiveNodeProps();

      if (activeNodeProps.parent) {
        var fistChildProps = activeNodeProps.parent.children[0].props;
        this.onActiveNodeChange(fistChildProps);
      } else {
        this.onActiveNodeChange(this.getNodePropsByPath(this.visibleNodesPaths[0]));
      }
    }
  }, {
    key: 'setLastChildActive',
    value: function setLastChildActive() {
      var activeNodeProps = this.getActiveNodeProps();

      if (activeNodeProps.parent) {
        var parentChildren = activeNodeProps.parent.children;
        var lastChildNode = parentChildren[parentChildren.length - 1].props;
        this.onActiveNodeChange(lastChildNode);
      } else {
        var activeNodeIndex = this.getActiveNodeIndex();
        var visibleNodesProps = this.visibleNodesPaths.map(this.getNodePropsByPath);
        var previousRootNode = (0, _getLastRootNode2.default)(activeNodeIndex, visibleNodesProps);
        if (!previousRootNode) {
          return null;
        }
        this.onActiveNodeChange(previousRootNode);
      }
    }
  }, {
    key: 'setFistRenderedNodeActive',
    value: function setFistRenderedNodeActive() {
      this.onActiveNodeChange(this.getNodePropsByPath(this.visibleNodesPaths[0]));
    }
  }, {
    key: 'setLastRenderedNodeActive',
    value: function setLastRenderedNodeActive() {
      this.onActiveNodeChange(this.getNodePropsByPath(this.visibleNodesPaths[this.visibleNodesPaths.length - 1]));
    }
  }, {
    key: 'setNextNodeActive',
    value: function setNextNodeActive() {
      var nextNodeProps = this.getNextNodeProps();
      if (!nextNodeProps) {
        return null;
      }
      this.onActiveNodeChange(nextNodeProps);
    }
  }, {
    key: 'toggleCollapseActiveNode',
    value: function toggleCollapseActiveNode() {
      var activeNodeProps = this.getActiveNodeProps();
      this.onNodeCollapseChange({
        collapsed: !activeNodeProps.collapsed,
        props: activeNodeProps
      });
    }
  }, {
    key: 'loadDataSource',
    value: function loadDataSource(dataSource) {
      var _this5 = this;

      if (Array.isArray(dataSource)) {
        if (this.state.loading) {
          this.setState({
            loading: false
          });
        }
        this.setData(dataSource);
        return;
      }

      if (dataSource && dataSource.then) {
        this.setState({
          loading: true
        });

        dataSource.then(function (data) {
          _this5.props.onDataSourceLoad(data);
          _this5.loadDataSource(data);
        });
        return;
      }

      if (typeof dataSource === 'function') {
        this.loadDataSource(dataSource(this.props));
        return;
      }

      if (dataSource === null) {
        return null;
      }

      if (!_uglified2.default) {
        console.error('\n        dataSource is not valid, it should be:\n        - array\n        - null\n        - promise\n        - function (props) => dataSource\n        instead got ' + (typeof dataSource === 'undefined' ? 'undefined' : _typeof(dataSource)) + '\n        ');
      }
    }
  }, {
    key: 'setData',
    value: function setData(data) {
      this.setState({
        data: data
      });
    }

    // getter methods

  }, {
    key: 'isLoading',
    value: function isLoading() {
      return this.props.loading != undefined ? this.props.loading : this.state.loading;
    }

    /**
     * Constructs path using pathProperty, pathSeparator and idProperty
     */

  }, {
    key: 'getPath',
    value: function getPath(_ref5) {
      var node = _ref5.node,
          index = _ref5.index,
          props = _ref5.props,
          parentPath = _ref5.parentPath;

      var isUnique = props.idProperty != null;

      var nodeIdentifier = void 0;
      if (isUnique) {
        nodeIdentifier = typeof props.idProperty === 'function' ? node[props.idProperty(node)] : node[props.idProperty];
      } else if (props.pathProperty == null) {
        nodeIdentifier = index;
      } else {
        nodeIdentifier = typeof props.pathProperty === 'function' ? node[props.pathProperty(node)] : node[props.pathProperty];
      }

      var path = void 0;
      if (isUnique) {
        path = nodeIdentifier;
      } else {
        path = '' + parentPath + (parentPath ? props.pathSeparator : '') + nodeIdentifier;
      }

      return path;
    }
  }, {
    key: 'getStyle',
    value: function getStyle(nodeProps) {
      var style = {};

      for (var _len = arguments.length, styles = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        styles[_key - 1] = arguments[_key];
      }

      styles.forEach(function (styleItem) {
        var newStyle = typeof styleItem === 'function' ? styleItem(nodeProps) : styleItem;

        (0, _assign6.default)(style, newStyle);
      });

      return style;
    }
  }, {
    key: 'getClassName',
    value: function getClassName(nodeProps) {
      var className = '';

      for (var _len2 = arguments.length, classNames = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
        classNames[_key2 - 1] = arguments[_key2];
      }

      classNames.forEach(function (classNameItem) {
        var newClassName = typeof classNameItem === 'function' ? classNameItem(nodeProps) : classNameItem;

        className = (0, _join2.default)(className, newClassName);
      });

      return className;
    }

    /**
     * Gets the collapsed map based on whether
     * the component is controlled or uncontrolled
     */

  }, {
    key: 'getCurrentCollapsedState',
    value: function getCurrentCollapsedState() {
      return this.isCollapsedControlled() ? this.props.collapsed : this.state.collapsed;
    }

    /**
     * Gets collapsed state using path based whther
     * the component is controlled or uncontrolled
     */

  }, {
    key: 'getNodeCollapsedState',
    value: function getNodeCollapsedState(path) {
      return this.isCollapsedControlled() ? this.props.collapsed[path] : this.state.collapsed[path];
    }

    /**
     * Gets the selected map based on whether
     * the component is controlled or uncontrolled
     */

  }, {
    key: 'getCurrentSelectedState',
    value: function getCurrentSelectedState() {
      return this.isSelectedControlled() ? this.props.selected : this.state.selected;
    }

    /**
     * Gets selected state using path based whther
     * the component is controlled or uncontrolled
     */

  }, {
    key: 'getNodeSelectedState',
    value: function getNodeSelectedState(path) {
      return this.isSelectedControlled() ? this.props.selected[path] : this.state.selected[path];
    }

    /**
     * Gets the checked map based on whether
     * the component is controlled or uncontrolled
     */

  }, {
    key: 'getCurrentCheckedState',
    value: function getCurrentCheckedState() {
      return this.isCheckedControlled() ? this.props.checked : this.state.checked;
    }
  }, {
    key: 'isCheckedEnabled',
    value: function isCheckedEnabled() {
      if (this.props.enableChecked) {
        return true;
      }
      if (this.props.enableChecked === false) {
        return false;
      }
      return !!this.getCurrentCheckedState();
    }

    /**
     * Gets the current active node based on whether
     * the component is controlled or uncontrolled
     */

  }, {
    key: 'getCurrentActiveNodeState',
    value: function getCurrentActiveNodeState() {
      return this.isActiveNodeControlled() ? this.props.activeNode : this.state.activeNode;
    }

    /**
     * Gets checked state using path based whther
     * the component is controlled or uncontrolled
     */

  }, {
    key: 'getNodeCheckedState',
    value: function getNodeCheckedState(path) {
      if (this.isCheckedControlled()) {
        return this.props.checked[path];
      }

      if (!this.state.checked) {
        return false;
      }
      return this.state.checked[path];
    }

    /**
     * Gets active node state using path based whther
     * the component is controlled or uncontrolled
     * @param path String
     */

  }, {
    key: 'getNodeActiveState',
    value: function getNodeActiveState(path) {
      return this.getCurrentActiveNodeState() === path;
    }

    /**
     * @return nextActiveProps Object - prevous node's props
     */

  }, {
    key: 'getPreviousNodeProps',
    value: function getPreviousNodeProps() {
      var currentActiveNodeIndex = this.getActiveNodeIndex();
      var previousNode = null;
      var index = currentActiveNodeIndex - 1;

      while (index >= 0) {
        var currentNodeProp = this.getNodePropsByPath(this.visibleNodesPaths[index]);
        if (currentNodeProp && !currentNodeProp.disabled) {
          previousNode = currentNodeProp;
          break;
        }

        index -= 1;
      }

      return previousNode;
    }

    /**
     * @return previousNodeProps Object - prevous node's props
     */

  }, {
    key: 'getNextNodeProps',
    value: function getNextNodeProps() {
      var currentActiveNodeIndex = this.getActiveNodeIndex();
      var index = currentActiveNodeIndex + 1;
      var nextNode = void 0;

      while (index < this.visibleNodesPaths.length) {
        var currentNode = this.getNodePropsByPath(this.visibleNodesPaths[index]);
        if (currentNode && !currentNode.disabled) {
          nextNode = currentNode;
          break;
        }

        index += 1;
      }

      return nextNode;
    }

    /**
     * @return {Number}
     */

  }, {
    key: 'getActiveNodeIndex',
    value: function getActiveNodeIndex() {
      /**
       * always have to search
       * cause index can be different
       */
      return this.visibleNodesPaths.indexOf(this.getCurrentActiveNodeState());
    }

    /**
     * @return {Object} active node props
     */

  }, {
    key: 'getActiveNodeProps',
    value: function getActiveNodeProps() {
      return this.getNodePropsByPath(this.getCurrentActiveNodeState()); // this.visibleNodesPaths[this.getActiveNodeIndex()]
    }

    /**
     * Returns whether a node is collapse in relation with
     * collapsedDepth and defaultCollapsedDepth
     * @instance {Object} props.collapsedDepth
     * @instance {Object} props.defaultCollapsedDepth
     * @instance {Object} props.collapsed
     * @instance {Object} props.defaultcollapsed
     * @return {Bool} collapsed
     */

  }, {
    key: 'getCollapsedDepthCollapseState',
    value: function getCollapsedDepthCollapseState(nodeProps) {
      /**
       * If collapsed or defaultCollapsed is specified
       * this has no effect
       */
      if (this.props.collapsed || this.props.defaultCollapsed) {
        return nodeProps.collapsed;
      }

      if (this.props.collapsedDepth != null) {
        return this.props.collapsedDepth <= nodeProps.depth;
      }

      /**
       * Used to get from state because, it will changed
       * to null when it is uncontrolled
       */
      if (this.state.collapsedDepth != null) {
        return this.state.collapsedDepth <= nodeProps.depth;
      }

      return nodeProps.collapsed;
    }

    /**
     * Returns an array of all node paths
     * @instance this.nodePropsMap
     * @return {Array} allNodePaths
     */

  }, {
    key: 'getPathsList',
    value: function getPathsList() {
      return this.nodePropsMap && Object.keys(this.nodePropsMap);
    }

    /**
     * Returns a map of all paths with value true
     * @instance getAllPaths
     * @return {Object} allPathMapTrue
     */

  }, {
    key: 'getAllPathMapTrue',
    value: function getAllPathMapTrue() {
      var pathList = this.getPathsList();
      return pathList && pathList.reduce(function (acc, path) {
        acc[path] = true;

        return acc;
      }, {});
    }
  }, {
    key: 'getNodePropsByPath',
    value: function getNodePropsByPath(path) {
      return this.nodePropsMap[path];
    }

    // state utils

  }, {
    key: 'isCollapsedControlled',
    value: function isCollapsedControlled() {
      return !!this.props.collapsed;
    }
  }, {
    key: 'isCollapsedDepthControlled',
    value: function isCollapsedDepthControlled() {
      return !!this.props.collapsedDepth;
    }
  }, {
    key: 'isSelectedControlled',
    value: function isSelectedControlled() {
      return !!this.props.selected;
    }
  }, {
    key: 'isCheckedControlled',
    value: function isCheckedControlled() {
      return !!this.props.checked;
    }
  }, {
    key: 'isActiveNodeControlled',
    value: function isActiveNodeControlled() {
      return this.props.activeNode != null;
    }
  }, {
    key: 'isFiltered',
    value: function isFiltered() {
      return !(0, _shallowequal2.default)(this.getAllPathMapTrue(), this.filteredNodes);
    }
  }, {
    key: 'hasFilterChanged',
    value: function hasFilterChanged() {
      return !(0, _shallowequal2.default)(this.filteredNodes, this.previousFilteredNodes);
    }
  }, {
    key: 'hasFocus',
    value: function hasFocus() {
      return this.node === (global.document && global.document.activeElement);
    }
  }, {
    key: 'focus',
    value: function focus() {
      if (this.node) {
        this.node.focus();
      } else {
        return null;
      }
    }

    // methods

  }, {
    key: 'collapseAll',
    value: function collapseAll() {
      var collapseAllState = this.getAllPathMapTrue();

      if (!this.isCollapsedControlled()) {
        this.setState({
          collapsed: collapseAllState,
          collapsedDepth: null
        });
      }

      this.props.onCollapsedChange(collapseAllState);

      if (this.props.onCollapsedDepthChange) {
        this.props.onCollapsedDepthChange(null);
      }

      return collapseAllState;
    }

    /**
     * New collapsed state should not change
     * async nodes collapsed state
     */

  }, {
    key: 'expandAll',
    value: function expandAll() {
      var _this6 = this;

      var newCollapsed = {};
      var collapsed = this.getCurrentCollapsedState();
      Object.keys(this.nodePropsMap).forEach(function (path) {
        var nodeProps = _this6.nodePropsMap[path];
        if (nodeProps.async) {
          newCollapsed[nodeProps.path] = collapsed[nodeProps.path];
        }
      });

      (0, _cleanUpFalseProps2.default)(newCollapsed);

      if (!this.isCollapsedControlled()) {
        this.setState({
          collapsed: newCollapsed,
          collapsedDepth: null
        });
      }

      this.props.onCollapsedChange(newCollapsed);

      if (this.props.onCollapsedDepthChange) {
        this.props.onCollapsedDepthChange(null);
      }

      return newCollapsed;
    }

    /**
     * Collapses node at path
     * @param {String} path
     * @return {Object} collapsed new collapsed state
     */

  }, {
    key: 'collapseNode',
    value: function collapseNode(path) {
      var newCollapsed = this.onNodeCollapseChange({
        props: this.getNodePropsByPath(path),
        collapsed: true
      });

      return newCollapsed;
    }

    /**
     * Updates collapsed state
     * @param collapsed
     * @return collapsed
     */

  }, {
    key: 'setCollapsed',
    value: function setCollapsed(collapsed) {
      if (!this.isCollapsedControlled()) {
        this.setState({ collapsed: collapsed });
      }

      this.props.onCollapsedChange(collapsed);

      return collapsed;
    }

    /**
     * Expands node at path
     * @param {String} path
     * @return {Object} collapsed new collapsed state
     */

  }, {
    key: 'expandNode',
    value: function expandNode(path) {
      var newCollapsed = this.onNodeCollapseChange({
        props: this.getNodePropsByPath(path),
        collapsed: false
      });

      return newCollapsed;
    }

    /**
     * checks node at path
     * @param {String} path
     * @return {Object} checked new checked state
     */

  }, {
    key: 'checkNode',
    value: function checkNode(path) {
      var nodeProps = this.getNodePropsByPath(path);
      if (!nodeProps) {
        return null;
      }

      var newChecked = this.onCheckedChange({
        props: nodeProps,
        checked: true
      });

      return newChecked;
    }

    /**
     * unChecks node at path
     * @param {String} path
     * @return {Object} checked new checked state
     */

  }, {
    key: 'uncheckNode',
    value: function uncheckNode(path) {
      var nodeProps = this.getNodePropsByPath(path);
      if (!nodeProps) {
        return null;
      }

      var newChecked = this.onCheckedChange({
        props: nodeProps,
        checked: false
      });

      return newChecked;
    }

    /**
     * checkes all nodes
     * @instance {Function} getAllPathMapTrue
     * @instance {Bool} enableChecked
     * @return {Object|null} newChecked
     */

  }, {
    key: 'checkAll',
    value: function checkAll() {
      if (!this.props.enableChecked) {
        return null;
      }

      var newChecked = this.getAllPathMapTrue();
      if (!this.isSelectedControlled()) {
        this.setState({
          checked: newChecked
        });
      }

      return newChecked;
    }

    /**
     * checkes all nodes
     * @instance {Function} getAllPathMapTrue
     * @instance {Bool} enableChecked
     * @return {Object|null} newChecked
     */

  }, {
    key: 'uncheckAll',
    value: function uncheckAll() {
      if (!this.props.enableChecked) {
        return null;
      }

      var newChecked = {};
      if (!this.isSelectedControlled()) {
        this.setState({
          checked: newChecked
        });
      }

      return newChecked;
    }
  }, {
    key: 'setActiveNode',
    value: function setActiveNode(path) {
      var nodeProps = this.getNodePropsByPath(path);

      if (!nodeProps) {
        return null;
      }

      this.onActiveNodeChange(nodeProps);

      return path;
    }

    /**
     * selects node at path
     * @param {String} path
     * @return {Object} selected
     */

  }, {
    key: 'selectNode',
    value: function selectNode(path) {
      var newSelected = this.onSelectionChange({
        props: this.getNodePropsByPath(path),
        selected: true
      });

      return newSelected;
    }

    /**
     * deselects node at path
     * @param {String} path
     * @return {Object} selected
     */

  }, {
    key: 'deselectNode',
    value: function deselectNode(path) {
      var newSelected = this.onSelectionChange({
        props: this.getNodePropsByPath(path),
        selected: false
      });

      return newSelected;
    }

    /**
     * selects all nodes
     * @instance {Function} getAllPathMapTrue
     * @instance {Bool} enableSelection
     * @return {Object|null} newSelected
     */

  }, {
    key: 'selectAll',
    value: function selectAll() {
      if (!this.props.enableSelection) {
        return null;
      }

      var newSelected = this.getAllPathMapTrue();
      if (!this.isSelectedControlled()) {
        this.setState({
          selected: newSelected
        });
      }

      return newSelected;
    }

    /**
     * deselects all nodes
     * @instance {Function} getAllPathMapTrue
     * @instance {Bool} enableSelection
     * @return {Object|null} newSelected
     */

  }, {
    key: 'deselectAll',
    value: function deselectAll() {
      if (!this.props.enableSelection) {
        return null;
      }

      var newSelected = {};
      if (!this.isSelectedControlled()) {
        this.setState({
          selected: newSelected
        });
      }

      return newSelected;
    }

    /**
     * Updates selected state
     * it does't trigger onSelectionChange
     * as it updates all state not a single node
     * @param {Object} newSelected - new selected state
     * @return {Object} newSelected
     */

  }, {
    key: 'setSelected',
    value: function setSelected(newSelected) {
      if (!this.isSelectedControlled() && this.props.enableSelection) {
        this.setState({
          selected: newSelected
        });
      } else {
        return null;
      }

      return newSelected;
    }
  }, {
    key: 'setChecked',
    value: function setChecked(newChecked) {
      if (!this.isCheckedControlled() && this.props.enableChecked) {
        this.setState({
          checked: newChecked
        });
      } else {
        return null;
      }

      return newChecked;
    }
  }, {
    key: 'scrollNodeIntoView',
    value: function scrollNodeIntoView(nodeBoundingRect) {
      var _this7 = this;

      setTimeout(function () {
        var parentRect = _this7.node.getBoundingClientRect();
        var scrollTop = _this7.node.scrollTop;
        var nodeOffsetTop = nodeBoundingRect.top - parentRect.top + scrollTop;
        var parentHeight = _this7.node.offsetHeight;

        // should bring into view top
        if (scrollTop > nodeOffsetTop) {
          _this7.node.scrollTop = nodeOffsetTop;
        }

        // at the bottom, have to scroll more
        if (scrollTop + parentHeight < nodeBoundingRect.height + nodeOffsetTop) {
          _this7.node.scrollTop = nodeOffsetTop + nodeBoundingRect.height - parentHeight;
        }
      }, 16);
    }
  }]);

  return ZippyTreeView;
}(_react.Component);

ZippyTreeView.defaultProps = {
  rootClassName: 'zippy-react-toolkit-tree-view',
  dataSource: null,
  checkBeforeIcon: true,
  checkOnClick: undefined,

  // rtl
  rtl: false,

  // style
  theme: 'default',
  style: {},

  // envents
  onDataSourceLoad: function onDataSourceLoad() {},

  // path
  pathSeparator: '/',
  // if not defined it will use index
  pathProperty: null,
  idProperty: null,

  // node styles and classnames
  nodeStyle: null,

  // collapsed
  collapsed: null,
  defaultCollapsed: null,
  onNodeCollapseChange: function onNodeCollapseChange() {},

  expandOnToolOnly: true,
  expandOnDoubleClick: false,

  // collapse depth
  onCollapsedDepthChange: function onCollapsedDepthChange() {},
  onCollapsedChange: function onCollapsedChange() {},

  // async nodes
  onNodeLoad: function onNodeLoad() {},

  // animation
  transition: true,
  transitionDuration: 300,

  // selection
  enableSelection: false,
  defaultSelected: {},
  onSelectionChange: function onSelectionChange() {},
  singleSelect: false,

  // check
  enableChecked: undefined,
  defaultChecked: undefined,
  checkOnSelect: false,
  onCheckedChange: function onCheckedChange() {},
  checkNodesRecursive: true,

  // disabled
  disabled: {},

  // active - keyboard navigation
  activeNode: null,
  defaultActiveNode: null,
  // if enableKeyboardNavigation is not true,
  // there cannot be an active item
  enableKeyboardNavigation: true,
  onActiveNodeChange: function onActiveNodeChange() {},

  nestingIndentation: 20,
  enableHoverStyle: true,
  enableScrollNodeIntoView: true,
  expandToolSize: 20
};

ZippyTreeView.propTypes = {
  rootClassName: _propTypes2.default.string,
  dataSource: function dataSource(props, propName) {
    var dataSource = props[propName];

    if (dataSource === undefined) {
      return new Error('dataSource prop is required.');
    }

    if (dataSource !== null && typeof dataSource !== 'function' && !Array.isArray(dataSource) && !(dataSource && dataSource.then)) {
      return new Error('dataSource must be an array, null, a promise or a function returning a promise.');
    }
  },
  loading: _propTypes2.default.bool,
  checkBeforeIcon: _propTypes2.default.bool,
  renderInput: _propTypes2.default.any,

  // rtl
  rtl: _propTypes2.default.bool,

  // events
  onDataSourceLoad: _propTypes2.default.func,

  // style
  className: _propTypes2.default.string,
  theme: _propTypes2.default.string,
  style: _propTypes2.default.object,

  // path
  pathSeparator: _propTypes2.default.string,
  pathProperty: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.func]),
  idProperty: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.func]),

  //context menu
  renderNodeContextMenu: _propTypes2.default.func,

  // custom renderres
  renderLabel: _propTypes2.default.func,
  renderNode: _propTypes2.default.func,
  renderContent: _propTypes2.default.func,
  renderIcon: _propTypes2.default.func,
  renderNodeText: _propTypes2.default.func,

  // icons
  nodeIcon: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.node]),
  nodeCollapsedIcon: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.node]),
  leafNodeIcon: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.node]),

  // filter
  filter: _propTypes2.default.func,

  // node styles and classnames
  nodeStyle: _propTypes2.default.oneOfType([_propTypes2.default.object, _propTypes2.default.func]),
  labelStyle: _propTypes2.default.oneOfType([_propTypes2.default.object, _propTypes2.default.func]),
  contentStyle: _propTypes2.default.oneOfType([_propTypes2.default.object, _propTypes2.default.func]),

  nodeClassName: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.func]),
  labelClassName: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.func]),
  contentClassName: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.func]),

  // collapsed
  collapsed: _propTypes2.default.object,
  defaultCollapsed: _propTypes2.default.object,
  onNodeCollapseChange: _propTypes2.default.func,
  isNodeCollapsed: _propTypes2.default.func,

  expandOnToolOnly: _propTypes2.default.bool,
  expandOnDoubleClick: _propTypes2.default.bool,

  // collapsedDepth
  collapsedDepth: _propTypes2.default.number,
  defaultCollapsedDepth: _propTypes2.default.number,
  onCollapsedDepthChange: _propTypes2.default.func,
  onCollapsedChange: _propTypes2.default.func,

  // selection
  enableSelection: _propTypes2.default.bool,
  defaultSelected: _propTypes2.default.object,
  onSelectionChange: _propTypes2.default.func,
  isNodeSelected: _propTypes2.default.func,
  singleSelect: _propTypes2.default.bool,

  // check
  enableChecked: _propTypes2.default.bool,
  checked: _propTypes2.default.object,
  renderCheck: _propTypes2.default.oneOfType([_propTypes2.default.func, _propTypes2.default.bool]),
  checkOnSelect: _propTypes2.default.bool,
  onCheckedChange: _propTypes2.default.func,
  checkNodesRecursive: _propTypes2.default.bool,
  isNodeChecked: _propTypes2.default.func,
  checkOnClick: _propTypes2.default.bool,

  // active + navigation
  activeNode: _propTypes2.default.string,
  defaultActiveNode: _propTypes2.default.string,
  enableKeyboardNavigation: _propTypes2.default.bool,
  onActiveNodeChange: _propTypes2.default.func,

  // disabled
  disabled: _propTypes2.default.object,
  isNodeDisabled: _propTypes2.default.func,

  // animation
  transition: _propTypes2.default.bool,
  transitionDuration: _propTypes2.default.number,

  expandTool: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.node, _propTypes2.default.func]),

  // async nodes
  loadNode: _propTypes2.default.func,
  loadNodeOnce: _propTypes2.default.func,
  onNodeLoad: _propTypes2.default.func,
  loadTool: _propTypes2.default.oneOfType([_propTypes2.default.node, _propTypes2.default.func]),
  isNodeAsync: _propTypes2.default.func,

  // treelines
  treeLines: _propTypes2.default.oneOfType([_propTypes2.default.bool, _propTypes2.default.string]),
  nestingIndentation: _propTypes2.default.number,
  renderLoader: _propTypes2.default.func,

  enableHoverStyle: _propTypes2.default.bool,
  enableScrollNodeIntoView: _propTypes2.default.bool,
  expandToolSize: _propTypes2.default.number
};

exports.default = ZippyTreeView;
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _assign = require('../../../common/assign');

var _assign2 = _interopRequireDefault(_assign);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; } /**
                                                                                                                                                                                                                   * Copyright (c) 2015-present, Zippy Technologies
                                                                                                                                                                                                                   *
                                                                                                                                                                                                                   * This source code is licensed under the MIT license found in the
                                                                                                                                                                                                                   * LICENSE file in the root directory of this source tree.
                                                                                                                                                                                                                   */

/**
 * Returns a map with all it children
 * checked or uncheded, depending on
 * check value
 * @param {Object} nodeProps - nodeProps
 * @param {Bool} checked
 * @return {Object} checkMap
 */
function changeChildrenProperty(nodeProps, newState) {
  var propertyMap = _defineProperty({}, nodeProps.path, newState);
  if (nodeProps.children) {
    var children = nodeProps.children.map(function (child) {
      return changeChildrenProperty(child.props, newState);
    });

    children.forEach(function (child) {
      (0, _assign2.default)(propertyMap, child);
    });
  }

  return propertyMap;
}

exports.default = changeChildrenProperty;
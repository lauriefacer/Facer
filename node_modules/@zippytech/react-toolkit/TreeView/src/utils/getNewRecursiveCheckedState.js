'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _objectAssign = require('object-assign');

var _objectAssign2 = _interopRequireDefault(_objectAssign);

var _changeChildrenCheckProperty = require('./changeChildrenCheckProperty');

var _changeChildrenCheckProperty2 = _interopRequireDefault(_changeChildrenCheckProperty);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; } /**
                                                                                                                                                                                                                   * Copyright (c) 2015-present, Zippy Technologies
                                                                                                                                                                                                                   *
                                                                                                                                                                                                                   * This source code is licensed under the MIT license found in the
                                                                                                                                                                                                                   * LICENSE file in the root directory of this source tree.
                                                                                                                                                                                                                   */

/**
 * Given the current state and a node that has been modified
 * it calculates next checkMap state
 * 1 - get previous full state tree
 * 2 - go to change
 * 3 - propagate change to it's children
 * 4 - propagate change to it's parents
 * @return {Object} new activeMap
 */
function getNewRecursiveCheckedState(_ref) {
  var nodeProps = _ref.nodeProps,
      checked = _ref.checked,
      currentState = _ref.currentState;

  // update previous state
  var newCheckedMap = (0, _objectAssign2.default)({}, currentState);

  // update node children
  newCheckedMap = (0, _objectAssign2.default)(newCheckedMap, (0, _changeChildrenCheckProperty2.default)(nodeProps, checked));

  // propagate to parents
  newCheckedMap = (0, _objectAssign2.default)(newCheckedMap, changeParentsCheck(nodeProps, newCheckedMap));

  return newCheckedMap;
}

/**
 * Walks each parent and calls checkParent on it
 * @param {Object} nodeProps
 * @param {Object} checkMap
 * @return {Object} checkMap - return new checkMap with parents updated
 */
function changeParentsCheck(nodeProps, checkMap) {
  var newCheckMap = (0, _objectAssign2.default)({}, checkMap);

  /**
   * Check self and then it's parents
   */
  if (nodeProps.children) {
    (0, _objectAssign2.default)(newCheckMap, checkParent(nodeProps, newCheckMap));
  }

  /**
   * Walk to next parent and tell it to check whether
   * it is:
   * - checked
   * - unchecked
   * - indeterminated
   */
  walkParents(nodeProps, function (parent) {
    newCheckMap = (0, _objectAssign2.default)(newCheckMap, checkParent(parent, newCheckMap));
  });

  return newCheckMap;
}

/**
 * Tests how it's children and decides whether it is checked, unchecked
 * or indeterminated
 * @param {Object} parent
 * @param {Object} newCheckMap
 * @return {Object} parentNewState - returns the check value for this parent
 */
function checkParent(parent, newCheckedMap) {
  var childrenLength = parent.children.length;
  var checkedChildren = parent.children.filter(function (child) {
    return newCheckedMap[child.props.path] === true;
  });
  var checkedChildrenLength = checkedChildren.length;
  var indeterminatedChildren = parent.children.filter(function (child) {
    return newCheckedMap[child.props.path] === null;
  });
  var indeterminatedChildrenLength = indeterminatedChildren.length;

  var newParentCheck = parent.checked;
  if (childrenLength === checkedChildrenLength) {
    newParentCheck = true;
  } else if (indeterminatedChildrenLength > 0 || checkedChildrenLength > 0) {
    newParentCheck = null;
  } else {
    newParentCheck = false;
  }

  return _defineProperty({}, parent.path, newParentCheck);
}

/**
 * Walks parents of given node,
 * and calls a callback with that parent
 * @param {Object} nodeProps
 * @param {Function} cb
 * @return {void}
 */
function walkParents(nodeProps, cb) {
  var root = nodeProps.parent;
  while (root) {
    cb(root);
    root = root.parent;
  }
}

exports.default = getNewRecursiveCheckedState;
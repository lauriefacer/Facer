'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _TreeView = require('./TreeView');

var _TreeView2 = _interopRequireDefault(_TreeView);

var _autoBind = require('@zippytech/react-class/autoBind');

var _autoBind2 = _interopRequireDefault(_autoBind);

var _join = require('../../common/join');

var _join2 = _interopRequireDefault(_join);

var _cleanProps = require('../../common/cleanProps');

var _cleanProps2 = _interopRequireDefault(_cleanProps);

var _constructMatchText = require('./utils/constructMatchText');

var _constructMatchText2 = _interopRequireDefault(_constructMatchText);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Copyright (c) 2015-present, Zippy Technologies
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * This source code is licensed under the MIT license found in the
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * LICENSE file in the root directory of this source tree.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */

var ZippySearchTreeView = function (_Component) {
  _inherits(ZippySearchTreeView, _Component);

  function ZippySearchTreeView(props) {
    _classCallCheck(this, ZippySearchTreeView);

    var _this = _possibleConstructorReturn(this, (ZippySearchTreeView.__proto__ || Object.getPrototypeOf(ZippySearchTreeView)).call(this, props));

    (0, _autoBind2.default)(_this);

    _this.state = {
      searchText: props.defaultSearchText
    };
    return _this;
  }

  _createClass(ZippySearchTreeView, [{
    key: 'render',
    value: function render() {
      var _this2 = this;

      var result = void 0;
      var props = this.props;

      var className = (0, _join2.default)(this.props.className, props.rootClassName);

      var searchText = this.getSearchText();
      var regex = this.regex = new RegExp(searchText, 'gi');

      var filter = this.props.filter;

      if (searchText && !filter) {
        filter = function filter(_ref) {
          var node = _ref.node;
          return node.label && node.label.match && node.label.match(regex);
        };
      }

      var input = this.renderInput();
      var tree = _react2.default.createElement(_TreeView2.default, _extends({}, (0, _cleanProps2.default)(this.props, ZippySearchTreeView.propTypes), {
        ref: function ref(el) {
          return _this2.treeView = el;
        },
        className: className,
        renderNodeText: this.renderNodeText,
        filter: filter
      }));

      /**
       * If filter is defined, it should
       * just render the tree-view naked
       * as the client should handle filter function.
       */
      if (input && !this.props.filter) {
        result = _react2.default.createElement(
          'div',
          this.wrapperProps,
          input,
          tree
        );
      } else {
        result = tree;
      }

      return result;
    }
  }, {
    key: 'renderInput',
    value: function renderInput() {
      var result = void 0;
      var inputProps = {
        className: this.props.rootClassName + '__input',
        value: this.getSearchText(),
        onChange: this.onSearchTextChange
      };

      if (this.props.renderInput) {
        result = this.props.renderInput(inputProps, this.props);
      }

      if (result === undefined) {
        result = _react2.default.createElement('input', inputProps);
      }

      return result;
    }
  }, {
    key: 'renderNodeText',
    value: function renderNodeText(domProps, nodeProps) {
      var _this3 = this;

      var searchText = this.getSearchText();
      if (searchText.length && !this.props.filter) {
        var _nodeProps = nodeProps,
            node = _nodeProps.node;

        var matchFound = node.label && node.label.match && node.label.match(this.regex);

        if (!matchFound) {
          if (this.props.renderNodeText) {
            return this.props.renderNodeText(domProps, nodeProps);
          }
          return undefined;
        }

        var matchArray = (0, _constructMatchText2.default)(node.label, this.regex, searchText);

        var key = nodeProps.path;
        if (this.props.renderNodeText) {
          nodeProps = _extends({}, nodeProps, { matchText: matchArray });
          return this.props.renderNodeText(domProps, nodeProps);
        }

        return _react2.default.createElement(
          'div',
          _extends({}, domProps, { key: key }),
          matchArray.map(function (text, index) {
            if ((typeof text === 'undefined' ? 'undefined' : _typeof(text)) === 'object') {
              return _react2.default.createElement(
                'span',
                {
                  key: index,
                  className: _this3.props.rootClassName + '__hightlight'
                },
                text.match
              );
            }
            /**
             * If the text is without wrapper react will add white space
             * with html comments, this will add extra space because
             * node-text has css props `white-space: pre` so space is not collpased
             * when highlighted subtring has space
             */
            return _react2.default.createElement(
              'span',
              {
                key: index,
                className: _this3.props.rootClassName + '__non_hightlight'
              },
              text
            );
          })
        );
      } else {
        if (this.props.renderNodeText) {
          return this.props.renderNodeText(domProps, nodeProps);
        }
      }
    }
  }, {
    key: 'onSearchTextChange',
    value: function onSearchTextChange(event) {
      var value = event.target.value;

      this.props.onSearchTextChange(value);

      if (!this.isSearchTextControlled()) {
        this.setState({
          searchText: value
        });
      }
    }
  }, {
    key: 'getSearchText',
    value: function getSearchText() {
      return this.isSearchTextControlled() ? this.props.searchText : this.state.searchText;
    }
  }, {
    key: 'isSearchTextControlled',
    value: function isSearchTextControlled() {
      return this.props.searchText !== undefined;
    }
  }, {
    key: 'getTreeViewInstance',
    value: function getTreeViewInstance() {
      return this.treeView;
    }
  }, {
    key: 'isSearchActive',
    value: function isSearchActive() {
      return this.getSearchText() !== '';
    }
  }]);

  return ZippySearchTreeView;
}(_react.Component);

ZippySearchTreeView.defaultProps = {
  rootClassName: 'zippy-react-toolkit-search-tree-view',
  defaultSearchText: '',
  wrapperProps: {},
  onSearchTextChange: function onSearchTextChange() {}
};

ZippySearchTreeView.propTypes = {
  rootClassName: _propTypes2.default.string,
  searchText: _propTypes2.default.string,
  filter: _propTypes2.default.func,
  defaultSearchText: _propTypes2.default.string,
  onSearchTextChange: _propTypes2.default.func,
  wrapperProps: _propTypes2.default.object
};

exports.default = ZippySearchTreeView;
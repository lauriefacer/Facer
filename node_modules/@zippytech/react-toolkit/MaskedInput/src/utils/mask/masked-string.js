'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = getMaskedString;
/**
 * Copyright (c) 2015-present, Zippy Technologies
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/**
 * Given a string value and a config with mask and maskDefinitions
 * will return a string where the mask is intersected with the value,
 * based on the maskedDefinition rules. Each character that matches
 * the un identified mask characters will be copied from the mask;
 *
 * Every character that matches the mask definition for each mask position
 * will replace the mask content.
 *
 * The first invalid character from value will stop the iteration and all
 * characters from the mask will be replaced with the maskFiller character
 *
 * @return Array[resultString, firstInvalidCharacterInValue]
 */
function getMaskedString() {
  var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
  var props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var mask = props.mask,
      _props$maskDefinition = props.maskDefinitions,
      maskDefinitions = _props$maskDefinition === undefined ? {} : _props$maskDefinition,
      _props$maskFiller = props.maskFiller,
      maskFiller = _props$maskFiller === undefined ? '_' : _props$maskFiller;


  if (!mask) {
    return [value, -1, -1];
  }

  var definitionKeys = Object.keys(maskDefinitions).filter(function (key) {
    return !!maskDefinitions[key];
  });
  if (!maskDefinitions || !definitionKeys.length) {
    return [mask, -1, -1];
  }

  if (typeof value !== 'string') {
    value = '' + value;
  }

  var maskCharArray = mask.split('');
  var valueCharArray = value.split('');

  var result = maskCharArray.reduce(function (accumulator, charFromMask, idx) {
    var matchedDefinitionKey = ~definitionKeys.indexOf(charFromMask);

    if (matchedDefinitionKey) {
      var indexRelativeToValueArray = idx - accumulator.skippedChars;
      if (indexRelativeToValueArray < valueCharArray.length && accumulator.invaidMaskIdx === -1) {
        var valueAtCurrentIndex = valueCharArray[indexRelativeToValueArray];

        if (~valueAtCurrentIndex.search(maskDefinitions[charFromMask])) {
          accumulator.values.push(valueAtCurrentIndex);
        } else {
          accumulator.invaidMaskIdx = idx;
          accumulator.invalidValueIdx = indexRelativeToValueArray;
          accumulator.values.push(maskFiller);
        }
      } else {
        // value does not reach the current mask character
        // the character is matched by a definition
        accumulator.values.push(maskFiller);
      }
    } else {
      accumulator.skippedChars++;
      // mask contains element that is not part of the definition
      accumulator.values.push(charFromMask);
    }

    return accumulator;
  }, { values: [], invaidMaskIdx: -1, skippedChars: 0 });

  return [result.values.join(''), result.invalidValueIdx, result.invaidMaskIdx];
}

var getValueCharCountInMask = function getValueCharCountInMask(mask, maskDefinitions) {
  if (!mask) {
    return 0;
  }

  var definitionKeys = Object.keys(maskDefinitions).filter(function (key) {
    return !!maskDefinitions[key];
  });

  if (!maskDefinitions || !definitionKeys.length) {
    return mask.length;
  }

  return mask.split('').reduce(function (valueCharCount, charFromMask) {
    if (~definitionKeys.indexOf(charFromMask)) {
      valueCharCount++;
    }

    return valueCharCount;
  }, 0);
};

/**
 * given a new string value, a mask and mask definition, it will return
 * the position in the mask where the next value is or the end of the mask.
 *
 * Used to figure out where to place the cursor in the masked string while
 * typing.
 */
var getPositionInMaskedStringBasedOnValue = function getPositionInMaskedStringBasedOnValue() {
  var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
  var props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var mask = props.mask,
      _props$maskDefinition2 = props.maskDefinitions,
      maskDefinitions = _props$maskDefinition2 === undefined ? {} : _props$maskDefinition2;


  if (!mask) {
    return -1;
  }

  var definitionKeys = Object.keys(maskDefinitions).filter(function (key) {
    return !!maskDefinitions[key];
  });

  if (!maskDefinitions || !definitionKeys.length) {
    return -1;
  }

  var maskCharArray = mask.split('');

  var result = maskCharArray.reduce(function (accumulator, charFromMask, idx) {
    var matchedDefinitionKey = ~definitionKeys.indexOf(charFromMask);
    var valueAtIndex = value[accumulator.valueIterator];

    if (matchedDefinitionKey) {
      if (valueAtIndex) {
        accumulator.valueIterator++;
      } else {
        accumulator.keepCounting = false;
      }
    } else {
      if (accumulator.keepCounting) {
        accumulator.skippedMaskedChars++;
      }
    }

    return accumulator;
  }, { valueIterator: 0, skippedMaskedChars: 0, keepCounting: true });

  return result.valueIterator + result.skippedMaskedChars;
};

var countPositionsWithFillerValues = function countPositionsWithFillerValues(_ref) {
  var maskCharArray = _ref.maskCharArray,
      definitionKeys = _ref.definitionKeys,
      maskDefinitions = _ref.maskDefinitions,
      start = _ref.start,
      end = _ref.end;

  return maskCharArray.slice(start, end).reduce(function (count, maskChar, index) {
    if (definitionKeys.indexOf(maskChar) === -1) {
      count++;
    }
    return count;
  }, 0);
};

var getValueSelectionRangeFromMaskedSelectionRange = function getValueSelectionRangeFromMaskedSelectionRange() {
  var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
  var props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var _props$start = props.start,
      start = _props$start === undefined ? 0 : _props$start,
      _props$end = props.end,
      end = _props$end === undefined ? 0 : _props$end,
      mask = props.mask,
      _props$maskDefinition3 = props.maskDefinitions,
      maskDefinitions = _props$maskDefinition3 === undefined ? {} : _props$maskDefinition3;


  if (!mask) {
    return [-1, -1];
  }

  var definitionKeys = Object.keys(maskDefinitions).filter(function (key) {
    return !!maskDefinitions[key];
  });

  if (!maskDefinitions || !definitionKeys.length) {
    return [-1, -1];
  }

  var maskCharArray = mask.split('');

  var fillersTillStart = countPositionsWithFillerValues({
    maskCharArray: maskCharArray,
    definitionKeys: definitionKeys,
    maskDefinitions: maskDefinitions,
    start: 0,
    end: start
  });

  var fillersBetweenStartTillEnd = countPositionsWithFillerValues({
    maskCharArray: maskCharArray,
    definitionKeys: definitionKeys,
    maskDefinitions: maskDefinitions,
    start: start,
    end: end
  });

  var realValuesBeforeStart = start - fillersTillStart;
  var realValuesBetween = end - start - fillersBetweenStartTillEnd;

  var computedStartRangeInValue = realValuesBeforeStart;
  var computedEndRangeInValue = realValuesBetween + realValuesBeforeStart;

  if (realValuesBeforeStart > value.length) {
    computedStartRangeInValue = 0;
  }

  if (computedEndRangeInValue > value.length) {
    computedEndRangeInValue = value.length;
  }

  return [computedStartRangeInValue, computedEndRangeInValue];
};

var getPreviousRealValuePosition = function getPreviousRealValuePosition() {
  var posInMask = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
  var props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  if (!posInMask) {
    return 0;
  }

  var mask = props.mask,
      _props$maskDefinition4 = props.maskDefinitions,
      maskDefinitions = _props$maskDefinition4 === undefined ? {} : _props$maskDefinition4;


  if (!mask) {
    return 0;
  }

  var definitionKeys = Object.keys(maskDefinitions).filter(function (key) {
    return !!maskDefinitions[key];
  });

  if (!maskDefinitions || !definitionKeys.length) {
    return 0;
  }

  var subMaskChars = mask.substring(0, posInMask).split('').reverse();

  var result = subMaskChars.reduce(function (accumulator, charFromMask, index) {
    var found = accumulator.found,
        position = accumulator.position;

    if (!found) {
      if (definitionKeys.indexOf(charFromMask) !== -1) {
        accumulator.found = true;
        accumulator.position = subMaskChars.length - index - 1;
      }
    }

    return accumulator;
  }, { position: 0, found: false });

  return result.position;
};

var getNextRealValuePosition = function getNextRealValuePosition() {
  var posInMask = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
  var props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  posInMask = posInMask || 0;

  var mask = props.mask,
      _props$maskDefinition5 = props.maskDefinitions,
      maskDefinitions = _props$maskDefinition5 === undefined ? {} : _props$maskDefinition5;


  if (!mask) {
    return 0;
  }

  var definitionKeys = Object.keys(maskDefinitions).filter(function (key) {
    return !!maskDefinitions[key];
  });

  if (!maskDefinitions || !definitionKeys.length) {
    return 0;
  }

  var subMaskChars = mask.substring(posInMask + 1).split('');

  if (subMaskChars.length === 0) {
    return posInMask + 1;
  }

  var result = subMaskChars.reduce(function (accumulator, charFromMask, index) {
    var found = accumulator.found,
        position = accumulator.position;

    if (!found) {
      if (definitionKeys.indexOf(charFromMask) !== -1) {
        accumulator.found = true;
        accumulator.position = posInMask + index + 1;
      }

      if (index === subMaskChars.length) {
        accumulator.position = index;
      }
    }

    return accumulator;
  }, { position: mask.length, found: false });

  return result.position;
};

exports.getPositionInMaskedStringBasedOnValue = getPositionInMaskedStringBasedOnValue;
exports.getMaskedString = getMaskedString;
exports.getValueSelectionRangeFromMaskedSelectionRange = getValueSelectionRangeFromMaskedSelectionRange;
exports.getPreviousRealValuePosition = getPreviousRealValuePosition;
exports.getNextRealValuePosition = getNextRealValuePosition;
exports.getValueCharCountInMask = getValueCharCountInMask;
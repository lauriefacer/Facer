'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CLASS_NAME = exports.getClassNames = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; /**
                                                                                                                                                                                                                                                                   * Copyright (c) 2015-present, Zippy Technologies
                                                                                                                                                                                                                                                                   *
                                                                                                                                                                                                                                                                   * This source code is licensed under the MIT license found in the
                                                                                                                                                                                                                                                                   * LICENSE file in the root directory of this source tree.
                                                                                                                                                                                                                                                                   */

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _cleanProps = require('../../common/cleanProps');

var _cleanProps2 = _interopRequireDefault(_cleanProps);

var _raf = require('../../common/raf');

var _raf2 = _interopRequireDefault(_raf);

var _throttle = require('../../common/throttle');

var _throttle2 = _interopRequireDefault(_throttle);

var _join = require('./utils/join');

var _join2 = _interopRequireDefault(_join);

var _shouldComponentUpdate2 = require('./utils/shouldComponentUpdate');

var _shouldComponentUpdate3 = _interopRequireDefault(_shouldComponentUpdate2);

var _maskedString = require('./utils/mask/masked-string');

var _setCaretPosition = require('./utils/set-caret-position');

var _setCaretPosition2 = _interopRequireDefault(_setCaretPosition);

var _getSelectionStart = require('./utils/get-selection-start');

var _getSelectionStart2 = _interopRequireDefault(_getSelectionStart);

var _getSelectionEnd = require('./utils/get-selection-end');

var _getSelectionEnd2 = _interopRequireDefault(_getSelectionEnd);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var CLASS_NAME = 'zippy-react-toolkit-masked-input';

var preventDefault = function preventDefault(event) {
  return event.preventDefault();
};

/**
 *  0 - Digit. Accepts any digit between 0 and 9.
 *  9 - Digit or space. Accepts any digit between 0 and 9, plus space.
 *  # - Digit or space. Like 9 rule, but allows also (+) and (-) signs.
 *  L - Letter. Restricts input to letters a-z and A-Z. This rule is equivalent to [a-zA-Z] in regular expressions.
 *  ? - Letter or space. Restricts input to letters a-z and A-Z. This rule is equivalent to [a-zA-Z] in regular expressions.
 *  & - Character. Accepts any character. The rule is equivalent to \S in regular expressions.
 *  C - Character or space. Accepts any character. The rule is equivalent to . in regular expressions.
 *  A - Alphanumeric. Accepts letters and digits only.
 *  a - Alphanumeric or space. Accepts letters, digits and space only.
 */

var defaultMaskDefinitions = {
  '0': /[0-9]/,
  '9': /[0-9\ ]/,
  '#': /[0-9\ \+\-]/,
  L: /[A-Za-z]/,
  '?': /[A-Za-z\ ]/,
  '&': /[\S]/,
  C: /./,
  A: /[A-Za-z0-9]/,
  a: /[A-Za-z0-9\ ]/,
  h: /[A-Fa-f0-9]/
};

var _getValue = function _getValue(props, state) {
  var value = props.value;
  var stateValue = state.value;


  return value === undefined ? stateValue || '' : value;
};

var isControlledComponent = function isControlledComponent(props) {
  return props.value !== undefined;
};

var hasMask = function hasMask(props) {
  return !!props.mask;
};

var getClassNames = function getClassNames() {
  var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var state = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var focused = state.focused,
      readOnly = state.readOnly;
  var className = props.className,
      rootClassName = props.rootClassName,
      _props$mask = props.mask,
      mask = _props$mask === undefined ? '' : _props$mask,
      maskDefinitions = props.maskDefinitions,
      theme = props.theme,
      disabled = props.disabled;


  var currentValue = props.currentValue || _getValue(props, state);

  var isEmpty = currentValue.length === 0;
  var isUnMaksed = !mask || mask.length === 0;

  var valueCharCountInMask = (0, _maskedString.getValueCharCountInMask)(mask, maskDefinitions || {});
  var isFull = valueCharCountInMask - 1 === currentValue.length;

  return (0, _join2.default)(rootClassName, className, rootClassName + '__wrapper', isEmpty && rootClassName + '--empty', isFull && rootClassName + '--full', !isUnMaksed && rootClassName + '--masked', isUnMaksed && rootClassName + '--unmasked', readOnly && rootClassName + '--readOnly', disabled && rootClassName + '--disabled', focused && rootClassName + '--focused', rootClassName + '--theme-' + theme);
};

var getInputClassNames = function getInputClassNames(props, state) {
  var inputClassName = props.inputClassName,
      rootClassName = props.rootClassName;

  var inputBaseClass = rootClassName + '--input';
  var focusedClassName = rootClassName + '--focused';

  return (0, _join2.default)(inputBaseClass, inputClassName, focusedClassName);
};

var getMaskedDefinitions = function getMaskedDefinitions(_ref) {
  var maskDefinitions = _ref.maskDefinitions;

  return _extends({}, defaultMaskDefinitions, maskDefinitions);
};

var getComposedValueOnKeyDown = function getComposedValueOnKeyDown(currentValue, selection, pressedValue, valueCharCountInMask) {
  var _selection = _slicedToArray(selection, 2),
      start = _selection[0],
      end = _selection[1];

  var result = currentValue + pressedValue;

  if (end === start) {
    end++;
  }

  if (start < currentValue.length) {
    result = '' + currentValue.slice(0, start) + pressedValue + currentValue.slice(end);
  }

  if (result.length > valueCharCountInMask) {
    result = result.substring(0, valueCharCountInMask);
  }

  return result;
};

var getNextValue = function getNextValue(_ref2) {
  var currentValue = _ref2.currentValue,
      newCharValue = _ref2.newCharValue,
      start = _ref2.start,
      end = _ref2.end,
      mask = _ref2.mask,
      maskDefinitions = _ref2.maskDefinitions,
      maskFiller = _ref2.maskFiller;

  var valueSelection = (0, _maskedString.getValueSelectionRangeFromMaskedSelectionRange)(currentValue, {
    start: start,
    end: end,
    mask: mask,
    maskDefinitions: maskDefinitions,
    maskFiller: maskFiller
  });

  var composedValue = getComposedValueOnKeyDown(currentValue, valueSelection, newCharValue, (0, _maskedString.getValueCharCountInMask)(mask, maskDefinitions));

  var _getMaskedString = (0, _maskedString.getMaskedString)(composedValue, {
    mask: mask,
    maskDefinitions: maskDefinitions,
    maskFiller: maskFiller
  }),
      _getMaskedString2 = _slicedToArray(_getMaskedString, 3),
      maskedValue = _getMaskedString2[0],
      invalidValueIndex = _getMaskedString2[1],
      invalidMaskIndex = _getMaskedString2[2];

  // prevent typing invalid values inside already typed content


  if (end !== composedValue.length && invalidValueIndex) {
    return [false, false];
  }

  if (invalidValueIndex !== -1) {
    composedValue = composedValue.substring(0, invalidValueIndex);
  }

  return [composedValue, maskedValue];
};

var getCurrentMaskFiller = function getCurrentMaskFiller(props, state) {
  var hideMaskFillOnBlur = props.hideMaskFillOnBlur,
      maskFiller = props.maskFiller;
  var focused = state.focused;


  var currentMaskFiller = maskFiller;

  if (hideMaskFillOnBlur && !focused) {
    currentMaskFiller = ' ';
  }

  return currentMaskFiller;
};

var ZippyMaskedInput = function (_Component) {
  _inherits(ZippyMaskedInput, _Component);

  function ZippyMaskedInput(props) {
    _classCallCheck(this, ZippyMaskedInput);

    var _this = _possibleConstructorReturn(this, (ZippyMaskedInput.__proto__ || Object.getPrototypeOf(ZippyMaskedInput)).call(this, props));

    _this.setInputRef = function (el) {
      _this.input = el;
    };

    var value = props.defaultValue != null ? props.defaultValue : props.value != null ? props.value : '';

    _this.state = {
      value: value,
      focused: false
    };

    _this.handleBlur = _this.handleBlur.bind(_this);
    _this.handleFocus = _this.handleFocus.bind(_this);
    _this.handleChange = _this.handleChange.bind(_this);
    _this.handleKeyPress = _this.handleKeyPress.bind(_this);
    _this.handleKeyPressUpdate = (0, _throttle2.default)(_this.handleKeyPressUpdate.bind(_this), 100);
    _this.handleKeyDown = _this.handleKeyDown.bind(_this);
    _this.handleClearButtonClick = _this.handleClearButtonClick.bind(_this);
    return _this;
  }

  _createClass(ZippyMaskedInput, [{
    key: 'shouldComponentUpdate',
    value: function shouldComponentUpdate(nextProps, nextState) {
      return (0, _shouldComponentUpdate3.default)(this, nextProps, nextState);
    }
  }, {
    key: 'handleChange',
    value: function handleChange(event) {
      var _p = this.p,
          isMasked = _p.isMasked,
          isControlled = _p.isControlled,
          readOnly = _p.readOnly;
      var value = event.target.value;


      if (isMasked || readOnly) {
        return;
      }

      if (!isControlled) {
        this.setState({
          value: value
        });
      }

      var onChange = this.p.onChange;

      onChange && onChange({ currentValue: value, event: event });
    }
  }, {
    key: 'handleBlur',
    value: function handleBlur(event) {
      this.setState({
        focused: false
      });

      var _p2 = this.p,
          onBlur = _p2.onBlur,
          currentValue = _p2.currentValue,
          maskedValue = _p2.maskedValue;


      onBlur && onBlur({
        currentValue: currentValue,
        maskedValue: maskedValue,
        event: event
      });
    }
  }, {
    key: 'handleFocus',
    value: function handleFocus(event) {
      var _this2 = this;

      this.setState({
        focused: true
      });

      var _p3 = this.p,
          onFocus = _p3.onFocus,
          currentValue = _p3.currentValue,
          maskedValue = _p3.maskedValue;


      (0, _raf2.default)(function () {
        (0, _setCaretPosition2.default)(_this2.input, (0, _maskedString.getPositionInMaskedStringBasedOnValue)(currentValue, _this2.p));
      });

      onFocus && onFocus({
        currentValue: currentValue,
        maskedValue: maskedValue,
        event: event
      });
    }
  }, {
    key: 'handleKeyPressUpdate',
    value: function handleKeyPressUpdate(valueCode, event) {
      var input = this.input;
      var _p4 = this.p,
          currentValue = _p4.currentValue,
          isMasked = _p4.isMasked,
          isControlled = _p4.isControlled,
          onChange = _p4.onChange,
          mask = _p4.mask,
          maskDefinitions = _p4.maskDefinitions,
          maskFiller = _p4.maskFiller;


      if (!isMasked) {
        return;
      }

      var start = (0, _getSelectionStart2.default)(input);
      var end = (0, _getSelectionEnd2.default)(input);

      var _getNextValue = getNextValue({
        currentValue: currentValue,
        newCharValue: String.fromCharCode(valueCode),
        start: start,
        end: end,
        mask: mask,
        maskDefinitions: maskDefinitions,
        maskFiller: maskFiller
      }),
          _getNextValue2 = _slicedToArray(_getNextValue, 2),
          value = _getNextValue2[0],
          maskedValue = _getNextValue2[1];

      var caretPosition = Math.min((0, _maskedString.getPositionInMaskedStringBasedOnValue)(value, {
        mask: mask,
        maskDefinitions: maskDefinitions,
        maskFiller: maskFiller
      }),
      //get next
      start !== 0 ? (0, _maskedString.getNextRealValuePosition)(start, {
        mask: mask,
        maskDefinitions: maskDefinitions,
        maskFiller: maskFiller
      }) : Infinity);

      if (!value) {
        return;
      }

      if (!isControlled) {
        this.setState({
          value: value
        }, function () {
          (0, _raf2.default)(function () {
            (0, _setCaretPosition2.default)(input, caretPosition);
            onChange && onChange({ currentValue: value, maskedValue: maskedValue, event: event });
          });
        });
      } else {
        this.setState({ caretPosition: caretPosition }, function () {
          onChange && onChange({ currentValue: value, maskedValue: maskedValue, event: event });
        });
      }
    }
  }, {
    key: 'handleKeyPress',
    value: function handleKeyPress(event) {
      var _p5 = this.p,
          readOnly = _p5.readOnly,
          isMasked = _p5.isMasked;


      if (!isMasked || readOnly) {
        return;
      }

      this.handleKeyPressUpdate(event.which, event);

      event.stopPropagation();
      event.preventDefault();
    }
  }, {
    key: 'handleKeyDown',
    value: function handleKeyDown(event) {
      if (!this.p.isMasked || this.p.readOnly) {
        return;
      }
      if (event.key === 'Backspace') {
        var input = this.input;
        var _p6 = this.p,
            currentValue = _p6.currentValue,
            isControlled = _p6.isControlled,
            onChange = _p6.onChange,
            mask = _p6.mask,
            maskDefinitions = _p6.maskDefinitions,
            maskFiller = _p6.maskFiller;


        var start = (0, _getSelectionStart2.default)(input);
        var end = (0, _getSelectionEnd2.default)(input);

        if (start === end) {
          // should be closest value to the left
          start = (0, _maskedString.getPreviousRealValuePosition)(start, {
            mask: mask,
            maskDefinitions: maskDefinitions,
            maskFiller: maskFiller
          });
        }

        var _getNextValue3 = getNextValue({
          currentValue: currentValue,
          newCharValue: '',
          start: start,
          end: end,
          mask: mask,
          maskDefinitions: maskDefinitions,
          maskFiller: maskFiller
        }),
            _getNextValue4 = _slicedToArray(_getNextValue3, 2),
            value = _getNextValue4[0],
            maskedValue = _getNextValue4[1];

        if (!isControlled) {
          this.setState({
            value: value
          }, function () {
            (0, _raf2.default)(function () {
              (0, _setCaretPosition2.default)(input, Math.min((0, _maskedString.getPositionInMaskedStringBasedOnValue)(value, {
                mask: mask,
                maskDefinitions: maskDefinitions,
                maskFiller: maskFiller
              }), (0, _maskedString.getNextRealValuePosition)(start, {
                mask: mask,
                maskDefinitions: maskDefinitions,
                maskFiller: maskFiller
              })));
              onChange && onChange({ currentValue: value, maskedValue: maskedValue, event: event });
            });
          });
        } else {
          onChange && onChange({ currentValue: value, maskedValue: maskedValue, event: event });
        }

        event.stopPropagation();
        event.preventDefault();
      }
    }
  }, {
    key: 'getMaskedValue',
    value: function getMaskedValue() {
      var props = this.props;
      var mask = props.mask;

      var maskDefinitions = getMaskedDefinitions(props);
      var currentValue = _getValue(props, this.state);

      var computedMaskFiller = getCurrentMaskFiller(props, this.state);
      return (0, _maskedString.getMaskedString)(currentValue, {
        mask: mask,
        maskDefinitions: maskDefinitions,
        maskFiller: computedMaskFiller
      })[0];
    }
  }, {
    key: 'getValue',
    value: function getValue() {
      return _getValue(this.props, this.state);
    }
  }, {
    key: 'focus',
    value: function focus() {
      this.input.focus();
    }
  }, {
    key: 'blur',
    value: function blur() {
      this.input.blur();
    }
  }, {
    key: 'renderClearButtonWrapper',
    value: function renderClearButtonWrapper() {
      var props = this.props,
          state = this.state;
      var enableClearButton = this.props.enableClearButton;
      var _p7 = this.p,
          clearButtonColor = _p7.clearButtonColor,
          clearButtonStyle = _p7.clearButtonStyle,
          clearButtonSize = _p7.clearButtonSize,
          isControlled = _p7.isControlled;


      var hasValue = !isControlled ? state.value != '' : props.value != '';

      var clearButtonWrapperClassName = (0, _join2.default)(props.rootClassName + '__clear-button-wrapper', (!hasValue || !enableClearButton) && props.rootClassName + '__clear-button-wrapper--hidden');

      return _react2.default.createElement(
        'div',
        { key: 'clearButton', className: clearButtonWrapperClassName },
        this.renderClearButton({
          clearButtonColor: clearButtonColor,
          clearButtonStyle: clearButtonStyle,
          clearButtonSize: clearButtonSize
        })
      );
    }
  }, {
    key: 'renderClearButton',
    value: function renderClearButton(config) {
      var props = this.props;
      var disabled = props.disabled;
      var clearButtonColor = config.clearButtonColor,
          clearButtonStyle = config.clearButtonStyle,
          clearButtonSize = config.clearButtonSize;


      var clearButtonClassName = (0, _join2.default)(props.rootClassName + '__clear-button', props.clearButtonClassName);

      var svgProps = {};
      var tabIndex = this.props.acceptClearToolFocus ? 0 : -1;

      if (clearButtonColor) {
        svgProps.fill = clearButtonColor;
      }

      if (clearButtonSize) {
        if (Array.isArray(clearButtonSize)) {
          svgProps.width = clearButtonSize[0];
          svgProps.height = clearButtonSize[1];
        } else {
          svgProps.width = clearButtonSize;
          svgProps.height = clearButtonSize;
        }
      }

      return _react2.default.createElement(
        'button',
        {
          key: 'clearButton',
          onClick: this.handleClearButtonClick,
          onMouseDown: preventDefault,
          className: clearButtonClassName,
          style: _extends({}, clearButtonStyle),
          tabIndex: tabIndex
        },
        _react2.default.createElement(
          'svg',
          { style: _extends({}, svgProps), viewBox: '4 4 16 16' },
          _react2.default.createElement('path', { d: 'M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z' })
        )
      );
    }
  }, {
    key: 'handleClearButtonClick',
    value: function handleClearButtonClick(event) {
      var _p8 = this.p,
          onChange = _p8.onChange,
          isControlled = _p8.isControlled;


      if (!isControlled) {
        this.setState({
          value: ''
        });
      }

      this.focus();

      onChange && onChange({ currentValue: '', event: event });
    }
  }, {
    key: 'getProps',
    value: function getProps(props, state) {
      props = props || this.props;
      state = state || this.state;

      var _props = props,
          inputStyle = _props.inputStyle,
          style = _props.style,
          tabIndex = _props.tabIndex,
          onChange = _props.onChange,
          onBlur = _props.onBlur,
          onFocus = _props.onFocus,
          mask = _props.mask,
          clearButtonColor = _props.clearButtonColor,
          clearButtonStyle = _props.clearButtonStyle,
          clearButtonSize = _props.clearButtonSize,
          placeholder = _props.placeholder,
          disabled = _props.disabled,
          readOnly = _props.readOnly;
      var _state = state,
          focused = _state.focused;


      var isMasked = hasMask(props);
      var propsOrStateValue = _getValue(props, state);

      var currentValue = propsOrStateValue;

      var maskDefinitions = getMaskedDefinitions(props);

      var computedMaskFiller = getCurrentMaskFiller(props, state);

      var maskedValue = (0, _maskedString.getMaskedString)(currentValue, {
        mask: mask,
        maskDefinitions: maskDefinitions,
        maskFiller: computedMaskFiller
      })[0];

      return {
        focused: focused,

        inputStyle: inputStyle,
        inputClassName: getInputClassNames(props, state),
        tabIndex: tabIndex,
        style: style,

        className: getClassNames(props, state),

        clearButtonSize: clearButtonSize,
        clearButtonColor: clearButtonColor,
        clearButtonStyle: clearButtonStyle,

        currentValue: currentValue,
        maskedValue: maskedValue,

        isControlled: isControlledComponent(props),
        isMasked: isMasked,

        mask: mask,
        maskDefinitions: maskDefinitions,
        maskFiller: computedMaskFiller,

        onChange: onChange,
        onBlur: onBlur,
        onFocus: onFocus,

        placeholder: placeholder,
        disabled: disabled,
        readOnly: readOnly
      };
    }
  }, {
    key: 'componentDidUpdate',
    value: function componentDidUpdate() {
      var _this3 = this;

      var _p9 = this.p,
          currentValue = _p9.currentValue,
          mask = _p9.mask,
          maskDefinitions = _p9.maskDefinitions,
          maskFiller = _p9.maskFiller;
      var _state2 = this.state,
          focused = _state2.focused,
          caretPosition = _state2.caretPosition;


      if (focused) {
        (0, _raf2.default)(function () {
          (0, _setCaretPosition2.default)(_this3.input, Math.min((0, _maskedString.getPositionInMaskedStringBasedOnValue)(currentValue, {
            mask: mask,
            maskDefinitions: maskDefinitions,
            maskFiller: maskFiller
          }),
          //get next
          caretPosition ? caretPosition : Infinity));
        });
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _p10 = this.p = this.getProps(this.props, this.state),
          className = _p10.className,
          maskedValue = _p10.maskedValue,
          placeholder = _p10.placeholder,
          disabled = _p10.disabled,
          tabIndex = _p10.tabIndex,
          inputClassName = _p10.inputClassName,
          inputStyle = _p10.inputStyle,
          style = _p10.style;

      var cleanedProps = (0, _cleanProps2.default)(this.props, ZippyMaskedInput.propTypes);

      var input = _react2.default.createElement('input', {
        ref: this.setInputRef,
        className: inputClassName,
        style: inputStyle,
        placeholder: placeholder,
        tabIndex: tabIndex,
        onBlur: this.handleBlur,
        onFocus: this.handleFocus,
        onChange: this.handleChange,
        onKeyPress: this.handleKeyPress,
        onKeyDown: this.handleKeyDown,
        disabled: disabled,
        type: 'text',
        value: maskedValue
      });

      return _react2.default.createElement(
        'div',
        _extends({}, cleanedProps, { className: className, style: style }),
        input,
        this.renderClearButtonWrapper()
      );
    }
  }]);

  return ZippyMaskedInput;
}(_react.Component);

ZippyMaskedInput.defaultProps = {
  maskDefinitions: {},
  maskFiller: '_',
  placeholder: null,
  enableClearButton: true,
  clearButtonSize: 10,
  hideMaskFillOnBlur: false,
  acceptClearToolFocus: false,
  theme: 'default',
  rootClassName: 'zippy-react-toolkit-masked-input'
};

ZippyMaskedInput.propTypes = {
  onChange: _propTypes2.default.func,
  onBlur: _propTypes2.default.func,
  onFocus: _propTypes2.default.func,

  mask: _propTypes2.default.string,
  maskDefinitions: _propTypes2.default.object,
  maskFiller: _propTypes2.default.string,

  hideMaskFillOnBlur: _propTypes2.default.bool,

  className: _propTypes2.default.string,
  inputClassName: _propTypes2.default.string,
  style: _propTypes2.default.object,
  inputStyle: _propTypes2.default.object,

  placeholder: _propTypes2.default.string,
  rootClassName: _propTypes2.default.string,
  disabled: _propTypes2.default.bool,
  locked: _propTypes2.default.bool,
  readOnly: _propTypes2.default.bool,
  tabIndex: _propTypes2.default.any,

  acceptClearToolFocus: _propTypes2.default.bool,

  enableClearButton: _propTypes2.default.bool,
  clearButtonColor: _propTypes2.default.string,
  clearButtonStyle: _propTypes2.default.object,
  clearButtonClassName: _propTypes2.default.string,
  clearButtonSize: _propTypes2.default.number,

  value: _propTypes2.default.any,
  defaultValue: _propTypes2.default.any,

  theme: _propTypes2.default.string
};

exports.default = ZippyMaskedInput;
exports.getClassNames = getClassNames;
exports.CLASS_NAME = CLASS_NAME;
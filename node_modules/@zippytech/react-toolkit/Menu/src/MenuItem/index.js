'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _reactClass = require('@zippytech/react-class');

var _reactClass2 = _interopRequireDefault(_reactClass);

var _MenuItemCell = require('./MenuItemCell');

var _MenuItemCell2 = _interopRequireDefault(_MenuItemCell);

var _Expander = require('../Expander');

var _Expander2 = _interopRequireDefault(_Expander);

var _renderCell = require('./renderCell');

var _renderCell2 = _interopRequireDefault(_renderCell);

var _CheckBox = require('../../../CheckBox');

var _CheckBox2 = _interopRequireDefault(_CheckBox);

var _RadioButton = require('../../../RadioButton');

var _RadioButton2 = _interopRequireDefault(_RadioButton);

var _assign = require('../../../common/assign');

var _assign2 = _interopRequireDefault(_assign);

var _join = require('../../../common/join');

var _join2 = _interopRequireDefault(_join);

var _cleanProps = require('../../../common/cleanProps');

var _cleanProps2 = _interopRequireDefault(_cleanProps);

var _getRegionRelativeToParent = require('../getRegionRelativeToParent');

var _getRegionRelativeToParent2 = _interopRequireDefault(_getRegionRelativeToParent);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Copyright (c) 2015-present, Zippy Technologies
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * This source code is licensed under the MIT license found in the
file in the root directory of this source tree.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */

var emptyFn = function emptyFn() {};

var MenuItem = function (_Component) {
  _inherits(MenuItem, _Component);

  function MenuItem(props) {
    _classCallCheck(this, MenuItem);

    var _this = _possibleConstructorReturn(this, (MenuItem.__proto__ || Object.getPrototypeOf(MenuItem)).call(this, props));

    _this.state = {};
    return _this;
  }

  _createClass(MenuItem, [{
    key: 'render',
    value: function render() {
      var _this2 = this;

      var props = this.preparedProps = this.prepareProps(this.props, this.state);
      var className = props.className;
      return _react2.default.createElement(
        'tr',
        _extends({}, (0, _cleanProps2.default)(props, MenuItem.propTypes), {
          style: props.style,
          className: className,
          ref: function ref(node) {
            return _this2.node = node;
          }
        }),
        this.renderCells()
      );
    }
  }, {
    key: 'UNSAFE_componentWillReceiveProps',
    value: function UNSAFE_componentWillReceiveProps() {}
  }, {
    key: 'componentDidMount',
    value: function componentDidMount() {
      this.componentIsMounted = true;
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      this.componentIsMounted = false;
    }
  }, {
    key: 'prepareProps',
    value: function prepareProps(props, state) {
      var preparedProps = _extends({}, props, {
        mouseOver: !!state.mouseOver,
        active: !!state.active,
        disabled: !!props.disabled,
        className: this.getClassName(),
        style: this.getStyle(),
        onClick: this.handleClick,
        onMouseEnter: this.handleMouseEnter,
        onMouseLeave: this.handleMouseLeave,
        onMouseDown: this.handleMouseDown,
        onTouchStart: this.handleTouchStart
      });

      if (props.item.isTitle) {
        delete preparedProps.mouseOver;
        delete preparedProps.active;
        delete preparedProps.onClick;
        delete preparedProps.onMouseEnter;
        delete preparedProps.onMouseLeave;
        delete preparedProps.onMouseDown;
        delete preparedProps.onTouchStart;
      }

      return preparedProps;
    }
  }, {
    key: 'handleClick',
    value: function handleClick(event) {
      var props = this.props;

      if (props.disabled && event.stopPropagation) {
        event.stopPropagation();
        return;
      }

      if (this.props.onClick) {
        this.props.onClick(event, props, props.index);
      }
      if (this.props.item.onClick) {
        this.props.item.onClick(event, props, props.index);
      }
    }
  }, {
    key: 'handleMouseDown',
    value: function handleMouseDown() {
      var _this3 = this;

      var mouseUpListener = function mouseUpListener() {
        if (_this3.componentIsMounted) {
          _this3.setState({
            active: false
          });
        }
        global.removeEventListener('mouseup', mouseUpListener);
      };

      global.addEventListener('mouseup', mouseUpListener);
      if (this.componentIsMounted) {
        this.setState({
          active: true
        });
      }
    }
  }, {
    key: 'handleTouchStart',
    value: function handleTouchStart(event) {
      var _this4 = this;

      var props = this.props;

      var mouseUpListener = function mouseUpListener() {
        if (_this4.componentIsMounted) {
          _this4.setState({
            active: false
          });
        }
        global.removeEventListener('touchend', mouseUpListener);
      };

      global.addEventListener('touchend', mouseUpListener);
      if (this.componentIsMounted) {
        this.setState({
          active: true
        });
      }
      if (!this.props.item.items) {
        return;
      }
      if (this.state.mouseOver) {
        this.handleMouseLeave(event);
      } else {
        this.handleMouseEnter(event);
      }
    }
  }, {
    key: 'showMenu',
    value: function showMenu(menu, props) {
      props.showMenu(menu, this.getOffset());
    }
  }, {
    key: 'handleMouseEnter',
    value: function handleMouseEnter(event) {
      var props = this.props;


      if (props.disabled) {
        return;
      }

      this.mouseInside = true;

      this.setState({
        mouseOver: true
      });

      if (props.onMouseOver) {
        var menuOffset = void 0;

        if (props.hasSubMenu) {
          menuOffset = this.getOffset();
        }

        props.onMouseOver({
          event: event,
          menuOffset: menuOffset,
          itemProps: props,
          index: props.index,
          hasSubMenu: props.hasSubMenu
        });
      }
    }
  }, {
    key: 'handleMouseLeave',
    value: function handleMouseLeave(event) {
      var props = this.props;

      if (props.disabled) {
        return;
      }

      var offset = {
        x: event.clientX,
        y: event.clientY
      };

      if (this.componentIsMounted) {
        this.setState({
          active: false,
          mouseOver: false
        });
      }

      if (props.onMouseOut) {
        props.onMouseOut({
          itemPorps: props,
          leaveOffset: offset,
          index: props.index,
          hasSubMenu: props.hasSubMenu
        });
      }
    }
  }, {
    key: 'renderCells',
    value: function renderCells() {
      var props = this.props;

      var cells = props.columns.map(function () {
        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        return _renderCell2.default.apply(undefined, [props].concat(args));
      });

      if (props.enableSelection && props.name) {
        var input = this.renderSelectInput();
        if (this.props.selectionInputPosition === 'end') {
          cells.push(input);
        } else {
          cells.unshift(input);
        }
      }

      if (props.hasSubMenu) {
        var expander = this.renderExpander();
        cells.push(expander);
      }

      return cells;
    }
  }, {
    key: 'getCommonCellProps',
    value: function getCommonCellProps() {
      var props = this.props;

      return {
        rootClassName: props.rootClassName,
        rtl: props.rtl
      };
    }
  }, {
    key: 'renderSelectInput',
    value: function renderSelectInput() {
      var _this5 = this;

      var props = this.props;

      var multiple = props.multiple;
      var className = (0, _join2.default)(props.rootClassName + '__cell__input', props.browserNativeSelectInputs && props.rootClassName + '__cell__input--browser-native', multiple && props.rootClassName + '__cell__input--multiple');

      var onChange = function onChange(checked) {
        if (checked === undefined) {
          checked = !props.checked;
        }
        if (typeof checked !== 'boolean' && _this5.props.showWarnings) {
          console.warn('"onChange" should be called with a boolean param!');
        }
        props.onSelectChange({
          name: props.name,
          value: props.value,
          multiple: multiple,
          checked: checked
        });
      };

      var inputProps = {
        className: className,
        // no need to call onChange when selection is updated via intercepting onClick
        onChange: props.selectOnClick ? emptyFn : onChange,
        iconSize: multiple ? props.checkIconSize : props.radioIconSize,
        name: props.name,
        disabled: props.disabled,
        checked: props.checked,
        focusable: false,
        supportIndeterminate: false,
        browserNative: props.browserNativeSelectInputs
      };

      var cellProps = _extends({
        key: 'select'
      }, this.getCommonCellProps());

      cellProps.className = (0, _join2.default)(cellProps.className, props.rootClassName + '__cell--has-input', props.multiple && props.rootClassName + '__cell--checkbox', !props.multiple && props.rootClassName + '__cell--radio');

      var Input = multiple ? _CheckBox2.default : _RadioButton2.default;

      var renderFunction = multiple ? this.props.renderCheckInput : this.props.renderRadioInput;

      var result = void 0;
      if (typeof renderFunction === 'function') {
        result = renderFunction({
          domProps: inputProps,
          onChange: onChange,
          disabled: props.disabled,
          checked: props.checked
        });
      }

      if (result === undefined) {
        result = _react2.default.createElement(Input, inputProps);
      }

      return _react2.default.createElement(
        _MenuItemCell2.default,
        cellProps,
        result
      );
    }
  }, {
    key: 'renderExpander',
    value: function renderExpander() {
      var props = this.props;

      var expander = props.expander;

      if (props.item && props.item.expander !== undefined) {
        expander = props.item.expander;
      }

      var style = _extends({}, props.expanderStyle, props.item && props.item.expanderStyle);

      var expanderProps = _extends({
        style: style,
        size: props.expanderSize,
        onClick: props.onExpanderClick
      }, this.getCommonCellProps());

      if (typeof expander === 'function') {
        expander = expander(expanderProps, props.item);
      }

      if (expander === undefined || expander === true) {
        expander = _react2.default.createElement(_Expander2.default, expanderProps);
      }

      return _react2.default.createElement(_MenuItemCell2.default, _extends({
        key: 'expander',
        className: props.rootClassName + '__cell--has-expander',
        expander: expander
      }, expanderProps));
    }
  }, {
    key: 'getStyle',
    value: function getStyle() {
      var props = this.props,
          state = this.state;

      var style = (0, _assign2.default)({}, props.style, props.item.style);

      if (props.item.isTitle && props.titleStyle) {
        (0, _assign2.default)(style, props.titleStyle, props.item.titleStyle);
      }

      if (state.mouseOver) {
        (0, _assign2.default)(style, props.itemOverStyle, props.overStyle, props.item.overStyle);
      }

      if (state.active) {
        (0, _assign2.default)(style, props.itemActiveStyle, props.activeStyle, props.item.activeStyle);
      }

      if (props.expanded) {
        (0, _assign2.default)(style, props.expandedStyle, props.item.expandedStyle);
      }

      if (props.focused) {
        (0, _assign2.default)(style, props.focusedStyle, props.item.focusedStyle);
      }

      if (props.focused && state.mouseOver) {
        (0, _assign2.default)(style, props.overFocusedStyle, props.item.overFocusedStyle);
      }

      if (props.height) {
        (0, _assign2.default)(style, { height: props.height });
      }

      // when disabled other style do not apply
      if (props.disabled) {
        (0, _assign2.default)(style, props.itemDisabledStyle, props.disabledStyle, props.item.disabledStyle);
      }

      return style;
    }
  }, {
    key: 'getClassName',
    value: function getClassName() {
      var props = this.props,
          state = this.state;

      var baseClassName = props.rootClassName + '__row';

      var className = (0, _join2.default)(props.className, props.item.className, baseClassName, state.mouseOver && baseClassName + '--over', state.mouseOver && props.item.overClassName, state.mouseOver && props.overClassName, state.active && baseClassName + '--active', state.active && props.item.activeClassName, state.active && props.activeClassName, props.expanded && baseClassName + '--expanded', props.expanded && props.item.expandedClassName, props.expanded && props.expandedClassName, props.focused && baseClassName + '--focused', props.focused && props.item.focusedClassName, props.focused && props.focusedClassName, props.item.isTitle && baseClassName + '--title', props.checked && baseClassName + '--checked');

      // when disabled only disabled className is applied
      if (props.disabled) {
        className = (0, _join2.default)(props.className, baseClassName, props.disabled && baseClassName + '--disabled', props.disabled && props.itemDisabledClassName, props.disabled && props.item.disabledClassName);
      }

      return className;
    }
  }, {
    key: 'getOffset',
    value: function getOffset() {
      return (0, _getRegionRelativeToParent2.default)(this.node, this.props.rootClassName);
    }
  }, {
    key: 'getPreparedProps',
    value: function getPreparedProps() {
      return this.preparedProps;
    }
  }, {
    key: 'hasSubmenu',
    value: function hasSubmenu() {
      return !!this.props.hasSubMenu;
    }
  }, {
    key: 'getDOMNode',
    value: function getDOMNode() {
      return this.node;
    }
  }, {
    key: 'getValue',
    value: function getValue() {
      var props = this.props;

      return props.item[props.valueProperty];
    }
  }, {
    key: 'getName',
    value: function getName() {
      var props = this.props;

      return props.item[props.valueProperty];
    }
  }]);

  return MenuItem;
}(_reactClass2.default);

MenuItem.defaultProps = {
  isMenuItem: true,
  item: {},
  columns: ['label'],
  enableSelection: false,
  allowUnselect: false
};

MenuItem.propTypes = {
  rootClassName: _propTypes2.default.string,
  style: _propTypes2.default.object,
  titleStyle: _propTypes2.default.object,
  height: _propTypes2.default.number,
  dismissOnClick: _propTypes2.default.bool,
  siblingItemHasSubMenu: _propTypes2.default.bool,

  overStyle: _propTypes2.default.object,
  overClassName: _propTypes2.default.string,

  activeStyle: _propTypes2.default.object,
  activeClassName: _propTypes2.default.string,

  disabledStyle: _propTypes2.default.object,
  disabledClassName: _propTypes2.default.string,

  expandedStyle: _propTypes2.default.object,
  expandedClassName: _propTypes2.default.string,

  focusedStyle: _propTypes2.default.object,
  focusedClassName: _propTypes2.default.string,

  cellStyle: _propTypes2.default.object,
  expanderStyle: _propTypes2.default.object,

  overFocusedStyle: _propTypes2.default.object,
  columns: _propTypes2.default.arrayOf(_propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.object])),
  item: _propTypes2.default.object,
  expanded: _propTypes2.default.bool,
  globalCellStyle: _propTypes2.default.object,
  itemDisabledStyle: _propTypes2.default.object,
  itemDisabledClassName: _propTypes2.default.string,
  itemOverStyle: _propTypes2.default.object,
  itemActiveStyle: _propTypes2.default.object,
  menuHasSubmenu: _propTypes2.default.bool,
  hasSubMenu: _propTypes2.default.bool,
  items: _propTypes2.default.arrayOf(_propTypes2.default.oneOfType([_propTypes2.default.object, _propTypes2.default.string])),
  isMenuItem: _propTypes2.default.bool,
  focused: _propTypes2.default.bool,
  index: _propTypes2.default.number,
  rtl: _propTypes2.default.bool,
  expander: _propTypes2.default.oneOfType([_propTypes2.default.node, _propTypes2.default.bool, _propTypes2.default.func]),
  expanderSize: _propTypes2.default.number,
  expandedIndex: _propTypes2.default.number,
  onExpanderClick: _propTypes2.default.func,
  closeSubMenu: _propTypes2.default.func,
  closeSubmenuRecursively: _propTypes2.default.func,
  submenuWillUnmount: _propTypes2.default.func,
  onMouseOver: _propTypes2.default.func,
  onMouseOut: _propTypes2.default.func,
  mouseOver: _propTypes2.default.bool,
  active: _propTypes2.default.bool,
  menu: _propTypes2.default.node,

  // selection
  onSelectChange: _propTypes2.default.func,
  enableSelection: _propTypes2.default.bool,
  allowUnselect: _propTypes2.default.bool,
  selectOnClick: _propTypes2.default.bool,
  name: _propTypes2.default.any,
  value: _propTypes2.default.any,
  renderCheckInput: _propTypes2.default.func,
  renderRadioInput: _propTypes2.default.func,
  selectionInputPosition: _propTypes2.default.oneOf(['start', 'end']),
  checkIconSize: _propTypes2.default.number,
  radioIconSize: _propTypes2.default.number,
  browserNativeSelectInputs: _propTypes2.default.bool,
  showWarnings: _propTypes2.default.bool
};

exports.default = MenuItem;
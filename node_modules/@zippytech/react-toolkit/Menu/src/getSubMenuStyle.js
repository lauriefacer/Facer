'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

exports.default = function (props, state, domNode) {
  var _this = this;

  if (state.activeSubMenuIndex == null || !this.componentIsMounted) {
    this.prevMenuIndex = -1;
    return;
  }

  var overItem = this.getItemByIndex(state.activeSubMenuIndex);
  var offset = overItem && overItem.getOffset();

  var left = offset.left + offset.width;
  var top = offset.top;

  var menuIndex = state.activeSubMenuIndex;
  var sameMenu = this.prevMenuIndex == menuIndex;

  if (this.aligning && !sameMenu) {
    this.aligning = false;
  }

  this.prevMenuIndex = menuIndex;

  var style = {
    left: left,
    top: top,
    pointerEvents: 'none',
    position: 'absolute'
  };

  /**
   * Must align even if it is same menu,
   * the page can be scrolled and the menu should
   * check again if the submenu fits in the constrain.
   */
  if (!this.aligning) {
    setTimeout(function () {
      if (!_this.componentIsMounted) {
        return;
      }

      var thisRegion = _regionAlign2.default.from(domNode);
      /**
       * Must take into account padding
       * so the position of the item is calculated
       * correct
       */
      var menuComputedStyle = global.getComputedStyle(domNode);
      var paddingLeft = transformPxStringToInt(menuComputedStyle.paddingLeft);
      var menuItemRegion = _regionAlign2.default.from({
        left: thisRegion.left + paddingLeft,
        top: thisRegion.top + offset.top,
        width: offset.width,
        height: offset.height
      });

      var subMenuMounted = _this.subMenu && _this.subMenu.componentIsMounted;
      if (!subMenuMounted) {
        return;
      }

      var submenuNode = _this.subMenu.node;
      var subMenuRegion = _regionAlign2.default.from(submenuNode);

      var initialHeight = subMenuRegion.height;

      var alignPosition = (0, _align2.default)(props, subMenuRegion, menuItemRegion, props.constrainTo, domNode);

      var newHeight = subMenuRegion.height;
      var maxHeight = void 0;
      if (newHeight < initialHeight && props.subMenuConstrainMargin != null) {
        maxHeight = newHeight - props.subMenuConstrainMargin;
      } else if (newHeight < initialHeight) {
        maxHeight = newHeight;
      }

      if (maxHeight && alignPosition == -1) {
        subMenuRegion.top = subMenuRegion.bottom - maxHeight;
      }

      var newLeft = subMenuRegion.left - thisRegion.left;
      var newTop = subMenuRegion.top - thisRegion.top;

      if (Math.abs(newLeft - left) < 5) {
        newLeft = left;
      }

      if (Math.abs(newTop - top) < 5) {
        newTop = top;
      }

      _this.subMenuPosition = newLeft < 0 ? 'left' : 'right';

      /**
       * In this case the animation is in mid transition
       * and region has an invalid value
       * @type {[type]}
       */
      if (newHeight === 0) {
        return;
      }

      _this.alignOffset = {
        left: newLeft,
        top: newTop
      };
      _this.aligning = true;

      _this.setState({
        submenuAlignPosition: alignPosition,
        submenuMaxHeight: props.submenuMaxHeight || maxHeight
      });
    }, 0);
  }

  if (sameMenu || this.aligning && this.alignOffset) {
    (0, _assign2.default)(style, this.alignOffset);
    style.visibility = 'visible';
    delete style.pointerEvents;
    delete style.overflow;
  }

  this.aligning = false;

  return style;
};

var _regionAlign = require('@zippytech/region-align');

var _regionAlign2 = _interopRequireDefault(_regionAlign);

var _assign = require('../../common/assign');

var _assign2 = _interopRequireDefault(_assign);

var _align = require('./align');

var _align2 = _interopRequireDefault(_align);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function transformPxStringToInt(pxValue) {
  var value = parseFloat(pxValue.split('px')[0]);
  return typeof value === 'number' && !isNaN(value) ? value : 0;
} /**
   * Copyright (c) 2015-present, Zippy Technologies
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   */
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _autoBind = require('@zippytech/react-class/autoBind');

var _autoBind2 = _interopRequireDefault(_autoBind);

var _Field = require('../../Field');

var _Field2 = _interopRequireDefault(_Field);

var _join = require('../../common/join');

var _join2 = _interopRequireDefault(_join);

var _cleanProps = require('../../common/cleanProps');

var _cleanProps2 = _interopRequireDefault(_cleanProps);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Copyright (c) 2015-present, Zippy Technologies
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * This source code is licensed under the MIT license found in the
file in the root directory of this source tree.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */

var preventDefault = function preventDefault(e) {
  return e.preventDefault();
};

var getClearButtonClassNames = function getClearButtonClassNames(props) {
  var clearButtonClassName = (0, _join2.default)(props.rootClassName + '__clear-button', props.clearButtonClassName);

  return { clearButtonClassName: clearButtonClassName };
};

var isControlled = function isControlled(props) {
  return props.value !== undefined;
};
var emptyObject = {};

var TextInput = function (_Component) {
  _inherits(TextInput, _Component);

  function TextInput(props) {
    _classCallCheck(this, TextInput);

    var _this = _possibleConstructorReturn(this, (TextInput.__proto__ || Object.getPrototypeOf(TextInput)).call(this, props));

    _this.fieldRef = function (field) {
      _this.field = field;
    };

    _this.state = {
      focused: false,
      value: props.defaultValue == null ? '' : props.defaultValue
    };

    (0, _autoBind2.default)(_this);
    return _this;
  }

  _createClass(TextInput, [{
    key: 'handleChange',
    value: function handleChange(value, event) {
      this.setValue(value, event);
    }
  }, {
    key: 'focus',
    value: function focus() {
      this.field.focus();
    }
  }, {
    key: 'setValue',
    value: function setValue(value, event) {
      if (!isControlled(this.props)) {
        this.setState({
          value: value
        });
      }

      if (this.props.inputProps && this.props.inputProps.onChange) {
        this.props.inputProps.onChange(value, event);
      }

      if (this.props.onChange) {
        this.props.onChange(value, event);
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var props = this.props,
          state = this.state;
      var wrapperProps = props.wrapperProps,
          style = props.style,
          enableClearButton = props.enableClearButton;


      var inputProps = props.inputProps || emptyObject;
      var inputClassName = (0, _join2.default)(props.rootClassName + '__input', inputProps.className);

      var value = isControlled(props) ? props.value : state.value;

      var fieldProps = _extends({
        size: 1
      }, inputProps, {
        ref: this.fieldRef,
        className: inputClassName,
        onChange: this.handleChange,
        value: value,
        type: props.type,
        stopChangePropagation: props.stopChangePropagation
      });

      if (props.hidden) {
        fieldProps.hidden = props.hidden;
      }
      if (props.name) {
        fieldProps.name = props.name;
      }
      if (props.placeholder) {
        fieldProps.placeholder = props.placeholder;
      }
      if (props.required) {
        fieldProps.required = props.required;
      }
      if (props.readOnly) {
        fieldProps.readOnly = props.readOnly;
      }
      if (props.autoFocus) {
        fieldProps.autoFocus = props.autoFocus;
      }
      if (props.maxLength != undefined) {
        fieldProps.maxLength = props.maxLength;
      }
      if (props.minLength != undefined) {
        fieldProps.minLength = props.minLength;
      }
      if (props.size != undefined) {
        fieldProps.size = props.size;
      }
      if (props.disabled) {
        fieldProps.disabled = props.disabled;
      }

      var className = (0, _join2.default)(props.rootClassName, props.className, props.rtl ? props.rootClassName + '--rtl' : props.rootClassName + '--ltr', props.theme && props.rootClassName + '--theme-' + props.theme, enableClearButton && props.rootClassName + '--enable-clear-button', state.focused && props.rootClassName + '--focused', fieldProps.disabled && props.rootClassName + '--disabled');

      var input = _react2.default.createElement(_Field2.default, fieldProps);

      var wrapperDomProps = (0, _cleanProps2.default)(wrapperProps, TextInput.propTypes);
      var domProps = (0, _cleanProps2.default)(props, TextInput.propTypes);
      delete domProps.onChange;

      return _react2.default.createElement(
        'div',
        _extends({}, domProps, wrapperDomProps, {
          className: className,
          style: style,
          onBlur: this.onBlur,
          onClick: this.onClick,
          onFocus: this.onFocus
        }),
        input,
        this.renderClearButtonWrapper(fieldProps)
      );
    }
  }, {
    key: 'handleClearButtonClick',
    value: function handleClearButtonClick(event) {
      this.setState({
        focused: true
      });

      this.setValue('');

      this.focus();
    }
  }, {
    key: 'renderClearButtonWrapper',
    value: function renderClearButtonWrapper(fieldProps) {
      var props = this.props,
          state = this.state;
      var clearButtonColor = props.clearButtonColor,
          clearButtonStyle = props.clearButtonStyle,
          clearButtonSize = props.clearButtonSize,
          enableClearButton = props.enableClearButton,
          rootClassName = props.rootClassName;

      var value = isControlled(props) ? props.value : state.value;
      var emptyValue = value == '' || value == null;
      var showButton = enableClearButton && !emptyValue && !fieldProps.disabled && !fieldProps.readOnly;

      return _react2.default.createElement(
        'div',
        {
          key: 'clearButton',
          className: (0, _join2.default)(rootClassName + '__clear-button-wrapper', !showButton && rootClassName + '__clear-button-wrapper--hidden')
        },
        this.renderClearButton(_extends({
          clearButtonColor: clearButtonColor,
          clearButtonStyle: clearButtonStyle,
          clearButtonSize: clearButtonSize
        }, getClearButtonClassNames(props)))
      );
    }
  }, {
    key: 'renderClearButton',
    value: function renderClearButton(config) {
      var clearButtonColor = config.clearButtonColor,
          clearButtonStyle = config.clearButtonStyle,
          clearButtonClassName = config.clearButtonClassName,
          clearButtonSize = config.clearButtonSize;


      var svgProps = {};
      var tabIndex = this.props.acceptClearToolFocus ? 0 : -1;

      if (clearButtonColor) {
        svgProps.fill = clearButtonColor;
      }

      if (clearButtonSize) {
        if (Array.isArray(clearButtonSize)) {
          svgProps.width = clearButtonSize[0];
          svgProps.height = clearButtonSize[1];
        } else {
          svgProps.width = clearButtonSize;
          svgProps.height = clearButtonSize;
        }
      }

      return _react2.default.createElement(
        'button',
        {
          key: 'clearButton',
          onClick: this.handleClearButtonClick,
          onMouseDown: preventDefault,
          className: clearButtonClassName,
          style: _extends({}, clearButtonStyle),
          tabIndex: tabIndex
        },
        _react2.default.createElement(
          'svg',
          { style: _extends({}, svgProps), viewBox: '4 4 16 16' },
          _react2.default.createElement('path', { d: 'M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z' })
        )
      );
    }
  }, {
    key: 'onClick',
    value: function onClick(event) {
      if (!this.state.focused) {
        this.focus();
      }
      if (this.props.wrapperProps && this.props.wrapperProps.onClick) {
        this.props.wrapperProps.onClick(event);
      }
    }
  }, {
    key: 'onBlur',
    value: function onBlur(event) {
      this.setState({
        focused: false
      });
      if (this.props.onBlur) {
        this.props.onBlur(event);
      }
    }
  }, {
    key: 'onFocus',
    value: function onFocus(event) {
      this.setState({
        focused: true
      });
      if (this.props.onFocus) {
        this.props.onFocus(event);
      }
    }
  }]);

  return TextInput;
}(_react.Component);

TextInput.defaultProps = {
  hidden: false,
  type: 'text',
  theme: 'default',
  rootClassName: 'zippy-react-toolkit-text-input',
  enableClearButton: true,
  clearButtonSize: 10,
  stopChangePropagation: true,
  acceptClearToolFocus: false
};

TextInput.propTypes = {
  type: _propTypes2.default.string,
  theme: _propTypes2.default.string,
  name: _propTypes2.default.string,
  placeholder: _propTypes2.default.string,
  autoFocus: _propTypes2.default.bool,
  maxLength: _propTypes2.default.number,
  size: _propTypes2.default.number,
  minLength: _propTypes2.default.number,
  required: _propTypes2.default.bool,
  readOnly: _propTypes2.default.bool,
  disabled: _propTypes2.default.bool,
  hidden: _propTypes2.default.bool,
  stopChangePropagation: _propTypes2.default.bool,
  enableClearButton: _propTypes2.default.bool,
  acceptClearToolFocus: _propTypes2.default.bool,
  rtl: _propTypes2.default.bool,
  rootClassName: _propTypes2.default.string,
  //clearButton style
  clearButtonSize: _propTypes2.default.number,
  clearButtonColor: _propTypes2.default.string,
  clearButtonStyle: _propTypes2.default.object,
  clearButtonClassName: _propTypes2.default.string
};

exports.default = TextInput;
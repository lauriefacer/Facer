'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.generateLabeldTickSteps = exports.generateTickValuesBySteps = exports.getTickWrapClassNames = exports.renderTickLabel = exports.renderTickContent = exports.renderTick = exports.renderTicks = undefined;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; /**
                                                                                                                                                                                                                                                                   * Copyright (c) 2015-present, Zippy Technologies
                                                                                                                                                                                                                                                                   *
                                                                                                                                                                                                                                                                   * This source code is licensed under the MIT license found in the
                                                                                                                                                                                                                                                                   * LICENSE file in the root directory of this source tree.
                                                                                                                                                                                                                                                                   */

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _valueUtils = require('../value-utils');

var _join = require('../../../../common/join');

var _join2 = _interopRequireDefault(_join);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var generateTickValuesBySteps = function generateTickValuesBySteps(config) {
  var tickStep = config.tickStep,
      step = config.step,
      startValue = config.startValue,
      endValue = config.endValue,
      skipEdgeTicks = config.skipEdgeTicks;


  var computedTickStep = tickStep || step || 5;

  if (computedTickStep < 1) {
    computedTickStep = 1;
  }

  var computedStartValue = startValue;
  var computedEndValue = endValue;

  var isReveresed = startValue > endValue;

  if (isReveresed) {
    computedStartValue = endValue;
    computedEndValue = startValue;
  }

  if (skipEdgeTicks) {
    computedEndValue -= 1;
    computedStartValue += computedTickStep;
  }

  var ticks = [];

  for (var i = computedStartValue; i <= computedEndValue; i += computedTickStep) {
    ticks.push(i);
  }

  if (isReveresed) {
    ticks = ticks.reverse();
  }

  return ticks;
};

var generateLabeldTickSteps = function generateLabeldTickSteps(config) {
  var tickStep = config.tickStep,
      step = config.step,
      smallTickStep = config.smallTickStep,
      startValue = config.startValue,
      endValue = config.endValue,
      skipEdgeTicks = config.skipEdgeTicks;


  var generateTickValuesByStepsFn = config.generateTickValuesBySteps || generateTickValuesBySteps;

  var largeSteps = generateTickValuesByStepsFn(config).map(function (value) {
    return {
      type: 'big',
      value: value
    };
  });
  var smallSteps = generateTickValuesByStepsFn({
    tickStep: smallTickStep,
    step: step,
    startValue: startValue,
    endValue: endValue,
    skipEdgeTicks: skipEdgeTicks
  }).map(function (value) {
    return {
      type: 'small',
      value: value
    };
  });

  var combinedTicksSet = largeSteps.concat(smallSteps).sort(function (item1, item2) {
    return item1.value - item2.value;
  });

  combinedTicksSet = combinedTicksSet.reduce(function (acc, tickObject, idx) {
    if (acc.valueMap[tickObject.value]) {
      if (tickObject.type === 'big') {
        acc.values[acc.values.length - 1] = tickObject;
      }
      return acc;
    }

    acc.valueMap[tickObject.value] = true;
    acc.values.push(tickObject);
    return acc;
  }, { values: [], valueMap: {} }).values;

  return combinedTicksSet;
};

var renderTicks = function renderTicks(config, extraCallbacks, CLASS_NAME) {
  var tickBarPosition = config.tickBarPosition,
      tickWrapStyle = config.tickWrapStyle,
      tickStep = config.tickStep,
      smallTickStep = config.smallTickStep,
      handleSize = config.handleSize,
      renderStartTickBar = config.renderStartTickBar,
      renderEndTickBar = config.renderEndTickBar;
  var handleClickOnTick = extraCallbacks.handleClickOnTick;


  var ticks = config.ticks;

  if (!ticks && (tickStep || smallTickStep)) {
    ticks = generateLabeldTickSteps(config);
  }

  if (!ticks || !ticks.length) {
    return;
  }

  var ticksContent = ticks.map(function (tick) {
    return renderTick(tick, config, extraCallbacks, CLASS_NAME);
  });

  var tickWrapperProps = {
    onClick: handleClickOnTick,
    style: tickWrapStyle,
    children: ticksContent
  };

  if (tickBarPosition === 'both') {
    return [_react2.default.createElement('div', _extends({
      key: 'first-tick-set'
    }, tickWrapperProps, {
      className: getTickWrapClassNames(config, 'tick-bars-position-start', CLASS_NAME)
    })), _react2.default.createElement('div', _extends({
      key: 'second-tick-set'
    }, tickWrapperProps, {
      className: getTickWrapClassNames(config, 'tick-bars-position-end', CLASS_NAME)
    }))];
  }

  return _react2.default.createElement('div', _extends({
    key: 'tick-set'
  }, tickWrapperProps, {
    className: getTickWrapClassNames(config, 'tick-bars-position-' + tickBarPosition, CLASS_NAME)
  }));
};

var getTickClassNames = function getTickClassNames(tickValue, tickType, _ref, CLASS_NAME) {
  var noFill = _ref.noFill,
      startValue = _ref.startValue,
      rtl = _ref.rtl,
      horizontal = _ref.horizontal,
      endValue = _ref.endValue,
      currentValue = _ref.currentValue,
      trackFillPosition = _ref.trackFillPosition;

  var isCurrent = false,
      isContined = false;
  var isRangeValue = Array.isArray(currentValue);

  if (rtl && horizontal) {
    trackFillPosition = trackFillPosition === 'start' ? 'end' : 'start';
  }

  if (isRangeValue) {
    isCurrent = tickValue === currentValue[0] || tickValue == currentValue[1];
    isContined = (0, _valueUtils.isContainedInRange)(tickValue, [currentValue[0], currentValue[1]]);
  } else {
    isCurrent = tickValue === currentValue;
    isContined = (0, _valueUtils.isValueContainedBySelection)(tickValue, {
      currentValue: currentValue,
      trackFillPosition: trackFillPosition,
      endValue: endValue,
      startValue: startValue
    });
  }

  return (0, _join2.default)(CLASS_NAME + '__tick', CLASS_NAME + '__tick--' + tickType, tickValue === startValue && CLASS_NAME + '__tick--start-value', tickValue === endValue && CLASS_NAME + '__tick--end-value', isCurrent && CLASS_NAME + '__tick--current-value', !noFill && isContined && CLASS_NAME + '__tick--contained-value');
};

var renderTick = function renderTick(tick, config, extraCallbacks, CLASS_NAME) {
  var tickValue = void 0;
  var tickStyle = void 0;
  var type = 'big';

  if ((typeof tick === 'undefined' ? 'undefined' : _typeof(tick)) == 'object') {
    tickValue = tick.value;
    tickStyle = tick.style;
    type = tick.type || type;
  } else {
    tickValue = tick;
  }

  var renderTickContent = config.renderTickContent,
      renderTickLabel = config.renderTickLabel,
      startValue = config.startValue,
      endValue = config.endValue,
      currentValue = config.currentValue,
      trackFillPosition = config.trackFillPosition,
      horizontal = config.horizontal,
      smallTickPercentage = config.smallTickPercentage,
      tickLabels = config.tickLabels;


  var side = horizontal ? 'left' : 'top';
  var style = _extends({}, config.tickStyle, tickStyle);

  style[side] = (0, _valueUtils.getPossitionOfValueBasedOnLimits)(tickValue, config) * 100 + '%';

  if (tickValue === 100) {
    style[side] = 'calc(' + (0, _valueUtils.getPossitionOfValueBasedOnLimits)(tickValue, config) * 100 + '% - 1px)';
  }

  var tickProps = {
    className: getTickClassNames(tickValue, type, config, CLASS_NAME),
    key: tickValue + '-tick',
    children: type === 'big' && tickLabels && renderTickLabel({ className: CLASS_NAME + '__tick-label' }, { tickValue: tickValue }),
    'data-value': tickValue,
    style: style
  };

  return renderTickContent(tickProps);
};

var getTickWrapClassNames = function getTickWrapClassNames(config, extraClassModifier, CLASS_NAME) {
  var tickBarPosition = config.tickBarPosition;

  var TICK_WRAPPER_CLASS_NAME = CLASS_NAME + '__tick-wrap';
  return (0, _join2.default)(TICK_WRAPPER_CLASS_NAME, extraClassModifier && TICK_WRAPPER_CLASS_NAME + '--' + extraClassModifier);
};

var renderTickContent = function renderTickContent(props) {
  return _react2.default.createElement('div', props);
};
var renderTickLabel = function renderTickLabel(domProps, _ref2) {
  var tickValue = _ref2.tickValue;
  return _react2.default.createElement(
    'span',
    domProps,
    tickValue
  );
};

exports.renderTicks = renderTicks;
exports.renderTick = renderTick;
exports.renderTickContent = renderTickContent;
exports.renderTickLabel = renderTickLabel;
exports.getTickWrapClassNames = getTickWrapClassNames;
exports.generateTickValuesBySteps = generateTickValuesBySteps;
exports.generateLabeldTickSteps = generateLabeldTickSteps;
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isContainedInRange = exports.getPossitionOfValueBasedOnLimits = exports.shiftRangeByValue = exports.shiftUpperEdgeOfRange = exports.shiftLowerEdgeOfRange = exports.isValueContainedBySelection = exports.getValue = exports.toValue = exports.getPercentageForValue = exports.getValueForPercentage = exports.valueToStep = undefined;

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }(); /**
opyright (c) 2015-present, Zippy Technologies

his source code is licensed under the MIT license found in the
file in the root directory of this source tree.


var _clamp = require('../../../common/clamp');

var _clamp2 = _interopRequireDefault(_clamp);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function getValue(props, state) {
  var value = props.value == null ? state.value == null ? props.startValue : state.value : props.value;
  if (state.dragging) {
    value = state.value;
  }
  return value;
}

function toValue(value, props) {
  if (Array.isArray(value)) {
    return [toValue(value[0], props), toValue(value[1], props)];
  }
  return props.toStep((0, _clamp2.default)(value, props.startValue, props.endValue), props.step);
}

function getPercentageForValue(value, props) {
  value = value || 0;

  var range = Math.abs(props.endValue - props.startValue);
  var diff = value - props.startValue;

  return diff * 100 / range;
}

function getValueForPercentage(percentage, props, config) {
  var intervalRange = Math.abs(props.endValue - props.startValue);
  var value = percentage * intervalRange / 100;
  if (props.isReversed) {
    value = 1 - value;
  }
  var noStartValue = config && config.noStartValue;
  var v = noStartValue ? value : props.startValue + value;

  return v;
}

function valueToStep(value, step) {
  if (!step) {
    return value;
  }

  if (step < 1) {
    console.warn('must implement support for decimal steps');
  }

  return value - Math.abs(value) % step;
}

var getPossitionOfValueBasedOnLimits = function getPossitionOfValueBasedOnLimits(value, config) {
  var startValue = config.startValue,
      endValue = config.endValue;


  value = (0, _clamp2.default)(value, startValue, endValue);

  var intervalRange = Math.abs(startValue - endValue);
  var leftEdgeToValue = Math.abs(startValue - value);

  return Math.round(leftEdgeToValue / intervalRange * 1000) / 1000;
};

var isValueContainedBySelection = function isValueContainedBySelection(value, config) {
  var currentValue = config.currentValue,
      trackFillPosition = config.trackFillPosition,
      startValue = config.startValue,
      endValue = config.endValue;


  var start = currentValue;
  var end = endValue;

  if (trackFillPosition === 'start') {
    start = startValue;
    end = currentValue;
  }

  return isContainedInRange(value, [start, end]);
};

var isContainedInRange = function isContainedInRange(value, range) {
  var _range = _slicedToArray(range, 2),
      start = _range[0],
      end = _range[1];

  if (start > end) {
    var aux = start;
    start = end;
    end = aux;
  }
  return value >= start && value <= end;
};

/**
 * Logic for handling change of lower value of the range interval, taking into
 * account the start and end edges of the space and the min/max range distance.
 *
 * If the new start of the range interval would be outside range space
 * [startValue, endValue] it will be set to start value.
 *
 * If the new start of the edge would break the maxRange constraint,
 * it will drag the endValue with it
 *
 * If the new start of the edge would break the minRange constraing,
 * it will either shift the end of the edge, or stay in place if end of the edge is already
 * at the end of the range space.
 */
var shiftLowerEdgeOfRange = function shiftLowerEdgeOfRange(delta, _ref) {
  var currentValue = _ref.currentValue,
      startValue = _ref.startValue,
      endValue = _ref.endValue,
      minRange = _ref.minRange,
      maxRange = _ref.maxRange,
      _ref$step = _ref.step,
      step = _ref$step === undefined ? 1 : _ref$step,
      isReversed = _ref.isReversed;

  delta = convertToStepDelta(delta, step);

  if (isReversed) {
    var _shiftUpperEdgeOfRang = shiftUpperEdgeOfRange(delta, {
      currentValue: [currentValue[1], currentValue[0]],
      startValue: endValue,
      endValue: startValue,
      minRange: minRange,
      maxRange: maxRange,
      step: step
    }),
        _shiftUpperEdgeOfRang2 = _slicedToArray(_shiftUpperEdgeOfRang, 2),
        upperShiftStart = _shiftUpperEdgeOfRang2[0],
        upperShiftEnd = _shiftUpperEdgeOfRang2[1];

    return [upperShiftEnd, upperShiftStart];
  }

  var _currentValue = _slicedToArray(currentValue, 2),
      initialStartValue = _currentValue[0],
      initialEndValue = _currentValue[1];

  var newStartRangeValue = initialStartValue + delta;
  var newEndRangeValue = initialEndValue;

  if (newStartRangeValue < startValue) {
    newStartRangeValue = startValue;
  }

  if (newStartRangeValue > endValue) {
    newStartRangeValue = endValue;
    newEndRangeValue = endValue;
  }

  if (newStartRangeValue > newEndRangeValue) {
    newEndRangeValue = newStartRangeValue;
  }

  var intervalRange = Math.abs(newEndRangeValue - newStartRangeValue);

  if (intervalRange > maxRange) {
    newEndRangeValue = newStartRangeValue + maxRange;
  }

  if (intervalRange < minRange) {
    newEndRangeValue = newStartRangeValue + minRange;
    if (newEndRangeValue > endValue) {
      var endEdgeDelta = newEndRangeValue - endValue;
      newEndRangeValue = endValue;
      newStartRangeValue -= endEdgeDelta;
    }
  }

  return [newStartRangeValue, newEndRangeValue];
};

/**
 * Logic for handling shifting the edge of the range. Uses the power of math to
 * transform end edge interaction into start edge interaction so we reuse the
 * logic from shiftLowerEdgeOfRange completely.
 */
var shiftUpperEdgeOfRange = function shiftUpperEdgeOfRange(delta, _ref2) {
  var currentValue = _ref2.currentValue,
      startValue = _ref2.startValue,
      endValue = _ref2.endValue,
      minRange = _ref2.minRange,
      maxRange = _ref2.maxRange,
      step = _ref2.step,
      isReversed = _ref2.isReversed;

  if (isReversed) {
    var _shiftLowerEdgeOfRang = shiftLowerEdgeOfRange(delta, {
      currentValue: [currentValue[1], currentValue[0]],
      startValue: endValue,
      endValue: startValue,
      minRange: minRange,
      maxRange: maxRange,
      step: step
    }),
        _shiftLowerEdgeOfRang2 = _slicedToArray(_shiftLowerEdgeOfRang, 2),
        lowerShiftStart = _shiftLowerEdgeOfRang2[0],
        lowerShiftEnd = _shiftLowerEdgeOfRang2[1];

    return [lowerShiftEnd, lowerShiftStart];
  }

  var inversedValue = [-currentValue[1], -currentValue[0]];

  var _shiftLowerEdgeOfRang3 = shiftLowerEdgeOfRange(-delta, {
    currentValue: inversedValue,
    startValue: -endValue,
    endValue: -startValue,
    minRange: minRange,
    maxRange: maxRange,
    step: step,
    isReversed: isReversed
  }),
      _shiftLowerEdgeOfRang4 = _slicedToArray(_shiftLowerEdgeOfRang3, 2),
      inversedEnd = _shiftLowerEdgeOfRang4[0],
      inversedStart = _shiftLowerEdgeOfRang4[1];

  return [-inversedStart, -inversedEnd];
};

var shiftRangeByValue = function shiftRangeByValue(delta, _ref3) {
  var currentValue = _ref3.currentValue,
      startValue = _ref3.startValue,
      endValue = _ref3.endValue,
      minRange = _ref3.minRange,
      maxRange = _ref3.maxRange,
      step = _ref3.step,
      isReversed = _ref3.isReversed;

  var _shiftLowerEdgeOfRang5 = shiftLowerEdgeOfRange(delta, {
    currentValue: currentValue,
    startValue: startValue,
    endValue: endValue,
    minRange: minRange,
    maxRange: maxRange,
    step: step,
    isReversed: isReversed
  }),
      _shiftLowerEdgeOfRang6 = _slicedToArray(_shiftLowerEdgeOfRang5, 2),
      leftShiftStart = _shiftLowerEdgeOfRang6[0],
      leftShiftEnd = _shiftLowerEdgeOfRang6[1];

  var intervalRange = Math.abs(leftShiftStart - leftShiftEnd);
  var result = null;
  if (intervalRange === minRange) {
    result = [leftShiftStart, leftShiftEnd];
  } else {
    result = shiftUpperEdgeOfRange(delta, {
      currentValue: [leftShiftStart, leftShiftEnd],
      startValue: startValue,
      endValue: endValue,
      minRange: minRange,
      maxRange: maxRange,
      step: step,
      isReversed: isReversed
    });
  }

  return result;
};

var convertToStepDelta = function convertToStepDelta(delta, step) {
  if (delta === 0) {
    return delta;
  }
  delta = Math.round(delta * 100) / 100;
  var comparisionDiff = Math.abs(delta);
  var sign = delta / comparisionDiff;

  if (comparisionDiff < step) {
    delta = 0;
  } else {
    delta = sign * step * Math.round(comparisionDiff / step);
  }

  return delta;
};

exports.valueToStep = valueToStep;
exports.getValueForPercentage = getValueForPercentage;
exports.getPercentageForValue = getPercentageForValue;
exports.toValue = toValue;
exports.getValue = getValue;
exports.isValueContainedBySelection = isValueContainedBySelection;
exports.shiftLowerEdgeOfRange = shiftLowerEdgeOfRange;
exports.shiftUpperEdgeOfRange = shiftUpperEdgeOfRange;
exports.shiftRangeByValue = shiftRangeByValue;
exports.getPossitionOfValueBasedOnLimits = getPossitionOfValueBasedOnLimits;
exports.isContainedInRange = isContainedInRange;
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; /**
                                                                                                                                                                                                                                                                   * Copyright (c) 2015-present, Zippy Technologies
                                                                                                                                                                                                                                                                   *
                                                                                                                                                                                                                                                                   * This source code is licensed under the MIT license found in the
                                                                                                                                                                                                                                                                   * LICENSE file in the root directory of this source tree.
                                                                                                                                                                                                                                                                   */

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _reactDom = require('react-dom');

var _cleanProps = require('../../common/cleanProps');

var _cleanProps2 = _interopRequireDefault(_cleanProps);

var _autoBind = require('@zippytech/react-class/autoBind');

var _autoBind2 = _interopRequireDefault(_autoBind);

var _region = require('@zippytech/region');

var _region2 = _interopRequireDefault(_region);

var _shouldComponentUpdate2 = require('../../common/shouldComponentUpdate');

var _shouldComponentUpdate3 = _interopRequireDefault(_shouldComponentUpdate2);

var _hasTouch = require('@zippytech/has-touch');

var _hasTouch2 = _interopRequireDefault(_hasTouch);

var _raf = require('../../common/raf');

var _raf2 = _interopRequireDefault(_raf);

var _handlers = require('./utils/sub-components/handlers');

var _valueUtils = require('./utils/value-utils');

var _controlButtons = require('./utils/sub-components/control-buttons');

var _ticks = require('./utils/sub-components/ticks');

var _dragInteractionHandler = require('./utils/drag-interaction-handler');

var _dragInteractionHandler2 = _interopRequireDefault(_dragInteractionHandler);

var _keyboardInteractionHelper = require('./utils/keyboard-interaction-helper');

var _keyboardInteractionHelper2 = _interopRequireDefault(_keyboardInteractionHelper);

var _SliderProps = require('./SliderProps');

var _getClassNames = require('./utils/get-class-names');

var _getClassNames2 = _interopRequireDefault(_getClassNames);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var getCurrentValue = function getCurrentValue(props, state, isReversed) {
  var value = props.value,
      startValue = props.startValue,
      endValue = props.endValue,
      statefulDrag = props.statefulDrag,
      rtl = props.rtl;
  var stateValue = state.value,
      dragging = state.dragging;


  var currentValue = null;

  if (statefulDrag && dragging) {
    if (typeof stateValue !== 'undefined') {
      currentValue = stateValue;
    } else {
      currentValue = value;
    }
  }

  if (currentValue === null) {
    currentValue = (0, _valueUtils.toValue)(typeof value !== 'undefined' ? value : stateValue, props);
  }

  if (startValue > endValue && currentValue[0] < currentValue[1]) {
    currentValue = [currentValue[1], currentValue[0]];
  }

  return (0, _valueUtils.shiftRangeByValue)(0, _extends({}, props, { isReversed: isReversed, currentValue: currentValue }));
};

var getProps = function getProps(props, state) {
  var orientation = props.orientation,
      rtl = props.rtl,
      startValue = props.startValue,
      endValue = props.endValue,
      shouldShowTooltip = props.shouldShowTooltip,
      rootClassName = props.rootClassName;


  var horizontal = orientation === 'horizontal';

  var parsedStartValue = startValue;
  var parsedEndValue = endValue;

  if (rtl && horizontal) {
    parsedStartValue = endValue;
    parsedEndValue = startValue;
  }

  var isReversed = parsedStartValue > parsedEndValue;

  var newPropsBasedOnRtl = _extends({}, props, {
    startValue: parsedStartValue,
    endValue: parsedEndValue
  });

  var currentValue = getCurrentValue(newPropsBasedOnRtl, state, isReversed);

  var handleStyle = (0, _handlers.getHandleStyle)(props.handleSize, newPropsBasedOnRtl, state);
  var isControlled = newPropsBasedOnRtl.value;

  var className = (0, _getClassNames2.default)(props, state, rootClassName);

  var onDrag = null;

  var visibleTooltip = shouldShowTooltip(props, state);

  var dragging = state.dragging,
      dragTarget = state.dragTarget,
      focused = state.focused,
      focusTarget = state.focusTarget,
      trackFillFocused = state.trackFillFocused,
      startHandleFocused = state.startHandleFocused,
      endHandleFocused = state.endHandleFocused,
      mouseOver = state.mouseOver;


  return _extends({}, newPropsBasedOnRtl, {
    style: _extends({}, props.style),
    handleStyle: handleStyle,
    currentValue: [].concat(_toConsumableArray(currentValue)),
    className: className,
    onDrag: onDrag,
    horizontal: horizontal,
    trackFillPosition: 'start',

    isControlled: isControlled,
    isReversed: isReversed,

    dragging: dragging,
    dragTarget: dragTarget,
    mouseOver: mouseOver,
    focused: focused,
    focusTarget: focusTarget,
    trackFillFocused: trackFillFocused,
    startHandleFocused: startHandleFocused,
    endHandleFocused: endHandleFocused,
    visibleTooltip: visibleTooltip
  });
};

var getInitialValue = function getInitialValue(props) {
  var defaultValue = props.defaultValue,
      value = props.value,
      startValue = props.startValue,
      endValue = props.endValue;


  if (typeof value !== 'undefined') {
    return null;
  }

  if (typeof defaultValue !== 'undefined') {
    return defaultValue;
  }

  if (typeof startValue !== 'undefined' && typeof endValue !== 'undefined') {
    return [startValue, endValue];
  }

  throw new Error('Improper initialisation. Provide either a value, default value or start&end value');
};

var getNewValueBasedOnKeyDownOnTrackFill = function getNewValueBasedOnKeyDownOnTrackFill(event, config) {
  var diff = (0, _keyboardInteractionHelper2.default)(event, config);

  if (diff !== null) {
    return (0, _valueUtils.shiftRangeByValue)((config.isReversed ? -1 : 1) * diff, config);
  }

  return null;
};

var getNewValueBasedOnKeyDownOnStartHandle = function getNewValueBasedOnKeyDownOnStartHandle(event, config) {
  var diff = (0, _keyboardInteractionHelper2.default)(event, config);

  if (diff !== null) {
    return (0, _valueUtils.shiftLowerEdgeOfRange)((config.isReversed ? -1 : 1) * diff, config);
  }

  return null;
};

var getNewValueBasedOnKeyDownOnEndHandle = function getNewValueBasedOnKeyDownOnEndHandle(event, config) {
  var diff = (0, _keyboardInteractionHelper2.default)(event, config);

  if (diff !== null) {
    return (0, _valueUtils.shiftUpperEdgeOfRange)((config.isReversed ? -1 : 1) * diff, config);
  }

  return null;
};

var getDragRegions = function getDragRegions(_ref) {
  var handleNode = _ref.handleNode,
      rootNode = _ref.rootNode,
      handleSize = _ref.handleSize;

  var targetRegion = _region2.default.from(handleNode);
  var constrainRegion = _region2.default.from(rootNode);

  var halfHandleSize = handleSize / 2;
  constrainRegion.left -= halfHandleSize;
  constrainRegion.right += halfHandleSize;
  constrainRegion.top += halfHandleSize;
  constrainRegion.bottom += halfHandleSize;

  return { constrainRegion: constrainRegion, targetRegion: targetRegion };
};

var getTupleWithReplacedClosestNumber = function getTupleWithReplacedClosestNumber(value, config) {
  var currentValue = config.currentValue,
      endValue = config.endValue,
      startValue = config.startValue,
      isReversed = config.isReversed;


  var newTuple = [].concat(_toConsumableArray(currentValue));

  var _currentValue = _slicedToArray(currentValue, 2),
      start = _currentValue[0],
      end = _currentValue[1];

  if (isReversed) {
    var _getTupleWithReplaced = getTupleWithReplacedClosestNumber(value, _extends({}, config, {
      currentValue: [end, start],
      isReversed: false,
      startValue: endValue,
      endValue: startValue
    })),
        _getTupleWithReplaced2 = _slicedToArray(_getTupleWithReplaced, 2),
        reversedStart = _getTupleWithReplaced2[0],
        reversedEnd = _getTupleWithReplaced2[1];

    return [reversedEnd, reversedStart];
  }

  if (value <= start) {
    newTuple = (0, _valueUtils.shiftLowerEdgeOfRange)(-1 * (start - value), config);
  } else if (value >= currentValue[1]) {
    newTuple = (0, _valueUtils.shiftUpperEdgeOfRange)(value - end, config);
  } else {
    var middleOfInterval = start + Math.abs(end - start) / 2;

    if (value <= middleOfInterval) {
      newTuple = (0, _valueUtils.shiftLowerEdgeOfRange)(value - start, config);
    } else if (value <= end) {
      newTuple = (0, _valueUtils.shiftUpperEdgeOfRange)(-1 * (end - value), config);
    }
  }

  return newTuple;
};

var getNewValueBasedOnWheelOnTrackFill = function getNewValueBasedOnWheelOnTrackFill(event, config) {
  var deltaY = event.deltaY;
  var step = config.step,
      largeStep = config.largeStep,
      isReversed = config.isReversed,
      getValueModifier = config.getValueModifier;


  var diff = (isReversed ? -1 : 1) * (getValueModifier(event, config) * (deltaY > 0 ? -1 : 1));

  return (0, _valueUtils.shiftRangeByValue)(diff, config);
};

var getNewValueBasedOnWheelOnStartHandle = function getNewValueBasedOnWheelOnStartHandle(event, config) {
  var deltaY = event.deltaY;
  var step = config.step,
      largeStep = config.largeStep,
      isReversed = config.isReversed,
      getValueModifier = config.getValueModifier;


  var diff = (isReversed ? -1 : 1) * (getValueModifier(event, config) * (deltaY > 0 ? -1 : 1));

  return (0, _valueUtils.shiftLowerEdgeOfRange)(diff, config);
};

var getNewValueBasedOnWheelOnEndHandle = function getNewValueBasedOnWheelOnEndHandle(event, config) {
  var deltaY = event.deltaY;
  var step = config.step,
      largeStep = config.largeStep,
      isReversed = config.isReversed,
      getValueModifier = config.getValueModifier;


  var diff = (isReversed ? -1 : 1) * (getValueModifier(event, config) * (deltaY > 0 ? -1 : 1));

  return (0, _valueUtils.shiftUpperEdgeOfRange)(diff, config);
};

var ReactRangeSlider = function (_Component) {
  _inherits(ReactRangeSlider, _Component);

  function ReactRangeSlider(props) {
    _classCallCheck(this, ReactRangeSlider);

    var _this = _possibleConstructorReturn(this, (ReactRangeSlider.__proto__ || Object.getPrototypeOf(ReactRangeSlider)).call(this, props));

    (0, _autoBind2.default)(_this);

    _this.state = {
      value: getInitialValue(props)
    };
    return _this;
  }

  _createClass(ReactRangeSlider, [{
    key: 'shouldComponentUpdate',
    value: function shouldComponentUpdate(nextProps, nextState) {
      return (0, _shouldComponentUpdate3.default)(this, nextProps, nextState);
    }
  }, {
    key: 'setStartHandleRef',
    value: function setStartHandleRef(el) {
      this._startHandle = el;
    }
  }, {
    key: 'setEndHandleRef',
    value: function setEndHandleRef(el) {
      this._endHandle = el;
    }
  }, {
    key: 'setTrackLineRef',
    value: function setTrackLineRef(el) {
      this._trackLine = el;
    }
  }, {
    key: 'setTrackFillRef',
    value: function setTrackFillRef(el) {
      this._trackFill = el;
    }
  }, {
    key: 'handleMouseEnter',
    value: function handleMouseEnter() {
      this.setState({
        mouseOver: true
      });
    }
  }, {
    key: 'handleMouseLeave',
    value: function handleMouseLeave() {
      this.setState({
        mouseOver: false
      });
    }
  }, {
    key: 'handleTrackClick',
    value: function handleTrackClick(event) {
      var _p = this.p,
          enableTrackClick = _p.enableTrackClick,
          currentValue = _p.currentValue,
          startValue = _p.startValue,
          endValue = _p.endValue,
          minRange = _p.minRange,
          maxRange = _p.maxRange;


      if (!enableTrackClick || this._handledDragOnTrackBar) {
        this._handledDragOnTrackBar = false;
        return;
      }

      var _p2 = this.p,
          horizontal = _p2.horizontal,
          handleStyle = _p2.handleStyle;


      var region = _region2.default.from(this.getTrackDOMNode());
      var dragSize = this.getAvailableDragSize();
      var handleSize = handleStyle[horizontal ? 'width' : 'height'];

      var offset = horizontal ? event.clientX - region.left : event.clientY - region.top;

      var percentage = offset * 100 / dragSize;

      var valueAsMouseEvent = (0, _valueUtils.getValueForPercentage)(percentage, this.p);
      var newValue = getTupleWithReplacedClosestNumber(valueAsMouseEvent, this.p);
      this.setValue(newValue);
    }
  }, {
    key: 'handleTrackMouseDown',
    value: function handleTrackMouseDown(event) {
      var _this2 = this;

      var _p3 = this.p,
          currentValue = _p3.currentValue,
          isControlled = _p3.isControlled,
          onChange = _p3.onChange,
          handleSize = _p3.handleSize,
          statefulDrag = _p3.statefulDrag,
          onDrag = _p3.onDrag,
          startValue = _p3.startValue,
          endValue = _p3.endValue,
          minRange = _p3.minRange,
          maxRange = _p3.maxRange,
          step = _p3.step,
          isReversed = _p3.isReversed;

      var _getDragRegions = getDragRegions({
        handleNode: this._trackFill,
        rootNode: (0, _reactDom.findDOMNode)(this),
        handleSize: handleSize
      }),
          targetRegion = _getDragRegions.targetRegion,
          constrainRegion = _getDragRegions.constrainRegion;

      (0, _dragInteractionHandler2.default)(event, this.p, {
        currentValue: currentValue[0],
        targetRegion: targetRegion,
        constrainRegion: constrainRegion,
        dragSize: this.getAvailableDragSize(),

        onHandleDragStart: function onHandleDragStart() {
          var stateProps = { dragging: true, dragTarget: 'trackHandler' };
          if (!isControlled || statefulDrag) {
            stateProps.value = currentValue;
          }
          _this2.setState(stateProps);
        },

        onHandleDrag: function onHandleDrag(newValue, diffValue) {
          if (!diffValue) {
            return;
          }

          var relativeDiff = diffValue - (_this2.p.currentValue[0] - currentValue[0]);

          var newTuple = (0, _valueUtils.shiftRangeByValue)(relativeDiff, {
            currentValue: _this2.p.currentValue,
            startValue: startValue,
            endValue: endValue,
            minRange: minRange,
            maxRange: maxRange,
            step: step,
            isReversed: isReversed
          });

          _this2._handledDragOnTrackBar = true;

          _this2.setValue(newTuple);
          _this2.props.onDrag && _this2.props.onDrag(newTuple);
        },

        onHandleDragEnd: function onHandleDragEnd() {
          var currentValue = _this2.p.currentValue;

          _this2.setState({
            dragging: false,
            dragTarget: false
          });
          _this2.notify(currentValue);
        }
      });
    }
  }, {
    key: 'handleMouseDownOnStartHandle',
    value: function handleMouseDownOnStartHandle(event) {
      var _this3 = this;

      event.stopPropagation();

      var _p4 = this.p,
          currentValue = _p4.currentValue,
          isControlled = _p4.isControlled,
          onChange = _p4.onChange,
          handleSize = _p4.handleSize,
          statefulDrag = _p4.statefulDrag,
          onDrag = _p4.onDrag,
          startValue = _p4.startValue,
          endValue = _p4.endValue,
          maxRange = _p4.maxRange,
          minRange = _p4.minRange,
          step = _p4.step,
          isReversed = _p4.isReversed;

      var _getDragRegions2 = getDragRegions({
        handleNode: this._startHandle,
        rootNode: (0, _reactDom.findDOMNode)(this),
        handleSize: handleSize
      }),
          targetRegion = _getDragRegions2.targetRegion,
          constrainRegion = _getDragRegions2.constrainRegion;

      (0, _dragInteractionHandler2.default)(event, this.p, {
        currentValue: currentValue[0],
        targetRegion: targetRegion,
        constrainRegion: constrainRegion,
        dragSize: this.getAvailableDragSize(),

        onHandleDragStart: function onHandleDragStart() {
          var stateProps = { dragging: true, dragTarget: 'startHandler' };
          if (!isControlled || statefulDrag) {
            stateProps.value = currentValue;
          }
          _this3.setState(stateProps);
          _this3.props.onDragStart && _this3.props.onDragStart(_this3.p.currentValue);
        },

        onHandleDrag: function onHandleDrag(newValue, diffValue) {
          if (!diffValue) {
            return;
          }

          var relativeDiff = diffValue - (_this3.p.currentValue[0] - currentValue[0]);
          var newTuple = (0, _valueUtils.shiftLowerEdgeOfRange)(relativeDiff, {
            currentValue: _this3.p.currentValue,
            startValue: startValue,
            endValue: endValue,
            minRange: minRange,
            maxRange: maxRange,
            step: step,
            isReversed: isReversed
          });

          _this3.setValue(newTuple);
          onDrag && onDrag(newTuple);
        },

        onHandleDragEnd: function onHandleDragEnd() {
          var currentValue = _this3.p.currentValue;

          _this3.setState({
            dragging: false,
            dragTarget: false
          });
          _this3.notify(currentValue);
          _this3.props.onDragEnd && _this3.props.onDragEnd(_this3.p.currentValue);
        }
      });
    }
  }, {
    key: 'handleMouseDownOnEndHandle',
    value: function handleMouseDownOnEndHandle(event) {
      var _this4 = this;

      event.stopPropagation();
      var _p5 = this.p,
          currentValue = _p5.currentValue,
          isControlled = _p5.isControlled,
          onChange = _p5.onChange,
          handleSize = _p5.handleSize,
          statefulDrag = _p5.statefulDrag,
          onDrag = _p5.onDrag,
          startValue = _p5.startValue,
          endValue = _p5.endValue,
          maxRange = _p5.maxRange,
          minRange = _p5.minRange,
          step = _p5.step,
          isReversed = _p5.isReversed;

      var _getDragRegions3 = getDragRegions({
        handleNode: this._endHandle,
        rootNode: (0, _reactDom.findDOMNode)(this),
        handleSize: handleSize
      }),
          targetRegion = _getDragRegions3.targetRegion,
          constrainRegion = _getDragRegions3.constrainRegion;

      (0, _dragInteractionHandler2.default)(event, this.p, {
        currentValue: currentValue[1],
        targetRegion: targetRegion,
        constrainRegion: constrainRegion,
        dragSize: this.getAvailableDragSize(),

        onHandleDragStart: function onHandleDragStart() {
          var stateProps = { dragging: true, dragTarget: 'endHandler' };
          if (!isControlled || statefulDrag) {
            stateProps.value = currentValue;
          }
          _this4.setState(stateProps);
          _this4.props.onDragStart && _this4.props.onDragStart(_this4.p.currentValue);
        },

        onHandleDrag: function onHandleDrag(newValue, diffValue) {
          if (!diffValue) {
            return;
          }
          var relativeDiff = diffValue - (_this4.p.currentValue[1] - currentValue[1]);

          var newTuple = (0, _valueUtils.shiftUpperEdgeOfRange)(relativeDiff, {
            currentValue: _this4.p.currentValue,
            startValue: startValue,
            endValue: endValue,
            minRange: minRange,
            maxRange: maxRange,
            step: step,
            isReversed: isReversed
          });
          _this4.setValue(newTuple);
          onDrag && onDrag(newTuple);
        },

        onHandleDragEnd: function onHandleDragEnd() {
          var currentValue = _this4.p.currentValue;

          _this4.setState({
            dragging: false,
            dragTarget: false
          });
          _this4.notify(currentValue);
          _this4.props.onDragEnd && _this4.props.onDragEnd(_this4.p.currentValue);
        }
      });
    }
  }, {
    key: 'handleFocus',
    value: function handleFocus(event) {
      var focusTarget = event.target;


      clearTimeout(this._blurOperation);

      var stateProps = {
        focused: true,
        focusTarget: focusTarget
      };

      if (focusTarget === this._trackFill) {
        stateProps.trackFillFocused = true;
      } else if (focusTarget === this._startHandle) {
        stateProps.startHandleFocused = true;
      } else if (focusTarget === this._endHandle) {
        stateProps.endHandleFocused = true;
      }

      this.setState(stateProps);
    }
  }, {
    key: 'handleClickOnTick',
    value: function handleClickOnTick(event) {
      var currentTarget = event.target;

      while (typeof currentTarget.dataset.value === 'undefined') {
        currentTarget = currentTarget.parentNode;
      }

      var _p6 = this.p,
          currentValue = _p6.currentValue,
          startValue = _p6.startValue,
          endValue = _p6.endValue,
          minRange = _p6.minRange,
          maxRange = _p6.maxRange;


      if (currentTarget) {
        var currentTargetValue = new Number(currentTarget.dataset.value);
        var newValue = getTupleWithReplacedClosestNumber(currentTargetValue, this.p);
        this.setValue(newValue);
      }
    }
  }, {
    key: 'handleBlur',
    value: function handleBlur(event) {
      var _this5 = this;

      this.setState({
        focusTarget: null,
        trackFillFocused: false,
        startHandleFocused: false,
        endHandleFocused: false
      });

      this._blurOperation = setTimeout(function () {
        _this5.setState({
          focused: false
        });
      });
    }
  }, {
    key: 'handleKeyDown',
    value: function handleKeyDown(event) {
      var _p7 = this.p,
          focusTarget = _p7.focusTarget,
          currentValue = _p7.currentValue,
          trackFillFocused = _p7.trackFillFocused,
          startHandleFocused = _p7.startHandleFocused,
          endHandleFocused = _p7.endHandleFocused;


      var newValue = null;

      if (trackFillFocused) {
        newValue = getNewValueBasedOnKeyDownOnTrackFill(event, this.p);
      } else if (startHandleFocused) {
        newValue = getNewValueBasedOnKeyDownOnStartHandle(event, this.p);
      } else if (endHandleFocused) {
        newValue = getNewValueBasedOnKeyDownOnEndHandle(event, this.p);
      }

      if (newValue !== null) {
        event.preventDefault();
        event.stopPropagation();
        this.setValue(newValue);
      }
    }
  }, {
    key: 'handleWheel',
    value: function handleWheel(event) {
      var _p8 = this.p,
          focusTarget = _p8.focusTarget,
          currentValue = _p8.currentValue,
          trackFillFocused = _p8.trackFillFocused,
          startHandleFocused = _p8.startHandleFocused,
          endHandleFocused = _p8.endHandleFocused;


      var newValue = void 0;

      if (trackFillFocused) {
        newValue = getNewValueBasedOnWheelOnTrackFill(event, this.p);
      } else if (startHandleFocused) {
        newValue = getNewValueBasedOnWheelOnStartHandle(event, this.p);
      } else if (endHandleFocused) {
        newValue = getNewValueBasedOnWheelOnEndHandle(event, this.p);
      }

      event.preventDefault();
      event.stopPropagation();

      this.setValue(newValue);
    }
  }, {
    key: 'getHandle',
    value: function getHandle() {
      return this._startHandle;
    }
  }, {
    key: 'getTrackDOMNode',
    value: function getTrackDOMNode() {
      return this._trackLine;
    }
  }, {
    key: 'getAvailableDragSize',
    value: function getAvailableDragSize(props) {
      var horizontal = this.p.horizontal;

      var region = _region2.default.from(this.getTrackDOMNode());

      return horizontal ? region.width : region.height;
    }
  }, {
    key: 'getRegion',
    value: function getRegion() {
      return _region2.default.from((0, _reactDom.findDOMNode)(this));
    }
  }, {
    key: 'notify',
    value: function notify(value) {
      var onChange = this.p.onChange;

      onChange && onChange(value);
    }
  }, {
    key: 'setValue',
    value: function setValue(value) {
      var _this6 = this;

      var newValue = (0, _valueUtils.toValue)(value, this.p);
      var _p9 = this.p,
          isControlled = _p9.isControlled,
          onDrag = _p9.onDrag,
          statefulDrag = _p9.statefulDrag;
      var dragging = this.state.dragging;


      if (!isControlled || statefulDrag && dragging) {
        (0, _raf2.default)(function () {
          _this6.setState({
            value: newValue
          });
        });
      }

      this.notify(newValue);
    }
  }, {
    key: 'renderStartHandle',
    value: function renderStartHandle() {
      var _p10 = this.p,
          visibleTooltip = _p10.visibleTooltip,
          tabIndex = _p10.tabIndex,
          startHandleFocused = _p10.startHandleFocused,
          currentValue = _p10.currentValue,
          focused = _p10.focused,
          mouseOver = _p10.mouseOver,
          renderHandle = _p10.renderHandle,
          rootClassName = _p10.rootClassName;


      return renderHandle(this.p, {
        key: 'startHandler',
        tabIndex: tabIndex,
        handleValue: currentValue[0],
        focused: startHandleFocused,
        offset: (0, _valueUtils.getPossitionOfValueBasedOnLimits)(currentValue[0], this.p) * 100,
        onMouseDown: this.handleMouseDownOnStartHandle,
        setHandleRef: this.setStartHandleRef,
        visibleTooltip: visibleTooltip
      }, rootClassName);
    }
  }, {
    key: 'renderEndHandle',
    value: function renderEndHandle() {
      var _p11 = this.p,
          visibleTooltip = _p11.visibleTooltip,
          tabIndex = _p11.tabIndex,
          endHandleFocused = _p11.endHandleFocused,
          currentValue = _p11.currentValue,
          focused = _p11.focused,
          mouseOver = _p11.mouseOver,
          renderHandle = _p11.renderHandle,
          rootClassName = _p11.rootClassName;


      return renderHandle(this.p, {
        key: 'endHandler',
        focused: endHandleFocused,
        tabIndex: tabIndex,
        handleValue: currentValue[1],
        offset: (0, _valueUtils.getPossitionOfValueBasedOnLimits)(currentValue[1], this.p) * 100,
        onMouseDown: this.handleMouseDownOnEndHandle,
        setHandleRef: this.setEndHandleRef,
        visibleTooltip: visibleTooltip
      }, rootClassName);
    }
  }, {
    key: 'render',
    value: function render() {
      var props = this.props,
          state = this.state;

      var _p12 = this.p = getProps(props, state),
          tabIndex = _p12.tabIndex,
          className = _p12.className,
          focused = _p12.focused,
          wrapStyle = _p12.wrapStyle,
          currentValue = _p12.currentValue,
          trackFillFocused = _p12.trackFillFocused,
          startHandleFocused = _p12.startHandleFocused,
          endHandleFocused = _p12.endHandleFocused,
          renderTrack = _p12.renderTrack,
          tickBarPosition = _p12.tickBarPosition,
          rootClassName = _p12.rootClassName;

      var startHandle = this.renderStartHandle();
      var endhandle = this.renderEndHandle();
      var handlerComponents = [startHandle, endhandle];

      var track = renderTrack(this.p, {
        handlerComponents: handlerComponents,
        handleTrackMouseDown: this.handleTrackMouseDown,
        setTrackLineRef: this.setTrackLineRef,
        setTrackFillRef: this.setTrackFillRef,
        focused: trackFillFocused,
        tabIndex: tabIndex
      }, rootClassName);

      var ticks = null;
      if (tickBarPosition !== 'none') {
        ticks = (0, _ticks.renderTicks)(this.p, {
          handleClickOnTick: this.handleClickOnTick
        }, rootClassName);
      }

      var sliderInput = [ticks, track];

      return _react2.default.createElement(
        'div',
        _extends({}, (0, _cleanProps2.default)(props, ReactRangeSlider.propTypes), {
          onFocus: this.handleFocus,
          onBlur: this.handleBlur,
          onKeyDown: this.handleKeyDown,
          onWheel: focused ? this.handleWheel : null,
          onMouseEnter: this.handleMouseEnter,
          onMouseLeave: this.handleMouseLeave,
          className: className,
          onClick: this.handleTrackClick
        }),
        _react2.default.createElement(
          'div',
          { className: rootClassName + '__wrap', style: wrapStyle },
          sliderInput
        )
      );
    }
  }]);

  return ReactRangeSlider;
}(_react.Component);

ReactRangeSlider.defaultProps = _extends({}, _SliderProps.defaultProps, {
  minRange: 1,
  maxRange: Infinity,
  rootClassName: 'zippy-react-toolkit-slider'
});

ReactRangeSlider.propTypes = _extends({}, _SliderProps.propTypes, {
  rootClassName: _propTypes2.default.string,
  value: _propTypes2.default.arrayOf(_propTypes2.default.number),
  defaultValue: _propTypes2.default.arrayOf(_propTypes2.default.number),
  minRange: _propTypes2.default.number,
  maxRange: _propTypes2.default.number
});

exports.default = ReactRangeSlider;
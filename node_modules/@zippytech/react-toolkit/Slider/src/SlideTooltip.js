'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; /**
                                                                                                                                                                                                                                                                   * Copyright (c) 2015-present, Zippy Technologies
                                                                                                                                                                                                                                                                   *
                                                                                                                                                                                                                                                                   * This source code is licensed under the MIT license found in the
                                                                                                                                                                                                                                                                   * LICENSE file in the root directory of this source tree.
                                                                                                                                                                                                                                                                   */

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _join = require('../../common/join');

var _join2 = _interopRequireDefault(_join);

var _raf = require('../../common/raf');

var _raf2 = _interopRequireDefault(_raf);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var getClassNames = function getClassNames(props, state) {
  var className = props.className,
      orientation = props.orientation,
      position = props.position,
      visible = props.visible,
      rootClassName = props.rootClassName;
  var animationClassName = state.animationClassName,
      actualVisibility = state.actualVisibility;


  return (0, _join2.default)(className, rootClassName, rootClassName + '--' + orientation + '-orientation', rootClassName + '--' + position + '-position', actualVisibility && rootClassName + '--is-visible', animationClassName);
};

var getProps = function getProps(props, state) {
  var horizontal = props.orientation === 'horizontal';
  var actualVisibility = state.actualVisibility;


  return _extends({}, props, state, {
    horizontal: horizontal,
    visible: actualVisibility,
    className: getClassNames(props, state)
  });
};

var getPositioningStlyes = function getPositioningStlyes(config, _ref) {
  var offsetWidth = _ref.offsetWidth,
      offsetHeight = _ref.offsetHeight;
  var horizontal = config.horizontal;

  var positioningStyles = {};
  if (horizontal) {
    positioningStyles.left = -offsetWidth / 2;
  } else {
    positioningStyles.top = -offsetHeight / 2;
  }

  return positioningStyles;
};

var SlideTooltip = function (_Component) {
  _inherits(SlideTooltip, _Component);

  function SlideTooltip(props) {
    _classCallCheck(this, SlideTooltip);

    var _this = _possibleConstructorReturn(this, (SlideTooltip.__proto__ || Object.getPrototypeOf(SlideTooltip)).call(this, props));

    _this.state = {
      positioningStyles: {},
      actualVisibility: props.visible
    };

    _this.onTransitionEnd = _this.onTransitionEnd.bind(_this);
    return _this;
  }

  _createClass(SlideTooltip, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      this.calculatePositionStyles();
    }
  }, {
    key: 'UNSAFE_componentWillReceiveProps',
    value: function UNSAFE_componentWillReceiveProps(nextProps) {
      var _this2 = this;

      if (nextProps.children !== this.p.children) {
        this.mustCalculatePositionStyles = true;
      }

      if (nextProps.visible !== this.p.visible) {
        var animationClassName = nextProps.rootClassName + '--' + (nextProps.visible ? 'animate-in' : 'animate-out');
        clearTimeout(this._animationSequenceStep);
        this._animationSequenceStep = setTimeout(function () {
          _this2.setState({
            animationClassName: animationClassName + '-start'
          }, function () {
            (0, _raf2.default)(function () {
              _this2.setState({
                animationClassName: animationClassName + ' ' + animationClassName + '-end',
                actualVisibility: nextProps.visible
              });
            });
          });
        }, 250);
      }
    }
  }, {
    key: 'onTransitionEnd',
    value: function onTransitionEnd() {
      if (this.p.animationClassName) {
        this.setState({
          animationClassName: null
        });
      }
    }
  }, {
    key: 'componentDidUpdate',
    value: function componentDidUpdate() {
      if (this.mustCalculatePositionStyles) {
        this.mustCalculatePositionStyles = false;
        this.calculatePositionStyles();
      }
    }
  }, {
    key: 'calculatePositionStyles',
    value: function calculatePositionStyles() {
      var _node = this.node,
          offsetHeight = _node.offsetHeight,
          offsetWidth = _node.offsetWidth;

      this.setState({
        positioningStyles: getPositioningStlyes(this.p, {
          offsetHeight: offsetHeight,
          offsetWidth: offsetWidth
        })
      });
    }
  }, {
    key: 'render',
    value: function render() {
      var _this3 = this;

      var _p = this.p = getProps(this.props, this.state),
          children = _p.children,
          style = _p.style,
          className = _p.className,
          positioningStyles = _p.positioningStyles;

      return _react2.default.createElement(
        'div',
        {
          onTransitionEnd: this.onTransitionEnd,
          style: _extends({}, style, positioningStyles),
          ref: function ref(el) {
            return el && (_this3.node = el);
          },
          className: className
        },
        children
      );
    }
  }]);

  return SlideTooltip;
}(_react.Component);

SlideTooltip.defaultProps = {
  orientation: 'horizontal',
  position: 'before',
  visible: false,
  rootClassName: 'zippy-react-toolkit-slider__tooltip'
};

SlideTooltip.propTypes = {
  orientation: _propTypes2.default.oneOf(['horizontal', 'vertical']),
  position: _propTypes2.default.oneOf(['before', 'after']),
  visible: _propTypes2.default.bool,
  rootClassName: _propTypes2.default.string
};

exports.default = SlideTooltip;
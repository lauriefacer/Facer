'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; /**
                                                                                                                                                                                                                                                                   * Copyright (c) 2015-present, Zippy Technologies
                                                                                                                                                                                                                                                                   *
                                                                                                                                                                                                                                                                   * This source code is licensed under the MIT license found in the
                                                                                                                                                                                                                                                                   * LICENSE file in the root directory of this source tree.
                                                                                                                                                                                                                                                                   */

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _reactDom = require('react-dom');

var _cleanProps = require('../../common/cleanProps');

var _cleanProps2 = _interopRequireDefault(_cleanProps);

var _autoBind = require('@zippytech/react-class/autoBind');

var _autoBind2 = _interopRequireDefault(_autoBind);

var _region = require('@zippytech/region');

var _region2 = _interopRequireDefault(_region);

var _shouldComponentUpdate2 = require('../../common/shouldComponentUpdate');

var _shouldComponentUpdate3 = _interopRequireDefault(_shouldComponentUpdate2);

var _hasTouch = require('@zippytech/has-touch');

var _hasTouch2 = _interopRequireDefault(_hasTouch);

var _handlers = require('./utils/sub-components/handlers');

var _valueUtils = require('./utils/value-utils');

var _controlButtons = require('./utils/sub-components/control-buttons');

var _ticks = require('./utils/sub-components/ticks');

var _dragInteractionHandler = require('./utils/drag-interaction-handler');

var _dragInteractionHandler2 = _interopRequireDefault(_dragInteractionHandler);

var _keyboardInteractionHelper = require('./utils/keyboard-interaction-helper');

var _keyboardInteractionHelper2 = _interopRequireDefault(_keyboardInteractionHelper);

var _SliderProps = require('./SliderProps');

var _getClassNames = require('./utils/get-class-names');

var _getClassNames2 = _interopRequireDefault(_getClassNames);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var getCurrentValue = function getCurrentValue(props, state) {
  var value = props.value,
      statefulDrag = props.statefulDrag;
  var stateValue = state.value,
      dragging = state.dragging;


  var currentValue = null;

  if (statefulDrag && dragging) {
    if (typeof stateValue !== 'undefined') {
      currentValue = stateValue;
    } else {
      currentValue = value;
    }
  }

  if (currentValue === null) {
    currentValue = (0, _valueUtils.toValue)(typeof value !== 'undefined' ? value : stateValue, props);
  }

  return currentValue;
};

var getProps = function getProps(props, state) {
  var orientation = props.orientation,
      rtl = props.rtl,
      startValue = props.startValue,
      endValue = props.endValue,
      shouldShowTooltip = props.shouldShowTooltip,
      onDrag = props.onDrag;


  var horizontal = orientation === 'horizontal';

  var parsedStartValue = startValue;
  var parsedEndValue = endValue;

  if (rtl && horizontal) {
    parsedStartValue = endValue;
    parsedEndValue = startValue;
  }

  var isReversed = parsedStartValue > parsedEndValue;

  var newPropsBasedOnRtl = _extends({}, props, {
    startValue: parsedStartValue,
    endValue: parsedEndValue
  });

  var currentValue = getCurrentValue(newPropsBasedOnRtl, state);

  var handleStyle = (0, _handlers.getHandleStyle)(props.handleSize, newPropsBasedOnRtl, state);
  var isControlled = newPropsBasedOnRtl.value;

  var className = (0, _getClassNames2.default)(newPropsBasedOnRtl, state, props.rootClassName);

  var dragging = state.dragging,
      focused = state.focused,
      mouseOver = state.mouseOver;


  var visibleTooltip = shouldShowTooltip(props, state);

  return _extends({}, newPropsBasedOnRtl, {
    style: _extends({}, newPropsBasedOnRtl.style),
    handleStyle: handleStyle,
    currentValue: currentValue,
    className: className,
    onDrag: onDrag,
    horizontal: horizontal,

    mouseOver: mouseOver,

    isControlled: isControlled,
    isReversed: isReversed,

    dragging: dragging,
    focused: focused,
    visibleTooltip: visibleTooltip
  });
};

var getInitialValue = function getInitialValue(props) {
  var defaultValue = props.defaultValue,
      value = props.value,
      startValue = props.startValue;


  if (typeof value !== 'undefined') {
    return null;
  }

  if (typeof defaultValue !== 'undefined') {
    return defaultValue;
  }

  if (typeof startValue !== 'undefined') {
    return startValue;
  }

  throw new Error('Improper initialisation. Provide either a value, default value or start value');
};

var ZippySlider = function (_Component) {
  _inherits(ZippySlider, _Component);

  function ZippySlider(props) {
    _classCallCheck(this, ZippySlider);

    var _this = _possibleConstructorReturn(this, (ZippySlider.__proto__ || Object.getPrototypeOf(ZippySlider)).call(this, props));

    (0, _autoBind2.default)(_this);

    _this.state = {
      value: getInitialValue(props)
    };
    return _this;
  }

  _createClass(ZippySlider, [{
    key: 'shouldComponentUpdate',
    value: function shouldComponentUpdate(nextProps, nextState) {
      return (0, _shouldComponentUpdate3.default)(this, nextProps, nextState);
    }
  }, {
    key: 'setHandleRef',
    value: function setHandleRef(el) {
      this._handle = el;
    }
  }, {
    key: 'setTrackLineRef',
    value: function setTrackLineRef(el) {
      this._trackLine = el;
    }
  }, {
    key: 'handleMouseEnter',
    value: function handleMouseEnter() {
      this.setState({
        mouseOver: true
      });
    }
  }, {
    key: 'handleMouseLeave',
    value: function handleMouseLeave() {
      this.setState({
        mouseOver: false
      });
    }
  }, {
    key: 'handleTrackMouseDown',
    value: function handleTrackMouseDown(event) {
      var _p = this.p,
          enableTrackClick = _p.enableTrackClick,
          isReversed = _p.isReversed,
          updateValueOnTrackDrag = _p.updateValueOnTrackDrag;


      if (!enableTrackClick) {
        return;
      }

      var _p2 = this.p,
          horiz = _p2.horizontal,
          handleStyle = _p2.handleStyle;


      var region = _region2.default.from(this.getTrackDOMNode());
      var dragSize = this.getAvailableDragSize();
      var handleSize = handleStyle[horiz ? 'width' : 'height'];
      var offset = horiz ? event.clientX - region.left : event.clientY - region.top;
      var percentage = offset * 100 / dragSize;
      var newValue = (0, _valueUtils.getValueForPercentage)(percentage, this.p);

      /**
       * In case of `updateValueOnTrackDrag` when draggin the track
       * it should change the value.
       *
       * For this handleMouseDown is simulated and an initial value
       * calculated by the position of the mouseDown on the track is sent.
       */
      if (updateValueOnTrackDrag) {
        this.handleMouseDown(event, newValue);
      }

      this.setValue(newValue);
    }
  }, {
    key: 'handleMouseDown',
    value: function handleMouseDown(event, currentValue) {
      var _this2 = this;

      var _p3 = this.p,
          isControlled = _p3.isControlled,
          onChange = _p3.onChange,
          handleSize = _p3.handleSize,
          statefulDrag = _p3.statefulDrag,
          onDrag = _p3.onDrag,
          isReversed = _p3.isReversed,
          onDragStart = _p3.onDragStart,
          onDragEnd = _p3.onDragEnd;

      var handleNode = this.getHandle();

      var targetRegion = _region2.default.from(handleNode);
      var constrainRegion = _region2.default.from((0, _reactDom.findDOMNode)(this));

      var halfHandleSize = handleSize / 2;
      constrainRegion.left -= halfHandleSize;
      constrainRegion.right += halfHandleSize;
      constrainRegion.top += halfHandleSize;
      constrainRegion.bottom += halfHandleSize;

      /**
       * a different initial value can be send as param,
       * for example in case of `updateValueOnTrackDrag`
       */
      currentValue = typeof currentValue === 'number' ? currentValue : this.p.currentValue;

      (0, _dragInteractionHandler2.default)(event, this.p, {
        currentValue: currentValue,
        targetRegion: targetRegion,
        constrainRegion: constrainRegion,
        dragSize: this.getAvailableDragSize(),

        onHandleDragStart: function onHandleDragStart() {
          var stateProps = { dragging: true };
          if (!isControlled || statefulDrag) {
            stateProps.value = currentValue;
          }
          _this2.setState(stateProps);
          if (onDragStart) {
            onDragStart(stateProps.value);
          }
        },

        onHandleDrag: function onHandleDrag(newValue, diffValue) {
          newValue = currentValue + diffValue;
          _this2.setValue(newValue);
          onDrag && onDrag(newValue);
        },

        onHandleDragEnd: function onHandleDragEnd() {
          var currentValue = _this2.p.currentValue;

          _this2.setState({
            dragging: false
          });
          _this2.notify(currentValue);
          if (onDragEnd) {
            onDragEnd(currentValue);
          }
        }
      });
    }
  }, {
    key: 'handleFocus',
    value: function handleFocus(event) {
      this.setState({
        focused: true
      });
    }
  }, {
    key: 'handleClickOnTick',
    value: function handleClickOnTick(event) {
      var currentTarget = event.target;

      while (typeof currentTarget.dataset.value === 'undefined') {
        currentTarget = currentTarget.parentNode;
      }

      if (currentTarget) {
        this.setValue(new Number(currentTarget.dataset.value));
      }
    }
  }, {
    key: 'handleBlur',
    value: function handleBlur(event) {
      this.setState({
        focused: false
      });
    }
  }, {
    key: 'handleKeyDown',
    value: function handleKeyDown(event) {
      var _p4 = this.p,
          orientation = _p4.orientation,
          step = _p4.step,
          startValue = _p4.startValue,
          endValue = _p4.endValue,
          currentValue = _p4.currentValue,
          onChange = _p4.onChange,
          isControlled = _p4.isControlled,
          isReversed = _p4.isReversed;


      var delta = (0, _keyboardInteractionHelper2.default)(event, this.p);

      if (delta !== null) {
        if (isReversed) {
          delta = -delta;
        }
        var nextValue = (0, _valueUtils.toValue)(currentValue + delta, this.p);

        this.setValue(nextValue);
        event.stopPropagation();
        event.preventDefault();
      }
    }
  }, {
    key: 'handleWheel',
    value: function handleWheel(event) {
      var deltaMode = event.deltaMode,
          deltaX = event.deltaX,
          deltaY = event.deltaY,
          shiftKey = event.shiftKey;
      var _p5 = this.p,
          getValueModifier = _p5.getValueModifier,
          orientation = _p5.orientation,
          isReversed = _p5.isReversed,
          currentValue = _p5.currentValue;


      var nextValue = currentValue + getValueModifier({ shiftKey: shiftKey }, this.p) * (deltaY > 0 ? -1 : 1) * (isReversed ? -1 : 1);

      event.preventDefault();
      event.stopPropagation();

      this.setValue(nextValue);
    }
  }, {
    key: 'getHandle',
    value: function getHandle() {
      return this._handle;
    }
  }, {
    key: 'getTrackDOMNode',
    value: function getTrackDOMNode() {
      return this._trackLine;
    }
  }, {
    key: 'getAvailableDragSize',
    value: function getAvailableDragSize(props) {
      var horizontal = this.p.horizontal;

      var region = _region2.default.from(this.getTrackDOMNode());

      return horizontal ? region.width : region.height;
    }
  }, {
    key: 'getRegion',
    value: function getRegion() {
      return _region2.default.from((0, _reactDom.findDOMNode)(this));
    }
  }, {
    key: 'notify',
    value: function notify(value) {
      var onChange = this.p.onChange;

      onChange && onChange(value);
    }
  }, {
    key: 'setValue',
    value: function setValue(value) {
      var newValue = (0, _valueUtils.toValue)(value, this.p);
      var _p6 = this.p,
          isControlled = _p6.isControlled,
          onDrag = _p6.onDrag,
          statefulDrag = _p6.statefulDrag;
      var dragging = this.state.dragging;


      if (!isControlled || statefulDrag && dragging) {
        this.setState({
          value: newValue
        });
      }

      this.notify(newValue);
    }

    // button interaction
    // ======================================================================

  }, {
    key: 'shiftValue',
    value: function shiftValue() {
      var currentValue = this.p.currentValue;

      this.setValue(currentValue + this.shiftConfiguration.deltaValue);
    }
  }, {
    key: 'stopShifting',
    value: function stopShifting() {
      clearInterval(this.shiftIntervalId);
      this.shiftIntervalId = this.shiftConfiguration = null;
    }
  }, {
    key: 'startShifting',
    value: function startShifting(_ref) {
      var deltaValue = _ref.deltaValue;

      if (this.shiftIntervalId) {
        clearInterval(this.shiftIntervalId);
      }

      this.shiftConfiguration = { deltaValue: deltaValue };
      this.shiftIntervalId = setInterval(this.shiftValue, this.p.shiftDelay);
    }
  }, {
    key: 'handleButtonDown',
    value: function handleButtonDown(stepDirection, event) {
      var _this3 = this;

      event.preventDefault();
      event.stopPropagation();

      var _p7 = this.p,
          step = _p7.step,
          largeStep = _p7.largeStep;


      var target = _hasTouch2.default ? event.target : window;
      var eventName = _hasTouch2.default ? 'touchend' : 'click';

      window.addEventListener(eventName, this.handleMouseUp);
      var getValueModifier = this.p.getValueModifier;

      var valueModifier = getValueModifier(event, this.p);

      setTimeout(function () {
        _this3.startShifting({ deltaValue: stepDirection * valueModifier });
      }, 10);
    }
  }, {
    key: 'handleMouseUp',
    value: function handleMouseUp() {
      this.stopShifting();

      this.setState({
        spinDirection: null
      });

      window.removeEventListener('click', this.handleMouseUp);
    }
  }, {
    key: 'handleButtonIncrement',
    value: function handleButtonIncrement(event) {
      this.handleButtonDown(1, event);
    }
  }, {
    key: 'handleButtonDecrement',
    value: function handleButtonDecrement(event) {
      this.handleButtonDown(-1, event);
    }
  }, {
    key: 'render',
    value: function render() {
      var props = this.props,
          state = this.state;

      var _p8 = this.p = getProps(props, state),
          tabIndex = _p8.tabIndex,
          className = _p8.className,
          focused = _p8.focused,
          wrapStyle = _p8.wrapStyle,
          showButtons = _p8.showButtons,
          renderTrack = _p8.renderTrack,
          tickBarPosition = _p8.tickBarPosition,
          currentValue = _p8.currentValue,
          mouseOver = _p8.mouseOver,
          renderHandle = _p8.renderHandle,
          visibleTooltip = _p8.visibleTooltip;

      var track = renderTrack(this.p, {
        handlerComponents: renderHandle(this.p, {
          focused: this.state.focused,
          handleValue: currentValue,
          onMouseEnter: this.handleMouseEnter,
          onMouseDown: this.handleMouseDown,
          onMouseLeave: this.handleMouseLeave,
          setHandleRef: this.setHandleRef,
          visibleTooltip: visibleTooltip
        }, props.rootClassName),
        setTrackLineRef: this.setTrackLineRef
      }, props.rootClassName);

      var ticks = null;
      if (tickBarPosition !== 'none') {
        ticks = (0, _ticks.renderTicks)(this.p, {
          handleClickOnTick: this.handleClickOnTick
        }, props.rootClassName);
      }

      var sliderInput = [ticks, track];

      if (showButtons) {
        sliderInput = (0, _controlButtons.renderControlButtonsWrapper)(sliderInput, this.p, this.handleButtonIncrement, this.handleButtonDecrement, props.rootClassName);
      }

      return _react2.default.createElement(
        'div',
        _extends({}, (0, _cleanProps2.default)(props, ZippySlider.propTypes), {
          tabIndex: tabIndex,
          onFocus: this.handleFocus,
          onBlur: this.handleBlur,
          onKeyDown: this.handleKeyDown,
          onWheel: focused ? this.handleWheel : null,
          className: className,
          onMouseDown: this.handleTrackMouseDown
        }),
        _react2.default.createElement(
          'div',
          { className: props.rootClassName + '__wrap', style: wrapStyle },
          sliderInput
        )
      );
    }
  }]);

  return ZippySlider;
}(_react.Component);

ZippySlider.defaultProps = _SliderProps.defaultProps;
ZippySlider.propTypes = _SliderProps.propTypes;

exports.default = ZippySlider;
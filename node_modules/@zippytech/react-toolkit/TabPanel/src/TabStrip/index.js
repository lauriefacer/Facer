'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _TabStrip$propTypes;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _reactDom = require('react-dom');

var _reactClass = require('@zippytech/react-class');

var _reactClass2 = _interopRequireDefault(_reactClass);

var _Flex = require('../../../Flex');

var _tabPositions = require('../tabPositions');

var _tabPositions2 = _interopRequireDefault(_tabPositions);

var _assign = require('../../../common/assign');

var _assign2 = _interopRequireDefault(_assign);

var _isMobile = require('../../../common/isMobile');

var _isMobile2 = _interopRequireDefault(_isMobile);

var _join = require('../../../common/join');

var _join2 = _interopRequireDefault(_join);

var _cleanProps = require('../../../common/cleanProps');

var _cleanProps2 = _interopRequireDefault(_cleanProps);

var _TabTitle = require('../TabTitle');

var _TabTitle2 = _interopRequireDefault(_TabTitle);

var _ArrowScroller = require('../../../ArrowScroller');

var _ArrowScroller2 = _interopRequireDefault(_ArrowScroller);

var _index = require('../index');

var _index2 = _interopRequireDefault(_index);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Copyright (c) 2015-present, Zippy Technologies
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * This source code is licensed under the MIT license found in the
file in the root directory of this source tree.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */

var NEW_TAB = _react2.default.createElement(
  'svg',
  {
    height: '20',
    viewBox: '0 0 24 24',
    width: '20',
    xmlns: 'http://www.w3.org/2000/svg'
  },
  _react2.default.createElement('path', { d: 'M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z' }),
  _react2.default.createElement('path', { d: 'M0 0h24v24H0z', fill: 'none' })
);

var TabStrip = function (_Component) {
  _inherits(TabStrip, _Component);

  function TabStrip(props) {
    _classCallCheck(this, TabStrip);

    var _this = _possibleConstructorReturn(this, (TabStrip.__proto__ || Object.getPrototypeOf(TabStrip)).call(this, props));

    _this.tabNodes = [];
    _this.state = {
      focused: false,
      activeIndex: props.defaultActiveIndex || 0,
      focusedIndex: (props.defaultFocusedIndex !== undefined ? props.defaultFocusedIndex : props.defaultActiveIndex) || 0
    };
    return _this;
  }

  _createClass(TabStrip, [{
    key: 'componentDidUpdate',
    value: function componentDidUpdate(prevProps, prevState) {
      var _this2 = this;

      var oldIndex = this.prepareActiveIndex(prevProps, prevState);

      var scrollToTab = function scrollToTab(index, getIndex) {
        _this2.scrollToTab(index);

        setTimeout(function () {
          if (index === getIndex()) {
            _this2.scrollToTab(index);
          }
        }, 100);
      };

      if (oldIndex != this.p.activeIndex) {
        var index = this.p.activeIndex;
        scrollToTab(this.p.activeIndex, function () {
          return _this2.p.activeIndex;
        });
        return;
      }

      if (!this.props.activateOnFocus) {
        var oldFocusedIndex = this.prepareFocusedIndex(prevProps, prevState);

        if (oldFocusedIndex != this.p.focusedIndex) {
          scrollToTab(this.p.focusedIndex, function () {
            return _this2.p.focusedIndex;
          });
        }
      }
    }
  }, {
    key: 'scrollToTab',
    value: function scrollToTab(index) {
      var domNode = this.tabNodes[index];

      domNode && this.scroller && this.scroller.scrollIntoView(domNode);
    }
  }, {
    key: 'prepareClassName',
    value: function prepareClassName(props) {
      var rootClassName = props.rootClassName;

      return (0, _join2.default)(props.className, rootClassName, rootClassName + '--theme-' + props.theme, rootClassName + '--tab-align-' + props.tabAlign, rootClassName + '--tab-position-' + props.tabPosition, rootClassName + '--orientation-' + (props.vertical ? 'vertical' : 'horizontal'), _isMobile2.default && rootClassName + '--mobile', props.focused && rootClassName + '--focused', props.vertical && rootClassName + '--vertical', props.firstActive && rootClassName + '--first-active', props.lastActive && rootClassName + '--last-active');
    }
  }, {
    key: 'prepareActiveIndex',
    value: function prepareActiveIndex(props, state) {
      return props.activeIndex == null ? (state || this.state).activeIndex : props.activeIndex;
    }
  }, {
    key: 'prepareFocusedIndex',
    value: function prepareFocusedIndex(props, state) {
      return props.focusedIndex == null ? (state || this.state).focusedIndex : props.focusedIndex;
    }
  }, {
    key: 'prepareProps',
    value: function prepareProps(thisProps) {
      var props = (0, _assign2.default)({}, thisProps);

      var activeIndex = this.prepareActiveIndex(props);
      var focusedIndex = this.prepareFocusedIndex(props);

      props.activeIndex = activeIndex;
      props.focusedIndex = focusedIndex;
      props.tabs = props.defaultTabs || props.tabs;

      if (props.onAddNew) {
        props.tabs = [].concat(_toConsumableArray(props.tabs), [{
          title: NEW_TAB,
          selectable: false,
          closeable: false,
          onMouseDown: function onMouseDown() {
            props.onAddNew();
          }
        }]);
      }
      props.tabIndex = typeof props.tabIndex === 'boolean' ? props.tabIndex ? 0 : -1 : props.tabIndex;

      this.tabNodes.length = props.tabs.length;

      props.firstActive = activeIndex === 0;
      props.lastActive = activeIndex === props.tabs.length - 1;
      props.allTabsProps = [];

      props.onFocus = this.onFocus;
      props.onBlur = this.onBlur;
      props.onKeyDown = this.onKeyDown;
      props.focused = this.state.focused;

      return props;
    }
  }, {
    key: 'render',
    value: function render() {
      var _this3 = this;

      var props = this.p = this.prepareProps(this.props);
      var rootClassName = props.rootClassName;

      var className = this.prepareClassName(props);
      var beforeClassName = (0, _join2.default)(rootClassName + '__before', props.firstActive && rootClassName + '__before-active');

      var afterClassName = (0, _join2.default)(rootClassName + '__after', props.lastActive && rootClassName + '__after-active');

      var tabPosition = props.tabPosition;


      var row = tabPosition == 'top' || tabPosition == 'bottom';

      var renderProps = _extends({}, (0, _cleanProps2.default)(props, TabStrip.propTypes), {
        key: 'tab_strip',
        alignItems: 'stretch',
        row: row,
        column: !row,
        wrap: false,
        className: className,
        style: props.style
      });

      var childProps = {
        key: 'inner',
        className: rootClassName + '__inner',
        alignItems: 'stretch',
        row: row,
        column: !row,
        wrap: false,
        children: [_react2.default.createElement(_Flex.Item, { className: beforeClassName }), props.tabs.map(this.renderTab), _react2.default.createElement(_Flex.Item, { className: afterClassName })]
      };

      if (props.scroller === false) {
        return _react2.default.createElement(
          _Flex.Flex,
          renderProps,
          _react2.default.createElement(_Flex.Flex, childProps)
        );
      }

      var verticalScroller = tabPosition == 'left' || tabPosition == 'right';

      return _react2.default.createElement(
        _Flex.Flex,
        renderProps,
        _react2.default.createElement(_ArrowScroller2.default, {
          key: 'scroller',
          useTransformOnScroll: true,
          vertical: verticalScroller,
          column: verticalScroller,
          ref: function ref(c) {
            return _this3.scroller = _this3.scroller || c;
          },
          childProps: childProps,
          children: childProps.children
        })
      );
    }
  }, {
    key: 'onResize',
    value: function onResize() {}
  }, {
    key: 'onFocus',
    value: function onFocus(event) {
      this.setState({
        focused: true
      });

      this.props.onFocus(event, (0, _reactDom.findDOMNode)(this));
    }
  }, {
    key: 'onBlur',
    value: function onBlur(event) {
      this.setState({
        focused: false
      });

      this.props.onBlur(event);
    }
  }, {
    key: 'onKeyDown',
    value: function onKeyDown(event) {
      if (typeof this.props.onKeyDown == 'function') {
        this.props.onKeyDown(event);
      }

      if (this.props.enableKeyboardNavigation === false) {
        return;
      }

      var key = event.key;

      var dir = 0;

      if (key == 'ArrowLeft' || key == 'ArrowUp') {
        dir = -1;
      } else if (key == 'ArrowRight' || key == 'ArrowDown') {
        dir = 1;
      }

      if (this.props.activateOnFocus) {
        if (dir) {
          this.onNavigate(dir);
          event.preventDefault();
        }

        if (key === 'Home') {
          this.onNavigateFirst();
          event.preventDefault();
        }

        if (key == 'End') {
          this.onNavigateLast();
          event.preventDefault();
        }

        return;
      }

      var focusedIndex = this.p.focusedIndex;

      if (key == 'Enter') {
        event.preventDefault();
        this.onActivate(focusedIndex);

        return;
      }
      if (dir) {
        event.preventDefault();
        this.onFocusedNavigate(dir);

        return;
      }

      if (key == 'Home' || key == 'End') {
        var firstIndex = this.getFirstAvailableIndex();
        var lastIndex = this.getLastAvailableIndex();

        event.preventDefault();

        var index = key == 'Home' ? firstIndex : lastIndex;
        this.setFocusedTab(index);
      }
    }
  }, {
    key: 'renderTab',
    value: function renderTab(tab, index, array) {
      var _this4 = this;

      var props = this.p;
      var activeIndex = props.activeIndex,
          focusedIndex = props.focusedIndex,
          activateEvent = props.activateEvent,
          inTabPanel = props.inTabPanel,
          tabStyle = props.tabStyle,
          tabDisabledStyle = props.tabDisabledStyle,
          tabActiveStyle = props.tabActiveStyle,
          tabClassName = props.tabClassName,
          tabActiveClassName = props.tabActiveClassName,
          tabFocusedClassName = props.tabFocusedClassName,
          tabDisabledClassName = props.tabDisabledClassName,
          tabEllipsis = props.tabEllipsis,
          vertical = props.vertical,
          tabAlign = props.tabAlign,
          closeable = props.closeable,
          closeableOnOver = props.closeableOnOver,
          topRootClassName = props.topRootClassName,
          rootClassName = props.rootClassName;


      if (typeof tab == 'string') {
        tab = {
          title: tab
        };
      }

      var first = index === 0;
      var last = props.tabs.length - 1 === index;

      var beforeActive = activeIndex - 1 === index;
      var afterActive = activeIndex + 1 === index;
      var active = index === activeIndex;
      var focused = index === focusedIndex && this.state.focused && !this.props.activateOnFocus;

      var tabProps = (0, _assign2.default)({ closeable: closeable, closeableOnOver: closeableOnOver }, tab, {
        ref: function ref(b) {
          return _this4.tabNodes[index] = (0, _reactDom.findDOMNode)(b);
        },
        index: index,
        activateEvent: activateEvent,
        activeIndex: activeIndex,
        active: active,
        first: first,
        last: last,
        beforeActive: beforeActive,
        afterActive: afterActive,
        tabAlign: tabAlign,
        rootClassName: topRootClassName + '__tab-title',

        focused: focused,

        tabTitle: tab.title,
        children: tab.title,

        vertical: vertical,
        tabStyle: tabStyle,
        tabDisabledStyle: tabDisabledStyle,
        tabActiveStyle: tabActiveStyle,
        tabClassName: tabClassName,
        tabActiveClassName: tabActiveClassName,
        tabFocusedClassName: tabFocusedClassName,
        tabDisabledClassName: tabDisabledClassName,
        tabEllipsis: tabEllipsis,

        key: index
      });

      tabProps.onActivate = this.onActivate.bind(this, index);
      tabProps.onClose = this.onClose.bind(this, index, tab);
      tabProps.onKeyDown = this.onKeyDown.bind(this);

      delete tabProps.title;

      props.allTabsProps.push(tabProps);

      var tabTitle = void 0;

      if (props.tabFactory) {
        tabTitle = props.tabFactory(tabProps);
      }

      if (tabTitle === undefined) {
        tabTitle = _react2.default.createElement(_TabTitle2.default, tabProps);
      }

      var betweenClassName = (0, _join2.default)(rootClassName + '__between', beforeActive && rootClassName + '__between--before-active', active && rootClassName + '__between--after-active');

      return [tabTitle, !last && _react2.default.createElement(_Flex.Item, { className: betweenClassName })];
    }
  }, {
    key: 'onNavigate',
    value: function onNavigate(dir) {
      var index = this.p.activeIndex;
      this.onActivate(this.getAvailableIndexFrom(index, dir, this.props.rotateNavigation));
    }
  }, {
    key: 'onFocusedNavigate',
    value: function onFocusedNavigate(dir) {
      var index = this.p.focusedIndex;
      this.setFocusedTab(this.getAvailableIndexFrom(index, dir, this.props.rotateNavigation));
    }
  }, {
    key: 'onNavigateFirst',
    value: function onNavigateFirst() {
      this.onActivate(this.getFirstAvailableIndex());
    }
  }, {
    key: 'onNavigateLast',
    value: function onNavigateLast() {
      this.onActivate(this.getLastAvailableIndex());
    }
  }, {
    key: 'onClose',
    value: function onClose(index, tabProps) {
      this.props.onCloseTab(index);

      if (tabProps.onClose) {
        tabProps.onClose();
      }
    }
  }, {
    key: 'onActivate',
    value: function onActivate(activeIndex) {
      if (!this.p.allTabsProps[activeIndex]) {
        return;
      }

      var tabProps = this.p.tabs[activeIndex];

      if (!this.isSelectableTab(tabProps)) {
        return;
      }

      if (tabProps && tabProps.onActivate) {
        if (tabProps.onActivate() === false) {
          return;
        }
      }

      if (this.props.activeIndex == null) {
        this.setState({
          activeIndex: activeIndex
        });
      }

      if (activeIndex != this.p.activeIndex) {
        this.props.onActivate(activeIndex);
      }

      this.setFocusedTab(activeIndex);
    }
  }, {
    key: 'setFocusedTab',
    value: function setFocusedTab(focusedIndex) {
      var _this5 = this;

      if (this.props.activateOnFocus) {
        return;
      }
      if (focusedIndex === this.p.focusedIndex) {
        return;
      }

      if (!this.p.allTabsProps[focusedIndex]) {
        return;
      }

      var onFocusedIndexChange = this.props.onFocusedIndexChange;


      var tabProps = this.p.tabs[focusedIndex];

      if (!this.isSelectableTab(tabProps)) {
        return;
      }

      if (tabProps && tabProps.onFocusedIndexChange) {
        if (tabProps.onFocusedIndexChange() === false) {
          return;
        }
      }

      if (this.props.focusedIndex == null) {
        this.setState({
          focusedIndex: focusedIndex
        }, function () {
          _this5.scrollToTab(focusedIndex);
        });
      }

      if (onFocusedIndexChange) {
        onFocusedIndexChange(focusedIndex);
      }
    }
  }, {
    key: 'getAvailableIndexFrom',
    value: function getAvailableIndexFrom(index, dir, rotate) {
      var tabs = this.p.allTabsProps || [];
      var len = tabs.length;

      var firstIndex = void 0;
      var lastIndex = void 0;

      if (rotate) {
        firstIndex = this.getFirstAvailableIndex();
        lastIndex = this.getLastAvailableIndex();
      }

      var currentTab = void 0;

      var adjustIndex = function adjustIndex(index) {
        if (rotate) {
          if (index < firstIndex) {
            index = lastIndex;
          } else if (index > lastIndex) {
            index = firstIndex;
          }
        }

        return index;
      };

      var currentIndex = adjustIndex(index + dir);

      while (currentTab = tabs[currentIndex]) {
        if (this.isSelectableTab(currentTab)) {
          return currentIndex;
        }

        currentIndex = adjustIndex(currentIndex + dir);
      }

      return -1;
    }
  }, {
    key: 'isSelectableTab',
    value: function isSelectableTab(tabOrIndex) {
      var tab = tabOrIndex;
      if (typeof tabOrIndex == 'number') {
        tab = this.p.allTabsProps[tabOrIndex];
      }
      return !tab.disabled && tab.selectable !== false;
    }
  }, {
    key: 'getFirstAvailableIndex',
    value: function getFirstAvailableIndex() {
      return this.getAvailableIndexFrom(-1, 1);
    }
  }, {
    key: 'getLastAvailableIndex',
    value: function getLastAvailableIndex() {
      return this.getAvailableIndexFrom(this.getTabCount(), -1);
    }
  }, {
    key: 'getTabCount',
    value: function getTabCount() {
      var tabs = this.p.allTabsProps || [];

      return tabs.length;
    }
  }]);

  return TabStrip;
}(_reactClass2.default);

exports.default = TabStrip;


TabStrip.propTypes = (_TabStrip$propTypes = {
  activateOnFocus: _propTypes2.default.bool,
  focusedIndex: _propTypes2.default.number,
  defaultActiveIndex: _propTypes2.default.number,
  defaultFocusedIndex: _propTypes2.default.number,
  theme: _propTypes2.default.string,
  tabStyle: _propTypes2.default.oneOfType([_propTypes2.default.func, _propTypes2.default.object]),
  onFocusedIndexChange: _propTypes2.default.func,
  tabFactory: _propTypes2.default.func,
  allTabsProps: _propTypes2.default.any,
  focused: _propTypes2.default.bool,
  closeableOnOver: _propTypes2.default.bool,
  closeable: _propTypes2.default.bool,
  firstActive: _propTypes2.default.bool,
  lastActive: _propTypes2.default.bool,
  onCloseTab: _propTypes2.default.func,
  scrollOnClick: _propTypes2.default.bool,
  topRootClassName: _propTypes2.default.string,
  enableKeyboardNavigation: _propTypes2.default.bool,
  defaultTabs: _propTypes2.default.any,
  tabs: _propTypes2.default.any,
  activateEvent: _propTypes2.default.string,
  onActivate: _propTypes2.default.func,
  activeIndex: _propTypes2.default.number,
  isTabStrip: _propTypes2.default.bool,
  inTabPanel: _propTypes2.default.bool,
  tabDisabledStyle: _propTypes2.default.shape({}),
  tabActiveStyle: _propTypes2.default.shape({}),
  tabClassName: _propTypes2.default.oneOfType([_propTypes2.default.func, _propTypes2.default.string]),
  tabActiveClassName: _propTypes2.default.string,
  tabFocusedClassName: _propTypes2.default.string,
  tabDisabledClassName: _propTypes2.default.string,
  rotateNavigation: _propTypes2.default.bool,
  scroller: _propTypes2.default.oneOf([true, false, 'auto']),
  tabIndex: _propTypes2.default.oneOfType([_propTypes2.default.bool, _propTypes2.default.number]),
  tabEllipsis: _propTypes2.default.bool,
  tabPosition: _propTypes2.default.oneOf(['top', 'bottom', 'left', 'right']),
  vertical: function vertical(props, propName) {
    var value = props[propName];
    if (value && props.tabPosition != 'left' && props.tabPosition != 'right') {
      return new Error('You can only have "vertical" tabs if "tabPosition" is one of "left", "right".');
    }
  },
  tabAlign: _propTypes2.default.oneOf(['start', 'center', 'end', 'space-around', 'space-between', 'stretch'])
}, _defineProperty(_TabStrip$propTypes, 'tabPosition', _propTypes2.default.oneOf(Object.keys(_tabPositions2.default))), _defineProperty(_TabStrip$propTypes, 'rootClassName', _propTypes2.default.string), _TabStrip$propTypes);

var emptyFn = function emptyFn() {};

TabStrip.defaultProps = {
  rootClassName: 'zippy-react-toolkit-tab-panel__tab-strip',
  topRootClassName: 'zippy-react-toolkit-tab-panel',
  scroller: 'auto',
  scrollOnClick: false,
  rotateNavigation: true,
  tabIndex: true,
  tabAlign: 'start',
  tabPosition: 'top',
  theme: 'default',
  onActivate: emptyFn,
  onCloseTab: emptyFn,
  onBlur: emptyFn,
  onFocus: emptyFn,
  onFocusedIndexChange: emptyFn,
  isTabStrip: true
};
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TabBody = exports.TabStrip = exports.Tab = undefined;

var _ZippyTabPanel$propTy;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _reactDom = require('react-dom');

var _reactClass = require('@zippytech/react-class');

var _reactClass2 = _interopRequireDefault(_reactClass);

var _assign = require('../../common/assign');

var _assign2 = _interopRequireDefault(_assign);

var _Flex = require('../../Flex');

var _join = require('../../common/join');

var _join2 = _interopRequireDefault(_join);

var _getTransitionEnd = require('./getTransitionEnd');

var _getTransitionEnd2 = _interopRequireDefault(_getTransitionEnd);

var _TabStrip = require('./TabStrip');

var _TabStrip2 = _interopRequireDefault(_TabStrip);

var _Body = require('./Body');

var _Body2 = _interopRequireDefault(_Body);

var _assignDefined = require('./assignDefined');

var _assignDefined2 = _interopRequireDefault(_assignDefined);

var _cleanProps = require('../../common/cleanProps');

var _cleanProps2 = _interopRequireDefault(_cleanProps);

var _tabPositions = require('./tabPositions');

var _tabPositions2 = _interopRequireDefault(_tabPositions);

var _bemFactory = require('./bemFactory');

var _bemFactory2 = _interopRequireDefault(_bemFactory);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Copyright (c) 2015-present, Zippy Technologies
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * This source code is licensed under the MIT license found in the
file in the root directory of this source tree.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */

var clone = function clone(child, fn) {
  var childProps = child.props;
  child = (0, _react.cloneElement)(child, (0, _assign2.default)({}, childProps, fn(childProps, child)));
  return child;
};

var cloneDisplayNone = function cloneDisplayNone(child) {
  return clone(child, function (childProps) {
    var childStyle = childProps ? childProps.style : null;
    return {
      style: (0, _assign2.default)({}, childStyle, { display: 'none' })
    };
  });
};

var cloneWithClassName = function cloneWithClassName(className, child) {
  return clone(child, function (childProps) {
    return {
      className: (0, _join2.default)(childProps && childProps.className, className)
    };
  });
};

var STRATEGIES = {
  one: function one(children, activeIndex) {
    return children[activeIndex];
  },
  all: function all(children, activeIndex) {
    return children.map(function (child, index) {
      if (index !== activeIndex) {
        child = cloneDisplayNone(child);
      }
      return child;
    });
  }
};

var Tab = function (_Component) {
  _inherits(Tab, _Component);

  function Tab() {
    _classCallCheck(this, Tab);

    return _possibleConstructorReturn(this, (Tab.__proto__ || Object.getPrototypeOf(Tab)).apply(this, arguments));
  }

  _createClass(Tab, [{
    key: 'render',
    value: function render() {
      return _react2.default.createElement('div', (0, _cleanProps2.default)(this.props, Tab.propTypes));
    }
  }]);

  return Tab;
}(_reactClass2.default);

Tab.defaultProps = {
  isTabPanelTab: true
};

Tab.propTypes = {
  isTabPanelTab: _propTypes2.default.bool,
  title: _propTypes2.default.node
};

var ZippyTabPanel = function (_Component2) {
  _inherits(ZippyTabPanel, _Component2);

  function ZippyTabPanel(props) {
    _classCallCheck(this, ZippyTabPanel);

    var _this2 = _possibleConstructorReturn(this, (ZippyTabPanel.__proto__ || Object.getPrototypeOf(ZippyTabPanel)).call(this, props));

    _this2.state = {
      oldActiveIndex: null,
      activeIndex: props.defaultActiveIndex || 0,
      focusedIndex: props.defaultFocusedIndex || 0
    };
    return _this2;
  }

  _createClass(ZippyTabPanel, [{
    key: 'prepareClassName',
    value: function prepareClassName(props) {
      return (0, _join2.default)(props.className, props.rootClassName, props.rootClassName + '--orientation-' + (props.vertical ? 'vertical' : 'horizontal'), props.rootClassName + '--theme-' + props.theme, props.rootClassName + '--tab-align-' + props.tabAlign, props.rootClassName + '--tab-position-' + props.tabPosition);
    }
  }, {
    key: 'prepareProps',
    value: function prepareProps(thisProps) {
      var props = (0, _assign2.default)({}, thisProps);
      var tabStrip = {};
      var tabBody = void 0;
      var tabStripIndex = void 0;
      var tabBodyIndex = void 0;

      var children = [];

      var tabs = [];

      _react2.default.Children.toArray(props.children).forEach(function (child, index) {
        if (!child) {
          return;
        }
        var childProps = child.props;

        if (childProps) {
          if (childProps.isTabStrip) {
            tabStrip = childProps;
            tabStripIndex = index;
            return;
          }

          if (childProps.isTabBody) {
            tabBody = childProps;
            tabBodyIndex = index;
            return;
          }
        }
      });

      var addTab = function addTab(child) {
        if (!child) {
          return null;
        }

        var childProps = child.props || {};

        if (childProps.isTabPanelTab) {
          children.push(child);

          if (props.transition && child.props.children) {
            console.warn('You must only have one child in a Tab component when `transition` is true.');
          }
        } else {
          children.push(child);
        }

        var tab = void 0;
        if (childProps.isTabPanelTab) {
          tab = (0, _assign2.default)({}, childProps, {
            children: null
          });
        } else {
          tab = (0, _assign2.default)({
            title: childProps.tabTitle || '',
            disabled: childProps.disabled
          }, childProps.tabProps);
        }

        tabs.push(tab);
      };

      var _props = this.props,
          contentStyle = _props.contentStyle,
          contentClassName = _props.contentClassName;


      _react2.default.Children.toArray(tabBody ? tabBody.children : props.children).forEach(addTab);

      children = children.map(function (child) {
        if (contentStyle || contentClassName) {
          var initialChildStyle = (child.props || {}).style;
          var initialChildClassName = (child.props || {}).className;

          var childStyle = contentStyle ? _extends({}, contentStyle, initialChildStyle) : _extends({}, initialChildStyle);

          var childClassName = contentClassName ? (0, _join2.default)(initialChildClassName, contentClassName) : initialChildClassName;

          child = (0, _react.cloneElement)(child, {
            style: childStyle,
            className: childClassName
          });
        }
        if (typeof child.type === 'string') {
          var childProps = _extends({}, child.props);
          var Comp = child.type;
          delete childProps.tabTitle;
          delete childProps.tabProps;
          return _react2.default.createElement(Comp, childProps);
        }

        return child;
      });

      props.tabs = tabs;

      props.activeIndex = this.prepareActiveIndex(props);
      props.focusedIndex = this.prepareFocusedIndex(props);
      props.tabPosition = this.prepareTabPosition(props, {
        tabStripIndex: tabStripIndex,
        tabBodyIndex: tabBodyIndex
      });

      props.vertical = props.vertical && (props.tabPosition == 'left' || props.tabPosition == 'right');
      props.tabStrip = tabStrip;
      props.tabBody = tabBody;
      props.children = children;

      if (props.transition) {
        props.initialStrategy = props.strategy;
        props.strategy = this.transitionStrategy;
      }

      return props;
    }
  }, {
    key: 'componentDidMount',
    value: function componentDidMount() {
      this.body.addEventListener((0, _getTransitionEnd2.default)(), this.onBodyTransitionEnd);
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      this.body && this.body.removeEventListener((0, _getTransitionEnd2.default)(), this.onBodyTransitionEnd);
    }
  }, {
    key: 'onBodyTransitionEnd',
    value: function onBodyTransitionEnd() {
      if (!this.state.transitioning) {
        return;
      }

      this.setState({
        transitioning: null,
        transitionInProgress: false,
        wrapperStyle: null,
        oldActiveIndex: null
      });
    }
  }, {
    key: 'UNSAFE_componentWillUpdate',
    value: function UNSAFE_componentWillUpdate(nextProps, nextState) {
      var _this3 = this;

      var activeIndex = this.p.activeIndex;
      var newActiveIndex = this.prepareActiveIndex(nextProps, nextState);

      if (newActiveIndex != activeIndex && nextProps.transition) {
        if (!this.wrapper) {
          return;
        }

        var dir = newActiveIndex > activeIndex ? 1 : -1;

        var getActiveChild = function getActiveChild() {
          return _this3.p.initialStrategy == 'one' ? _this3.wrapper.firstChild : _this3.wrapper.children[activeIndex];
        };
        var getOtherChild = function getOtherChild() {
          return _this3.p.initialStrategy == 'one' ? dir == 1 ? _this3.wrapper.lastChild : _this3.wrapper.firstChild : _this3.wrapper.children[newActiveIndex];
        };

        var childHeight = function childHeight() {
          var child = getActiveChild();
          return child && child.offsetHeight;
        };

        var activeChild = getActiveChild();

        // at this point only 1 child should be rendered
        var currentChildHeight = activeChild && activeChild.offsetHeight || 0;

        var wrapperStyle = {
          height: this.wrapper.offsetHeight
        };

        if (this.state.transitioning) {
          this.onBodyTransitionEnd();
        }

        this.setState({
          transitioning: dir,
          wrapperStyle: {
            height: wrapperStyle.height
          },
          oldActiveIndex: activeIndex
        }, function () {
          if (!_this3.wrapper) {
            _this3.onBodyTransitionEnd();
          }

          var otherChild = getOtherChild();

          var wrapperHeight = wrapperStyle.height - currentChildHeight + (otherChild && otherChild.offsetHeight || 0);

          _this3.setState({
            transitioning: dir,
            transitionInProgress: true,
            wrapperStyle: { height: wrapperHeight }
          });
        });
      }
    }
  }, {
    key: 'transitionStrategy',
    value: function transitionStrategy(children, activeIndex) {
      var _this4 = this;

      var strategy = this.p.initialStrategy;
      var strategyFn = STRATEGIES[strategy];

      if (!strategyFn) {
        console.warn('Strategy not supported for transition');
      }

      var IN_CLASS_NAME = this.props.rootClassName + '__content--in';
      var OUT_CLASS_NAME = this.props.rootClassName + '__content--out';

      if (this.state.oldActiveIndex != null) {
        if (strategy == 'one') {
          var indexes = [this.state.oldActiveIndex, activeIndex];

          // render them in the correct order
          indexes.sort();

          var firstIndex = indexes[0];
          var firstIn = firstIndex == activeIndex;

          var secondIndex = indexes[1];

          var firstClassName = firstIn ? IN_CLASS_NAME : OUT_CLASS_NAME;
          var secondClassName = firstIn ? OUT_CLASS_NAME : IN_CLASS_NAME;

          children = [clone(children[firstIndex], function (childProps) {
            return {
              style: _this4.addTransitionDuration(childProps && childProps.style),
              className: (0, _join2.default)(childProps && childProps.className, firstClassName)
            };
          }), clone(children[secondIndex], function (childProps) {
            return {
              style: _this4.addTransitionDuration(childProps && childProps.style),
              className: (0, _join2.default)(childProps && childProps.className, secondClassName)
            };
          })];
        } else {
          // strategy == 'all'
          children = children.map(function (child, index) {
            if (index != activeIndex && index != _this4.state.oldActiveIndex) {
              child = cloneDisplayNone(child);
            } else {
              var className = index == activeIndex ? IN_CLASS_NAME : OUT_CLASS_NAME;

              child = clone(child, function (childProps) {
                return {
                  className: (0, _join2.default)(childProps && childProps.className, className),
                  style: _this4.addTransitionDuration(childProps.style)
                };
              });
            }

            return child;
          });
        }
      } else {
        children = strategyFn(children, activeIndex);
      }

      var wrapperStyle = this.addTransitionDuration(this.state.wrapperStyle);
      var transitionWrapperClassName = this.props.rootClassName + '__transition-wrapper';
      return _react2.default.createElement('div', {
        ref: function ref(c) {
          return _this4.wrapper = c;
        },
        style: wrapperStyle,
        className: (0, _join2.default)(transitionWrapperClassName, this.props.vertical ? transitionWrapperClassName + '--vertical' : ''),
        children: children
      });
    }
  }, {
    key: 'addTransitionDuration',
    value: function addTransitionDuration(style) {
      if (this.props.transitionDuration) {
        style = (0, _assign2.default)({}, style, {
          transitionDuration: this.props.transitionDuration
        });
      }

      return style;
    }
  }, {
    key: 'prepareTabPosition',
    value: function prepareTabPosition(props, _ref) {
      var tabStripIndex = _ref.tabStripIndex,
          tabBodyIndex = _ref.tabBodyIndex;

      var tabPosition = props.tabPosition in _tabPositions2.default ? props.tabPosition : 'top';

      if (!props.tabPosition && tabStripIndex !== undefined && tabBodyIndex !== undefined && tabStripIndex > tabBodyIndex) {
        tabPosition = 'bottom';
      }

      return tabPosition;
    }
  }, {
    key: 'prepareActiveIndex',
    value: function prepareActiveIndex(props, state) {
      return props.activeIndex == null ? (state || this.state).activeIndex : props.activeIndex;
    }
  }, {
    key: 'prepareFocusedIndex',
    value: function prepareFocusedIndex(props, state) {
      return props.focusedIndex == null ? (state || this.state).focusedIndex : props.focusedIndex;
    }
  }, {
    key: 'render',
    value: function render() {
      var props = this.p = this.prepareProps(this.props);

      var className = this.prepareClassName(props);

      var tabStripFirst = props.tabPosition == 'top' || props.tabPosition == 'left';
      var row = props.tabPosition == 'left' || props.tabPosition == 'right';

      var rowColConfig = _defineProperty({}, row ? 'row' : 'column', true);

      return _react2.default.createElement(
        _Flex.Flex,
        _extends({
          wrap: false,
          alignItems: 'stretch'
        }, rowColConfig, {
          inline: true
        }, (0, _cleanProps2.default)(props, ZippyTabPanel.propTypes), {
          tabIndex: null,
          className: className
        }),
        tabStripFirst && this.renderTabStrip(),
        this.renderBody(),
        !tabStripFirst && this.renderTabStrip()
      );
    }
  }, {
    key: 'onActivate',
    value: function onActivate(activeIndex) {
      if (this.props.activeIndex == null) {
        this.setState({
          activeIndex: activeIndex
        });
      }

      this.props.onActivate(activeIndex);
    }
  }, {
    key: 'onFocusedIndexChange',
    value: function onFocusedIndexChange(focusedIndex) {
      if (this.props.focusedIndex == null) {
        this.setState({
          focusedIndex: focusedIndex
        });
      }

      this.props.onFocusedIndexChange(focusedIndex);
    }
  }, {
    key: 'renderTabStrip',
    value: function renderTabStrip() {
      var tabs = this.p.tabs;

      var _p = this.p,
          activeIndex = _p.activeIndex,
          focusedIndex = _p.focusedIndex,
          activateOnFocus = _p.activateOnFocus,
          activateEvent = _p.activateEvent,
          onAddNew = _p.onAddNew,
          onCloseTab = _p.onCloseTab,
          closeable = _p.closeable,
          closeableOnOver = _p.closeableOnOver,
          scroller = _p.scroller,
          scrollSpringConfig = _p.scrollSpringConfig,
          scrollOnClick = _p.scrollOnClick,
          tabFactory = _p.tabFactory,
          tabStripFactory = _p.tabStripFactory,
          theme = _p.theme,
          tabAlign = _p.tabAlign,
          tabClassName = _p.tabClassName,
          tabActiveClassName = _p.tabActiveClassName,
          tabDisabledClassName = _p.tabDisabledClassName,
          tabFocusedClassName = _p.tabFocusedClassName,
          tabStyle = _p.tabStyle,
          tabDisabledStyle = _p.tabDisabledStyle,
          tabActiveStyle = _p.tabActiveStyle,
          tabPosition = _p.tabPosition,
          tabEllipsis = _p.tabEllipsis,
          tabIndex = _p.tabIndex,
          vertical = _p.vertical,
          enableKeyboardNavigation = _p.enableKeyboardNavigation,
          rootClassName = _p.rootClassName;


      var newTabStripProps = {
        activateEvent: activateEvent,
        activateOnFocus: activateOnFocus,
        onActivate: this.onActivate,
        onFocusedIndexChange: this.onFocusedIndexChange,
        activeIndex: activeIndex,
        focusedIndex: focusedIndex,
        tabFactory: tabFactory,
        tabAlign: tabAlign,
        theme: theme,
        defaultTabs: tabs,
        tabPosition: tabPosition,
        enableKeyboardNavigation: enableKeyboardNavigation,
        inTabPanel: true
      };

      (0, _assignDefined2.default)(newTabStripProps, {
        onAddNew: onAddNew,
        onCloseTab: onCloseTab,
        closeable: closeable,
        closeableOnOver: closeableOnOver,
        scroller: scroller,
        scrollSpringConfig: scrollSpringConfig,
        scrollOnClick: scrollOnClick,
        vertical: vertical,
        tabStyle: tabStyle,
        tabDisabledStyle: tabDisabledStyle,
        tabActiveStyle: tabActiveStyle,
        tabClassName: tabClassName,
        tabActiveClassName: tabActiveClassName,
        tabDisabledClassName: tabDisabledClassName,
        tabFocusedClassName: tabFocusedClassName,
        tabEllipsis: tabEllipsis,
        tabIndex: tabIndex
      });

      var tabStripProps = (0, _assign2.default)({ tabFactory: tabFactory }, this.p.tabStrip, newTabStripProps, {
        rootClassName: rootClassName + '__tab-strip',
        topRootClassName: rootClassName
      });

      var tabStrip = void 0;

      if (tabStripFactory) {
        tabStrip = tabStripFactory(tabStripProps);
      }

      if (tabStrip === undefined) {
        tabStrip = _react2.default.createElement(_TabStrip2.default, tabStripProps);
      }

      return tabStrip;
    }
  }, {
    key: 'applyRenderStrategy',
    value: function applyRenderStrategy(_ref2) {
      var activeIndex = _ref2.activeIndex,
          children = _ref2.children,
          strategy = _ref2.strategy;

      var fn = STRATEGIES[strategy];

      if (typeof fn != 'function') {
        fn = typeof strategy == 'function' ? strategy : STRATEGIES.all;
      }

      return fn(children, activeIndex);
    }
  }, {
    key: 'renderBody',
    value: function renderBody() {
      var _this5 = this;

      var _p2 = this.p,
          tabBodyStyle = _p2.tabBodyStyle,
          activeIndex = _p2.activeIndex,
          transition = _p2.transition,
          vertical = _p2.vertical,
          rootClassName = _p2.rootClassName,
          tabBodyClassName = _p2.tabBodyClassName;

      var bodyChildren = this.applyRenderStrategy(this.p);
      var tabBody = this.p.tabBody || {};

      var bodyStyle = _extends({}, tabBody.style, tabBodyStyle);
      var bodyClassName = (0, _join2.default)(tabBody.className, tabBodyClassName);
      var bodyProps = (0, _assign2.default)({}, this.p.tabBody, {
        vertical: vertical,
        transition: transition,
        transitionInProgress: this.state.transitionInProgress,
        stretchTabContent: this.props.stretchTabContent,
        scrollTabContent: this.props.scrollTabContent,
        activeIndex: activeIndex,
        className: bodyClassName,
        style: bodyStyle,
        tabPosition: this.p.tabPosition,
        renderContent: this.p.renderContent,
        children: bodyChildren
      });

      return _react2.default.createElement(_Body2.default, _extends({
        ref: function ref(b) {
          return _this5.body = (0, _reactDom.findDOMNode)(b);
        },
        transitioning: this.state.transitioning,
        rootClassName: rootClassName + '__body'
      }, bodyProps, this.state.bodyProps));
    }
  }]);

  return ZippyTabPanel;
}(_reactClass2.default);

exports.default = ZippyTabPanel;


ZippyTabPanel.propTypes = (_ZippyTabPanel$propTy = {
  activeIndex: _propTypes2.default.number,
  focusedIndex: _propTypes2.default.number,
  defaultFocusedIndex: _propTypes2.default.number,
  onFocusedIndexChange: _propTypes2.default.func,
  activateOnFocus: _propTypes2.default.bool,
  contentClassName: _propTypes2.default.string,
  defaultActiveIndex: _propTypes2.default.number,
  enableKeyboardNavigation: _propTypes2.default.bool,
  initialStrategy: _propTypes2.default.string,
  onActivate: _propTypes2.default.func,
  onCloseTab: _propTypes2.default.func,
  renderContent: _propTypes2.default.func,
  rootClassName: _propTypes2.default.string,
  tabAlign: _propTypes2.default.string,
  tabBody: _propTypes2.default.any,
  tabStyle: _propTypes2.default.oneOfType([_propTypes2.default.object, _propTypes2.default.func]),
  tabDisabledStyle: _propTypes2.default.shape({}),
  tabActiveStyle: _propTypes2.default.shape({}),
  tabClassName: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.func]),
  tabActiveClassName: _propTypes2.default.string,
  tabDisabledClassName: _propTypes2.default.string,
  tabFocusedClassName: _propTypes2.default.string,
  tabBodyStyle: _propTypes2.default.any,
  contentStyle: _propTypes2.default.object,

  tabBodyClassName: _propTypes2.default.string,
  tabEllipsis: _propTypes2.default.bool,
  tabFactory: _propTypes2.default.func
}, _defineProperty(_ZippyTabPanel$propTy, 'tabFactory', _propTypes2.default.func), _defineProperty(_ZippyTabPanel$propTy, 'tabPosition', _propTypes2.default.string), _defineProperty(_ZippyTabPanel$propTy, 'tabStrip', _propTypes2.default.any), _defineProperty(_ZippyTabPanel$propTy, 'tabStripFactory', _propTypes2.default.func), _defineProperty(_ZippyTabPanel$propTy, 'tabs', _propTypes2.default.array), _defineProperty(_ZippyTabPanel$propTy, 'theme', _propTypes2.default.string), _defineProperty(_ZippyTabPanel$propTy, 'transition', _propTypes2.default.bool), _defineProperty(_ZippyTabPanel$propTy, 'closeableOnOver', _propTypes2.default.bool), _defineProperty(_ZippyTabPanel$propTy, 'closeable', _propTypes2.default.bool), _defineProperty(_ZippyTabPanel$propTy, 'stretchTabContent', _propTypes2.default.bool), _defineProperty(_ZippyTabPanel$propTy, 'scrollTabContent', _propTypes2.default.bool), _defineProperty(_ZippyTabPanel$propTy, 'scroller', _propTypes2.default.oneOf([true, false, 'auto'])), _defineProperty(_ZippyTabPanel$propTy, 'vertical', _propTypes2.default.bool), _defineProperty(_ZippyTabPanel$propTy, 'strategy', _propTypes2.default.oneOfType([_propTypes2.default.oneOf(['one', 'all']), _propTypes2.default.func])), _ZippyTabPanel$propTy);

ZippyTabPanel.defaultProps = {
  rootClassName: 'zippy-react-toolkit-tab-panel',
  scrollTabContent: true,
  theme: 'default',
  tabAlign: 'start',
  onActivate: function onActivate() {},
  onCloseTab: function onCloseTab() {},
  onFocusedIndexChange: function onFocusedIndexChange() {},
  strategy: 'one',
  activateOnFocus: false
};

exports.Tab = Tab;
exports.TabStrip = _TabStrip2.default;
exports.TabBody = _Body2.default;
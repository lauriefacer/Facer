'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _TabTitle$propTypes;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _reactDom = require('react-dom');

var _reactClass = require('@zippytech/react-class');

var _reactClass2 = _interopRequireDefault(_reactClass);

var _assign = require('../../../common/assign');

var _assign2 = _interopRequireDefault(_assign);

var _NotifyResize = require('../../../NotifyResize');

var _join = require('../../../common/join');

var _join2 = _interopRequireDefault(_join);

var _isMobile = require('../../../common/isMobile');

var _isMobile2 = _interopRequireDefault(_isMobile);

var _cleanProps = require('../../../common/cleanProps');

var _cleanProps2 = _interopRequireDefault(_cleanProps);

var _assignDefined = require('../assignDefined');

var _assignDefined2 = _interopRequireDefault(_assignDefined);

var _bemFactory = require('../bemFactory');

var _bemFactory2 = _interopRequireDefault(_bemFactory);

var _FlexiBox = require('./FlexiBox');

var _FlexiBox2 = _interopRequireDefault(_FlexiBox);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Copyright (c) 2015-present, Zippy Technologies
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * This source code is licensed under the MIT license found in the
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * LICENSE file in the root directory of this source tree.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */

var toNumber = function toNumber(n) {
  return parseInt(n, 10);
};

var stopPropagation = function stopPropagation(e) {
  return e.stopPropagation();
};

var getBorderPaddingSize = function getBorderPaddingSize(node) {
  var computedStyle = global.getComputedStyle(node);

  return {
    left: toNumber(computedStyle.borderLeftWidth) + toNumber(computedStyle.paddingLeft),
    right: toNumber(computedStyle.borderRightWidth) + toNumber(computedStyle.paddingRight),
    top: toNumber(computedStyle.borderTopWidth) + toNumber(computedStyle.paddingTop),
    bottom: toNumber(computedStyle.borderBottomWidth) + toNumber(computedStyle.paddingBottom)
  };
};

var invert = function invert(_ref) {
  var width = _ref.width,
      height = _ref.height;

  return {
    height: width,
    width: height
  };
};

var HIDDEN_STYLE = {
  position: 'absolute',
  visibility: 'hidden',
  width: 'auto',
  minWidth: 'auto',
  maxWidth: 'auto',
  height: 'auto',
  minHeight: 'auto',
  maxHeight: 'auto'
};

var TabTitle = function (_Component) {
  _inherits(TabTitle, _Component);

  function TabTitle(props) {
    _classCallCheck(this, TabTitle);

    var _this = _possibleConstructorReturn(this, (TabTitle.__proto__ || Object.getPrototypeOf(TabTitle)).call(this, props));

    _this.state = {
      style: {},
      size: {},
      hiddenSize: {},
      innerSize: {}
    };
    return _this;
  }

  _createClass(TabTitle, [{
    key: 'prepareClassName',
    value: function prepareClassName(props) {
      var rootClassName = props.rootClassName;

      return (0, _join2.default)(props.className, rootClassName, props.first && rootClassName + '--first', props.last && rootClassName + '--last', props.vertical && rootClassName + '--vertical', props.active && rootClassName + '--active', props.focused && rootClassName + '--focused', props.beforeActive && rootClassName + '--before-active', props.afterActive && rootClassName + '--after-active', props.disabled && rootClassName + '--disabled', props.closeable && rootClassName + '--closeable', props.closeable && props.closeableOnOver && rootClassName + '--closeable-on-over', props.tabEllipsis && rootClassName + '--ellipsis');
    }
  }, {
    key: 'prepareInnerClassName',
    value: function prepareInnerClassName(props) {
      var tabClassName = props.tabClassName;
      var innerClassName = (typeof tabClassName == 'function' ? tabClassName(props) : tabClassName) || '';
      var rootClassName = props.rootClassName;

      return (0, _join2.default)(rootClassName + '__inner', innerClassName, props.active && rootClassName + '__inner--active', props.disabled && props.tabDisabledClassName, props.active && props.tabActiveClassName, props.tabEllipsis && rootClassName + '__inner--ellipsis');
    }
  }, {
    key: 'prepareChildren',
    value: function prepareChildren(props) {
      var title = (props.tabTitle !== undefined ? props.tabTitle : props.children) || '\xA0';

      if (typeof title == 'string') {
        title = _react2.default.createElement(
          'span',
          null,
          title
        );
      }

      if (props.closeable) {
        if (Array.isArray(title)) {
          return [title, this.renderCloseIcon()];
        }
        return [(0, _react.cloneElement)(title, { key: 'title' }), this.renderCloseIcon()];
      }

      if (Array.isArray(title)) {
        return title;
      }

      return (0, _react.cloneElement)(title, { key: 'title' });
    }
  }, {
    key: 'renderCloseIcon',
    value: function renderCloseIcon() {
      var eventConfig = _defineProperty({}, this.p.activateEvent, stopPropagation);

      return _react2.default.createElement(
        'div',
        _extends({}, eventConfig, {
          key: 'closeIcon',
          onClick: this.onClose,
          title: 'Close tab',
          className: this.props.rootClassName + '__close-icon'
        }),
        _react2.default.createElement(
          'svg',
          {
            className: this.props.rootClassName + '__close-icon-svg',
            viewBox: '4 4 16 16',
            height: '10',
            width: '10'
          },
          _react2.default.createElement('path', { d: 'M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z' })
        )
      );
    }
  }, {
    key: 'onClose',
    value: function onClose(event) {
      if (this.p.activateEvent == 'onClick') {
        event.stopPropagation();
      }

      this.props.onClose(event);
    }
  }, {
    key: 'prepareInnerStyle',
    value: function prepareInnerStyle(props) {
      var tabStyle = props.tabStyle;

      var innerStyle = (typeof tabStyle == 'function' ? tabStyle(props) : tabStyle) || {};

      return (0, _assign2.default)({}, innerStyle, props.disabled && props.tabDisabledStyle, props.active && props.tabActiveStyle);
    }
  }, {
    key: 'prepareStyle',
    value: function prepareStyle(props, innerStyle) {
      var style = (0, _assign2.default)({}, props.style);

      if (props.vertical) {
        // on vertical tabs - the name of the dimensions are inversed
        var dimensionStyles = {
          height: 'width',
          minHeight: 'minWidth',
          maxHeight: 'maxWidth'
        };

        Object.keys(dimensionStyles).forEach(function (name) {
          // NOTE: inner is rotated!
          var value = innerStyle[name];

          if (value !== undefined) {
            style[name] = value;
            delete innerStyle[name];
            innerStyle[dimensionStyles[name]] = value;
          }
        });
      }

      if (props.tabAlign === 'stretch') {
        // if we are in stretch mode, the size
        // dimensions should be set on the style object (if they are specified)
        // not on the innerStyle, since the main div will now give the dimension

        var dimensions = props.vertical ? ['height', 'minHeight', 'maxHeight'] : ['width', 'minWidth', 'maxWidth'];

        dimensions.forEach(function (name) {
          var value = innerStyle[name];

          if (value !== undefined) {
            style[name] = value;
            delete innerStyle[name];
          }
        });
      }

      return style;
    }
  }, {
    key: 'render',
    value: function render() {
      var _extends2;

      var props = this.p = (0, _assign2.default)({}, this.props);
      var index = props.index;

      var className = this.prepareClassName(props);
      var innerClassName = this.prepareInnerClassName(props);
      var children = this.prepareChildren(props);
      var _state = this.state,
          innerSize = _state.innerSize,
          hiddenSize = _state.hiddenSize;

      var innerStyle = this.prepareInnerStyle(props);
      var style = this.prepareStyle(props, innerStyle);

      // HAIRY LOGIC - all needed for vertical tabs!
      if (props.vertical) {
        if (props.tabAlign != 'stretch') {
          style.minWidth = innerSize.height;
          style.height = innerSize.width;
        } else {
          style.minWidth = innerSize.height;
          style.height = hiddenSize.width;
        }
      }
      style.outline = '0px solid transparent';

      var renderProps = _extends({}, (0, _cleanProps2.default)(this.props, TabTitle.propTypes), (_extends2 = {
        style: style,
        disabled: null,
        className: className
      }, _defineProperty(_extends2, props.activateEvent, this.onActivate), _defineProperty(_extends2, 'onKeyDown', this.props.onKeyDown), _extends2));

      var innerProps = {
        key: 'inner',
        style: innerStyle,
        className: innerClassName,
        children: [children, props.vertical && _react2.default.createElement(_NotifyResize.NotifyResize, {
          key: 'verticalresizer',
          measureSize: this.measureInnerSize,
          onResize: this.onInnerResize,
          notifyOnMount: true
        })]
      };

      if (props.vertical && props.tabAlign === 'stretch') {
        var verticalFix = _react2.default.createElement(
          'div',
          {
            key: 'innerHidden',
            className: (0, _join2.default)(innerClassName, props.rootClassName + '__inner--hidden'),
            style: (0, _assign2.default)({}, innerStyle, HIDDEN_STYLE)
          },
          children,
          _react2.default.createElement(_NotifyResize.NotifyResize, {
            key: 'hiddenresizer',
            onResize: this.onHiddenResize,
            notifyOnMount: true
          })
        );

        return _react2.default.createElement(
          _FlexiBox2.default,
          renderProps,
          function (_ref2) {
            var width = _ref2.width,
                height = _ref2.height;

            height = Math.max(height || 0, hiddenSize.width || 0);

            return [_react2.default.createElement('div', _extends({}, innerProps, { style: _extends({}, innerStyle, { width: height }) })), verticalFix];
          }
        );
      }

      return _react2.default.createElement(
        'div',
        _extends({}, renderProps, { tabIndex: 0 }),
        _react2.default.createElement('div', innerProps)
      );
    }
  }, {
    key: 'measureInnerSize',
    value: function measureInnerSize(node) {
      var height = node.offsetHeight;
      var width = node.offsetWidth;

      if (this.props.vertical) {
        var borderPaddingSize = getBorderPaddingSize(node.parentNode);
        height += borderPaddingSize.left + borderPaddingSize.right;
      }

      return {
        width: width,
        height: height
      };
    }
  }, {
    key: 'onInnerResize',
    value: function onInnerResize(_ref3) {
      var width = _ref3.width,
          height = _ref3.height;

      this.setState({
        innerSize: { width: width, height: height }
      });
    }
  }, {
    key: 'onHiddenResize',
    value: function onHiddenResize(_ref4) {
      var width = _ref4.width,
          height = _ref4.height;

      this.setState({
        hiddenSize: { width: width, height: height }
      });
    }
  }, {
    key: 'onActivate',
    value: function onActivate(event) {
      var eventName = this.props.activateEvent;
      var domNode = (0, _reactDom.findDOMNode)(this);

      if (typeof this.props[eventName] === 'function') {
        this.props[eventName](event);
      }

      !this.props.disabled && this.props.onActivate(domNode);
    }
  }]);

  return TabTitle;
}(_reactClass2.default);

exports.default = TabTitle;


TabTitle.propTypes = (_TabTitle$propTypes = {
  active: _propTypes2.default.number,
  activeIndex: _propTypes2.default.number,
  vertical: _propTypes2.default.bool,
  tabTitle: _propTypes2.default.node,
  tabClassName: _propTypes2.default.string,
  tabActiveClassName: _propTypes2.default.string,
  tabDisabledClassName: _propTypes2.default.string,
  tabFocusedClassName: _propTypes2.default.string,

  focused: _propTypes2.default.bool,

  tabStyle: _propTypes2.default.object,
  tabActiveStyle: _propTypes2.default.object,
  tabDisabledStyle: _propTypes2.default.object,
  rootClassName: _propTypes2.default.string,

  tabAlign: _propTypes2.default.string,
  beforeActive: _propTypes2.default.bool,
  afterActive: _propTypes2.default.bool,
  first: _propTypes2.default.bool,
  last: _propTypes2.default.bool
}, _defineProperty(_TabTitle$propTypes, 'active', _propTypes2.default.bool), _defineProperty(_TabTitle$propTypes, 'closeable', _propTypes2.default.bool), _defineProperty(_TabTitle$propTypes, 'closeableOnOver', _propTypes2.default.bool), _defineProperty(_TabTitle$propTypes, 'disabled', _propTypes2.default.bool), _defineProperty(_TabTitle$propTypes, 'tabEllipsis', _propTypes2.default.bool), _defineProperty(_TabTitle$propTypes, 'isTabPanelTab', _propTypes2.default.bool), _defineProperty(_TabTitle$propTypes, 'activateEvent', _propTypes2.default.oneOf(['onClick', 'onMouseEnter', 'onMouseDown', 'onTouchStart', 'onTouchEnd'])), _defineProperty(_TabTitle$propTypes, 'onActivate', _propTypes2.default.func), _TabTitle$propTypes);

TabTitle.defaultProps = {
  activateEvent: _isMobile2.default ? 'onTouchStart' : 'onClick',
  onActivate: function onActivate() {}
};
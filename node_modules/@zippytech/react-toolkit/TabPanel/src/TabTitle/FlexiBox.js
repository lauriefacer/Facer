'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _reactDom = require('react-dom');

var _reactClass = require('@zippytech/react-class');

var _reactClass2 = _interopRequireDefault(_reactClass);

var _NotifyResize = require('../../../NotifyResize');

var _join = require('../../../common/join');

var _join2 = _interopRequireDefault(_join);

var _assign = require('../../../common/assign');

var _assign2 = _interopRequireDefault(_assign);

var _cleanProps = require('../../../common/cleanProps');

var _cleanProps2 = _interopRequireDefault(_cleanProps);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Copyright (c) 2015-present, Zippy Technologies
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * This source code is licensed under the MIT license found in the
file in the root directory of this source tree.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */

var emptyFn = function emptyFn() {
  return null;
};

var FlexiBox = function (_Component) {
  _inherits(FlexiBox, _Component);

  function FlexiBox(props) {
    _classCallCheck(this, FlexiBox);

    var _this = _possibleConstructorReturn(this, (FlexiBox.__proto__ || Object.getPrototypeOf(FlexiBox)).call(this, props));

    _this.state = {
      width: null,
      height: null
    };

    _this.mounted = false;
    return _this;
  }

  _createClass(FlexiBox, [{
    key: 'render',
    value: function render() {
      var props = this.props;

      var style = _extends({}, props.style);

      if (!style.position || style.position === 'static') {
        style.position = 'relative';
      }

      var Factory = props.factory || 'div';
      var render = props.children;

      return _react2.default.createElement(
        Factory,
        (0, _cleanProps2.default)(props, FlexiBox.propTypes),
        render(this.state),
        _react2.default.createElement(_NotifyResize.NotifyResize, { key: 'resizer', onResize: this.onResize, notifyOnMount: true })
      );
    }
  }, {
    key: 'onResize',
    value: function onResize(_ref) {
      var width = _ref.width,
          height = _ref.height;

      if (!this.mounted) {
        this.mounted = true;
      }

      this.setState({
        width: width,
        height: height
      });
    }
  }]);

  return FlexiBox;
}(_reactClass2.default);

exports.default = FlexiBox;


FlexiBox.propTypes = {
  factory: _propTypes2.default.func,
  children: _propTypes2.default.func
};
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _assign = require('../../common/assign');

var _assign2 = _interopRequireDefault(_assign);

var _cleanProps = require('../../common/cleanProps');

var _cleanProps2 = _interopRequireDefault(_cleanProps);

var _prepareClassName = require('./prepareClassName');

var _prepareClassName2 = _interopRequireDefault(_prepareClassName);

var _uglified = require('@zippytech/uglified');

var _uglified2 = _interopRequireDefault(_uglified);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Copyright (c) 2015-present, Zippy Technologies
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * This source code is licensed under the MIT license found in the
file in the root directory of this source tree.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */

var ZippyButton = function (_Component) {
  _inherits(ZippyButton, _Component);

  function ZippyButton(props) {
    _classCallCheck(this, ZippyButton);

    var _this = _possibleConstructorReturn(this, (ZippyButton.__proto__ || Object.getPrototypeOf(ZippyButton)).call(this, props));

    _this.state = {
      mouseOver: false,
      active: false,
      pressed: _this.props.defaultPressed
    };

    _this.handleClick = _this.handleClick.bind(_this);
    _this.handleFocus = _this.handleFocus.bind(_this);
    _this.handleBlur = _this.handleBlur.bind(_this);
    _this.handleMouseEnter = _this.handleMouseEnter.bind(_this);
    _this.handleMouseLeave = _this.handleMouseLeave.bind(_this);
    _this.handleMouseDown = _this.handleMouseDown.bind(_this);
    _this.handleMouseUp = _this.handleMouseUp.bind(_this);
    _this.handleKeyDown = _this.handleKeyDown.bind(_this);

    _this.getRootRef = function (ref) {
      _this.rootNode = ref;
    };
    return _this;
  }

  _createClass(ZippyButton, [{
    key: 'UNSAFE_componentWillReceiveProps',
    value: function UNSAFE_componentWillReceiveProps(nextProps) {
      if (!this.props.disabled && nextProps.disabled && this.state.focused) {
        this.handleBlur();
      }
    }
  }, {
    key: 'handleKeyDown',
    value: function handleKeyDown(event) {
      var key = event.key;

      if (this.tagName != 'button' && key == 'Enter') {
        this.props.onClick(event);
        event.preventDefault();
      }

      if (this.props.onKeyDown) {
        this.props.onKeyDown(event);
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var props = this.props;
      var buttonStates = this.getButtonStates();
      var style = this.prepareStyle(this.props, buttonStates);
      var className = (0, _prepareClassName2.default)(buttonStates, props);

      var domProps = _extends({}, (0, _cleanProps2.default)(this.props, ZippyButton.propTypes), {
        style: style,
        className: className,
        onClick: this.handleClick,
        onKeyDown: this.handleKeyDown,
        onFocus: this.handleFocus,
        onBlur: this.handleBlur,
        onMouseEnter: this.handleMouseEnter,
        onMouseLeave: this.handleMouseLeave,
        onMouseDown: this.handleMouseDown,
        onMouseUp: this.handleMouseUp,
        href: props.href
      });

      var topBottomVerticalAlign = this.props.verticalAlign == 'top' || this.props.verticalAlign == 'bottom';

      var avoidButtonTag = !!this.props.icon || topBottomVerticalAlign;

      var TagName = this.props.tagName;

      if (!TagName && !avoidButtonTag) {
        TagName = 'button';
      }

      if (TagName == 'button' && avoidButtonTag) {
        if (this.props.showWarnings && console && console.warn) {
          console.warn('Button html tags are not fully compatible with flexbox, so we\'re rendering a "div" instead. See http://stackoverflow.com/questions/35464067/flexbox-not-working-on-button-element-in-some-browsers for details.');
        }
      }

      if (props.href) {
        TagName = 'a';
      }

      TagName = TagName || 'div';

      this.tagName = TagName;

      if (TagName === 'div' && domProps.tabIndex === undefined && !this.props.disabled) {
        domProps.tabIndex = 0;
      }

      return _react2.default.createElement(TagName, _extends({}, domProps, {
        ref: this.getRootRef,
        children: this.prepareChildren(props, buttonStates)
      }));
    }
  }, {
    key: 'handleFocus',
    value: function handleFocus(event) {
      if (this.props.disabled) {
        return;
      }

      this.setState({ focused: true });
      this.props.onFocus(event);
    }
  }, {
    key: 'handleBlur',
    value: function handleBlur(event) {
      if (this.props.disabled) {
        return;
      }

      this.setState({ focused: false });
      this.props.onBlur(event);
    }
  }, {
    key: 'handleClick',
    value: function handleClick(event) {
      var props = this.props;
      if (props.disabled) {
        event.preventDefault();
        event.stopPropagation();
        return;
      }

      if (this.isToggleButon()) {
        this.toggle();
      }

      this.props.onClick(event);
    }
  }, {
    key: 'isToggleButon',
    value: function isToggleButon() {
      return this.isPressed() !== undefined;
    }
  }, {
    key: 'toggle',
    value: function toggle() {
      var isPressed = this.isPressed();
      var newPressed = !isPressed;
      if (!this.isPressedControlled()) {
        this.setState({
          pressed: newPressed
        });
      }
      this.props.onToggle(newPressed);
    }
  }, {
    key: 'isToggleButton',
    value: function isToggleButton() {
      return this.props.defaultPressed !== null || this.props.pressed !== null;
    }
  }, {
    key: 'handleMouseEnter',
    value: function handleMouseEnter(event) {
      var props = this.props;

      if (props.disabled) {
        return;
      }

      this.setState({ mouseOver: true });
      this.props.onMouseEnter(event);
    }
  }, {
    key: 'handleMouseLeave',
    value: function handleMouseLeave(event) {
      var props = this.props;

      if (props.disabled) {
        return;
      }

      this.setState({ mouseOver: false });
      this.props.onMouseLeave(event);
    }
  }, {
    key: 'handleMouseUp',
    value: function handleMouseUp(event) {
      var props = this.props;

      if (props.disabled) {
        return;
      }

      this.setState({ active: false });
      global.removeEventListener('mouseup', this.handleMouseUp);

      props.onMouseUp(event);
      props.onDeactivate(event);
    }
  }, {
    key: 'handleMouseDown',
    value: function handleMouseDown(event) {
      var props = this.props;

      if (props.disabled) {
        return;
      }

      this.setState({ active: true });

      global.addEventListener('mouseup', this.handleMouseUp);
      props.onMouseDown(event);
      props.onActivate(event);
    }
  }, {
    key: 'isIconFirst',
    value: function isIconFirst() {
      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props;
      var iconPosition = props.iconPosition,
          rtl = props.rtl;

      var iconFirst = iconPosition == 'left' && !rtl || iconPosition == 'top' || rtl && iconPosition == 'start' || rtl && iconPosition == 'right' || !rtl && iconPosition == 'start';

      return iconFirst;
    }
  }, {
    key: 'prepareChildren',
    value: function prepareChildren(props, buttonStates) {
      var _this2 = this;

      var children = props.children;

      children = _react2.default.createElement('div', {
        key: 'text',
        className: this.props.rootClassName + '__text',
        children: children
      });

      var icon = this.props.icon;
      var rtl = this.props.rtl;


      if (icon) {
        var iconPosition = this.props.iconPosition;
        var iconFirst = this.isIconFirst(this.props);

        if (typeof icon == 'function') {
          icon = icon(buttonStates);
        }
        /**
         * icons with ellipsis
         * for inline-flex text-overflow doesn't work, in this case
         * the text is wrapped inside a div
         */

        var wrapIcon = function wrapIcon(icon) {
          return _react2.default.createElement('div', {
            key: 'iconWrapper',
            className: _this2.props.rootClassName + '__icon-wrap' + (_this2.props.disabled ? ' ' + _this2.props.rootClassName + '__icon-wrap--disabled' : ''),
            children: icon
          });
        };

        if (iconFirst) {
          children = [wrapIcon(icon), children];
        } else {
          children = [children, wrapIcon(icon)];
        }
      }

      if (this.props.renderChildren) {
        children = this.props.renderChildren(children);
      }

      return children;
    }
  }, {
    key: 'getButtonStates',
    value: function getButtonStates(props) {
      props = props || this.props;

      return {
        disabled: props.disabled,
        children: props.children,
        active: this.isActive(),
        pressed: this.isPressed(),
        over: this.isOver(),
        focused: this.isFocused(),
        iconFirst: this.isIconFirst(),
        rtl: this.props.rtl,
        icon: this.props.icon,
        ellipsis: props.ellipsis,
        align: props.align,
        verticalAlign: props.verticalAlign,
        wrap: props.wrap,
        overflow: props.overflow,
        iconPosition: this.props.icon ? this.props.iconPosition : undefined
      };
    }
  }, {
    key: 'prepareStyle',
    value: function prepareStyle() {
      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props;
      var buttonStates = arguments[1];

      var style = typeof props.style !== 'function' ? (0, _assign2.default)({}, props.style) : props.style(props, buttonStates);

      if (props.disabled) {
        (0, _assign2.default)(style, props.disabledStyle);
      } else {
        if (this.isPressed()) {
          (0, _assign2.default)(style, props.pressedStyle);
        }

        if (this.isFocused()) {
          (0, _assign2.default)(style, props.focusedStyle);
        }

        if (this.isOver()) {
          (0, _assign2.default)(style, props.overStyle);
        }

        if (this.isActive()) {
          (0, _assign2.default)(style, this.props.activeStyle);
        }
      }

      return style;
    }
  }, {
    key: 'isActive',
    value: function isActive() {
      return this.props.activeState == null ? !!this.state.active : this.props.activeState;
    }
  }, {
    key: 'isOver',
    value: function isOver() {
      return this.props.overState == null ? !!this.state.mouseOver : this.props.overState;
    }
  }, {
    key: 'isFocused',
    value: function isFocused() {
      return this.props.focusedState == null ? !!this.state.focused : this.props.focusedState;
    }
  }, {
    key: 'isPressedControlled',
    value: function isPressedControlled() {
      return this.props.pressed != null;
    }
  }, {
    key: 'isPressed',
    value: function isPressed() {
      return this.isPressedControlled() ? this.props.pressed : this.state.pressed;
    }
  }, {
    key: 'getRootNode',
    value: function getRootNode() {
      return this.rootNode;
    }
  }]);

  return ZippyButton;
}(_react.Component);

function emptyFn() {}

ZippyButton.defaultProps = {
  isZippyButton: true,
  // misc
  theme: 'default',
  rootClassName: 'zippy-react-toolkit-button',
  align: 'center',
  verticalAlign: 'middle',
  ellipsis: true,
  href: null,
  iconPosition: 'start',

  // events
  onFocus: emptyFn,
  onBlur: emptyFn,
  onToggle: emptyFn,
  onClick: emptyFn,
  onMouseEnter: emptyFn,
  onMouseUp: emptyFn,
  onMouseDown: emptyFn,
  onDeactivate: emptyFn,
  onMouseLeave: emptyFn,
  onActivate: emptyFn,

  showWarnings: !_uglified2.default
};

ZippyButton.propTypes = {
  isZippyButton: _propTypes2.default.bool,
  tagName: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.func]),
  primary: _propTypes2.default.bool,
  disabled: _propTypes2.default.bool,
  pressed: _propTypes2.default.bool,
  defaultPressed: _propTypes2.default.bool,

  href: _propTypes2.default.string,
  align: _propTypes2.default.oneOf(['start', 'end', 'center', 'left', 'right']),
  verticalAlign: _propTypes2.default.oneOf(['top', 'middle', 'center', 'bottom']),
  rtl: _propTypes2.default.bool,
  wrap: _propTypes2.default.bool,
  overflow: _propTypes2.default.bool,

  // icon
  icon: _propTypes2.default.oneOfType([_propTypes2.default.node, _propTypes2.default.func]),
  iconPosition: _propTypes2.default.oneOf(['top', 'bottom', 'left', 'right', 'start', 'end']),

  // style
  style: _propTypes2.default.oneOfType([_propTypes2.default.object, _propTypes2.default.func]),

  disabledStyle: _propTypes2.default.object,
  focusedStyle: _propTypes2.default.object,
  pressedStyle: _propTypes2.default.object,
  overStyle: _propTypes2.default.object,
  activeStyle: _propTypes2.default.object,

  // classnames
  className: _propTypes2.default.string,
  activeClassName: _propTypes2.default.string,
  overClassName: _propTypes2.default.string,
  focusedClassName: _propTypes2.default.string,
  disabledClassName: _propTypes2.default.string,
  pressedClassName: _propTypes2.default.string,

  // misc
  theme: _propTypes2.default.string,
  rootClassName: _propTypes2.default.string,
  ellipsis: _propTypes2.default.bool,

  // events
  onClick: _propTypes2.default.func,
  onFocus: _propTypes2.default.func,
  onBlur: _propTypes2.default.func,
  onToggle: _propTypes2.default.func,
  onMouseEnter: _propTypes2.default.func,
  onMouseUp: _propTypes2.default.func,
  onMouseDown: _propTypes2.default.func,
  onDeactivate: _propTypes2.default.func,
  onMouseLeave: _propTypes2.default.func,
  onActivate: _propTypes2.default.func,

  showWarnings: _propTypes2.default.bool
};

exports.default = ZippyButton;
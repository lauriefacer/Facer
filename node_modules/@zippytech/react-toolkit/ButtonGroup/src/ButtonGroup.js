'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _cleanProps = require('../../common/cleanProps');

var _cleanProps2 = _interopRequireDefault(_cleanProps);

var _join = require('../../common/join');

var _join2 = _interopRequireDefault(_join);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Copyright (c) 2015-present, Zippy Technologies
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * This source code is licensed under the MIT license found in the
file in the root directory of this source tree.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */

var ZippyButtonGroup = function (_Component) {
  _inherits(ZippyButtonGroup, _Component);

  function ZippyButtonGroup(props) {
    _classCallCheck(this, ZippyButtonGroup);

    var _this = _possibleConstructorReturn(this, (ZippyButtonGroup.__proto__ || Object.getPrototypeOf(ZippyButtonGroup)).call(this, props));

    _this.state = {
      pressedIndex: props.defaultPressedIndex
    };
    return _this;
  }

  _createClass(ZippyButtonGroup, [{
    key: 'render',
    value: function render() {
      var props = this.props;

      var className = (0, _join2.default)(props.rootClassName, props.className, props.theme && props.rootClassName + '--theme-' + props.theme, props.rtl && props.rootClassName + '--rtl');

      var style = _extends({}, props.style, {
        borderRadius: props.borderRadius,
        border: props.border
      });

      return _react2.default.createElement(
        'div',
        _extends({}, (0, _cleanProps2.default)(props, ZippyButtonGroup.propTypes), {
          className: className,
          style: style
        }),
        this.renderButtons()
      );
    }
  }, {
    key: 'renderButtons',
    value: function renderButtons() {
      var _this2 = this;

      return _react2.default.Children.map(this.props.children, function (child, index) {
        if (typeof child === 'string') {
          return null;
        }
        if (!child.props.isZippyButton) {
          return null;
        }

        return _react2.default.cloneElement(child, {
          className: (0, _join2.default)(_this2.props.rootClassName + '__button', child.props.className),
          pressed: _this2.getPressedIndex() === index,
          onClick: function onClick(event) {
            if (typeof child.props.onClick === 'function') {
              child.props.onClick(event);
            }
            _this2.handleClick({ event: event, index: index, buttonProps: child.props });
          },
          theme: _this2.props.theme || 'default'
        });
      });
    }
  }, {
    key: 'handleClick',
    value: function handleClick(_ref) {
      var event = _ref.event,
          index = _ref.index,
          buttonProps = _ref.buttonProps;

      this.props.onClick({ event: event, index: index, buttonProps: buttonProps });

      if (this.props.enablePressed) {
        this.setPressedIndex(index);
      }
    }
  }, {
    key: 'isPressedIndexControlled',
    value: function isPressedIndexControlled() {
      return this.props.pressedIndex !== undefined;
    }
  }, {
    key: 'setPressedIndex',
    value: function setPressedIndex(index) {
      var newPressedIndex = index;

      if (!this.props.keepOnePressed && this.getPressedIndex() === index) {
        newPressedIndex = null;
      }

      if (!this.isPressedIndexControlled()) {
        this.setState({
          pressedIndex: newPressedIndex
        });
      }

      this.props.onPressedIndexChange(newPressedIndex);
    }
  }, {
    key: 'getPressedIndex',
    value: function getPressedIndex() {
      return this.isPressedIndexControlled() ? this.props.pressedIndex : this.state.pressedIndex;
    }
  }]);

  return ZippyButtonGroup;
}(_react.Component);

function emptyFn() {}

ZippyButtonGroup.defaultProps = {
  rootClassName: 'zippy-react-toolkit-button-group',
  onClick: emptyFn,
  onPressedIndexChange: emptyFn,
  borderRadius: 0,
  rtl: false,
  enablePressed: true,
  theme: 'default'
};

ZippyButtonGroup.propTypes = {
  rootClassName: _propTypes2.default.string,
  keepOnePressed: _propTypes2.default.bool,
  rtl: _propTypes2.default.bool,
  onClick: _propTypes2.default.func,
  borderRadius: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),
  onPressedIndexChange: _propTypes2.default.func,
  defaultPressedIndex: _propTypes2.default.number,
  enablePressed: _propTypes2.default.bool,
  pressedIndex: _propTypes2.default.number,
  border: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),
  theme: _propTypes2.default.string,
  style: _propTypes2.default.object,
  className: _propTypes2.default.string
};

exports.default = ZippyButtonGroup;
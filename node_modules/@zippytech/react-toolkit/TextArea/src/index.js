'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _autoBind = require('@zippytech/react-class/autoBind');

var _autoBind2 = _interopRequireDefault(_autoBind);

var _join = require('../../common/join');

var _join2 = _interopRequireDefault(_join);

var _cleanProps = require('../../common/cleanProps');

var _cleanProps2 = _interopRequireDefault(_cleanProps);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Copyright (c) 2015-present, Zippy Technologies
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * This source code is licensed under the MIT license found in the
file in the root directory of this source tree.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */

var preventDefault = function preventDefault(e) {
  return e.preventDefault();
};

var getClearButtonClassNames = function getClearButtonClassNames(props) {
  var clearButtonClassName = (0, _join2.default)(props.rootClassName + '__clear-button', props.clearButtonClassName);

  return { clearButtonClassName: clearButtonClassName };
};

var isControlled = function isControlled(props) {
  return props.value !== undefined;
};
var emptyObject = {};

var TextArea = function (_Component) {
  _inherits(TextArea, _Component);

  function TextArea(props) {
    _classCallCheck(this, TextArea);

    var _this = _possibleConstructorReturn(this, (TextArea.__proto__ || Object.getPrototypeOf(TextArea)).call(this, props));

    _this.state = {
      focused: false,
      value: props.defaultValue
    };

    (0, _autoBind2.default)(_this);
    return _this;
  }

  _createClass(TextArea, [{
    key: 'handleChange',
    value: function handleChange(event) {
      var value = event.target.value;

      this.setValue(value, event);
    }
  }, {
    key: 'focus',
    value: function focus() {
      this.getDOMNode().focus();
    }
  }, {
    key: 'setValue',
    value: function setValue(value, event) {
      if (!isControlled(this.props)) {
        this.setState({
          value: value
        });
      }

      if (this.props.onChange) {
        this.props.onChange(value, event);
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var props = this.props,
          state = this.state;


      var value = isControlled(props) ? props.value : state.value;

      var className = (0, _join2.default)(props.rootClassName, props.className, props.rtl ? props.rootClassName + '--rtl' : props.rootClassName + '--ltr', props.theme && props.rootClassName + '--theme-' + props.theme, state.focused && props.rootClassName + '--focused', props.disabled && props.rootClassName + '--disabled', (value == '' || value == null) && props.rootClassName + '--empty');

      var domProps = (0, _cleanProps2.default)(this.props, TextArea.propTypes);

      return _react2.default.createElement('textarea', _extends({}, domProps, {
        className: className,
        value: value,
        onChange: this.handleChange,
        onBlur: this.onBlur,
        onFocus: this.onFocus
      }));
    }
  }, {
    key: 'onBlur',
    value: function onBlur(event) {
      this.setState({
        focused: false
      });

      if (this.props.onBlur) {
        this.props.onBlur(event);
      }
    }
  }, {
    key: 'onFocus',
    value: function onFocus(event) {
      this.setState({
        focused: true
      });

      if (this.props.onFocus) {
        this.props.onFocus(event);
      }
    }
  }]);

  return TextArea;
}(_react.Component);

TextArea.defaultProps = {
  theme: 'default',
  rootClassName: 'zippy-react-toolkit-text-area',
  stopChangePropagation: true
};

TextArea.propTypes = {
  theme: _propTypes2.default.string,
  stopChangePropagation: _propTypes2.default.bool,
  rtl: _propTypes2.default.bool,
  rootClassName: _propTypes2.default.string
};

exports.default = TextArea;
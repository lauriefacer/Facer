'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _Overlay = require('../../Overlay');

var _Overlay2 = _interopRequireDefault(_Overlay);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Copyright (c) 2015-present, Zippy Technologies
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * This source code is licensed under the MIT license found in the
file in the root directory of this source tree.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */

var ZippyTooltip = function (_Component) {
  _inherits(ZippyTooltip, _Component);

  function ZippyTooltip(props) {
    _classCallCheck(this, ZippyTooltip);

    var _this = _possibleConstructorReturn(this, (ZippyTooltip.__proto__ || Object.getPrototypeOf(ZippyTooltip)).call(this, props));

    _this.setRootRef = function (ref) {
      return _this.rootNode = ref;
    };
    return _this;
  }

  _createClass(ZippyTooltip, [{
    key: 'render',
    value: function render() {
      return _react2.default.createElement(_Overlay2.default, _extends({ ref: this.setRootRef }, this.props));
    }
  }, {
    key: 'show',
    value: function show() {
      if (this.rootNode) {
        this.rootNode.show();
      }
    }
  }, {
    key: 'hide',
    value: function hide() {
      if (this.rootNode) {
        this.rootNode.hide();
      }
    }
  }]);

  return ZippyTooltip;
}(_react.Component);

ZippyTooltip.defaultProps = {
  rootClassName: 'zippy-react-toolkit-tooltip',
  hideOnScroll: true,

  // style
  arrowSize: 7,
  arrow: true,

  // fade
  fade: true,
  showDelay: 250,
  hideDelay: 300,
  fadeInDuration: 150,
  fadeOutDuration: 50,

  useTransform: true,

  // events
  showEvent: ['mouseenter'],
  hideEvent: ['mouseleave']
};

exports.default = ZippyTooltip;
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _Window = require('../../Window');

var _Window2 = _interopRequireDefault(_Window);

var _cleanProps = require('../../common/cleanProps');

var _cleanProps2 = _interopRequireDefault(_cleanProps);

var _assign = require('../../common/assign');

var _assign2 = _interopRequireDefault(_assign);

var _Buttons = require('./Buttons');

var _Icons = require('./Icons');

var _join = require('../../common/join');

var _join2 = _interopRequireDefault(_join);

var _shouldComponentUpdate2 = require('../../common/shouldComponentUpdate');

var _shouldComponentUpdate3 = _interopRequireDefault(_shouldComponentUpdate2);

var _toLowerCaseFirst = require('./utils/toLowerCaseFirst');

var _toLowerCaseFirst2 = _interopRequireDefault(_toLowerCaseFirst);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Copyright (c) 2015-present, Zippy Technologies
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * This source code is licensed under the MIT license found in the
file in the root directory of this source tree.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */

var emptyFn = function emptyFn() {};

var buttonMap = {
  OkButton: _Buttons.OkButton,
  CancelButton: _Buttons.CancelButton,
  NoButton: _Buttons.NoButton,
  YesButton: _Buttons.YesButton
};

var messageWindowTypes = {
  info: {
    buttons: ['OkButton'],
    icon: _Icons.InfoIcon
  },
  warning: {
    buttons: ['OkButton'],
    icon: _Icons.WarningIcon
  },
  question: {
    buttons: ['YesButton', 'NoButton'],
    icon: _Icons.QuestionIcon
  },
  error: {
    buttons: ['OkButton'],
    icon: _Icons.ErrorIcon
  },
  yesNoCancel: {
    buttons: ['YesButton', 'NoButton', 'CancelButton'],
    icon: _Icons.InfoIcon
  }
};

var MessageWindow = function (_Component) {
  _inherits(MessageWindow, _Component);

  function MessageWindow(props) {
    _classCallCheck(this, MessageWindow);

    var _this = _possibleConstructorReturn(this, (MessageWindow.__proto__ || Object.getPrototypeOf(MessageWindow)).call(this, props));

    _this.renderFooter = _this.renderFooter.bind(_this);
    _this.renderButton = _this.renderButton.bind(_this);
    _this.renderTitle = _this.renderTitle.bind(_this);
    return _this;
  }

  _createClass(MessageWindow, [{
    key: 'shouldComponentUpdate',
    value: function shouldComponentUpdate(nextProps, nextState) {
      return (0, _shouldComponentUpdate3.default)(this, nextProps, nextState);
    }
  }, {
    key: 'render',
    value: function render() {
      var props = this.props;
      var children = props.children;


      var className = (0, _join2.default)(props.className, this.props.rootClassName + '--buttons-align-' + this.props.buttonsAlign);

      var style = (0, _assign2.default)({}, props.style, {
        opacity: this.props.opacity
      });

      return _react2.default.createElement(_Window2.default, _extends({}, (0, _cleanProps2.default)(props, MessageWindow.propTypes), {
        modal: true,
        maximizable: false,
        style: style,
        className: className,
        title: this.renderTitle,
        renderFooter: this.renderFooter
      }));
    }
  }, {
    key: 'renderTitle',
    value: function renderTitle(domProps) {
      domProps.children = [this.renderIcon(), this.props.title];
    }
  }, {
    key: 'renderIcon',
    value: function renderIcon() {
      if (!messageWindowTypes[this.props.type]) {
        return null;
      }
      var result = void 0;
      var domProps = {
        key: 'icon',
        size: this.props.iconSize,
        className: this.props.rootClassName + '__icon'
      };

      if (this.props.icon) {
        if (typeof this.props.icon === 'function') {
          result = this.props.icon(domProps, this.props.type);
        } else {
          result = this.props.icon;
        }
      } else {
        var Icon = messageWindowTypes[this.props.type].icon;
        result = _react2.default.createElement(Icon, domProps);
      }

      return result;
    }
  }, {
    key: 'renderFooter',
    value: function renderFooter(pannelProps) {
      var buttons = void 0;

      if (this.props.buttons) {
        buttons = this.props.buttons;
      } else if (messageWindowTypes[this.props.type]) {
        buttons = messageWindowTypes[this.props.type].buttons.map(this.renderButton);
      } else {
        return null;
      }

      var domProps = {
        className: this.props.rootClassName + '__footer',
        children: buttons
      };

      var result = void 0;
      if (this.props.renderFooter) {
        result = this.props.renderFooter(domProps, this.props);
      }

      if (result == null) {
        result = _react2.default.createElement('footer', domProps);
      }

      return result;
    }
  }, {
    key: 'renderButton',
    value: function renderButton(name) {
      var ButtonFactory = buttonMap[name];
      var buttonProps = _extends({
        onClick: this.onButtonClick.bind(this, name),
        key: name
      }, this.props[(0, _toLowerCaseFirst2.default)(name) + 'Props'], {
        buttonLabel: this.props[(0, _toLowerCaseFirst2.default)(name) + 'Label'],
        className: (0, _join2.default)(this.props.rootClassName + '__button', this.props.rootClassName + '__button--' + (0, _toLowerCaseFirst2.default)(name.replace('Button', '')))
      });

      var result = void 0;
      if (this.props.renderButton) {
        result = this.props.renderButton(buttonProps, name);
      }

      if (result == null) {
        result = _react2.default.createElement(ButtonFactory, buttonProps);
      }

      return result;
    }
  }, {
    key: 'onButtonClick',
    value: function onButtonClick(name, event) {
      this.props['on' + name + 'Click'](name, event);

      if (this.props.dismissOnButtonClick) {
        this.props.onDismiss();
      }
    }
  }]);

  return MessageWindow;
}(_react.Component);

MessageWindow.defaultProps = {
  // misc
  rootClassName: 'zippy-react-toolkit-message-window',
  iconSize: 26,
  opacity: 1,
  dismissOnButtonClick: true,

  // window props
  maxSize: { height: 500, width: 450 },
  minSize: { width: 450, height: 170 },

  // type
  type: 'info',
  modal: false,
  defaultCentered: true,

  // footer and buttons
  onOkButtonClick: emptyFn,
  onCancelButtonClick: emptyFn,
  onNoButtonClick: emptyFn,
  onYesButtonClick: emptyFn,
  okButtonProps: null,
  cancelButtonProps: null,
  noButtonProps: null,
  yesButtonProps: null,
  buttonsAlign: 'center',
  collapsible: false,

  // onDismiss
  onDismiss: emptyFn
};

MessageWindow.propTypes = {
  // misc
  shouldComponentUpdate: _propTypes2.default.func,
  onDismiss: _propTypes2.default.func,
  icon: _propTypes2.default.node,
  iconSize: _propTypes2.default.number,
  opacity: _propTypes2.default.number,
  buttonsAlign: _propTypes2.default.oneOf(['start', 'center', 'end', 'space-between', 'space-around']),
  dismissOnButtonClick: _propTypes2.default.bool,

  // type
  type: _propTypes2.default.oneOf(['info', 'warning', 'question', 'error', 'yesNoCancel']),

  // footer and buttons
  onOkButtonClick: _propTypes2.default.func,
  onCancelButtonClick: _propTypes2.default.func,
  onNoButtonClick: _propTypes2.default.func,
  onYesButtonClick: _propTypes2.default.func,
  okButtonProps: _propTypes2.default.object,
  cancelButtonProps: _propTypes2.default.object,
  noButtonProps: _propTypes2.default.object,
  yesButtonProps: _propTypes2.default.object,

  okButtonLabel: _propTypes2.default.node,
  cancelButtonLabel: _propTypes2.default.node,
  noButtonLabel: _propTypes2.default.node,
  yesButtonLabel: _propTypes2.default.node,

  renderFooter: _propTypes2.default.func,
  buttons: _propTypes2.default.arrayOf(_propTypes2.default.node)
};

exports.default = MessageWindow;
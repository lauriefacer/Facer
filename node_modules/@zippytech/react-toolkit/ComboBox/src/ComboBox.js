'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.REMAINING_ITEMS = undefined;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('react-dom');

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _cleanProps = require('../../common/cleanProps');

var _cleanProps2 = _interopRequireDefault(_cleanProps);

var _NotifyResize = require('../../NotifyResize');

var _throttle = require('../../common/throttle');

var _throttle2 = _interopRequireDefault(_throttle);

var _containsNode = require('../../common/containsNode');

var _containsNode2 = _interopRequireDefault(_containsNode);

var _TextInput = require('./TextInput');

var _TextInput2 = _interopRequireDefault(_TextInput);

var _Value = require('./Value');

var _Value2 = _interopRequireDefault(_Value);

var _ClearButton = require('./ClearButton');

var _ClearButton2 = _interopRequireDefault(_ClearButton);

var _ToggleButton = require('./ToggleButton');

var _ToggleButton2 = _interopRequireDefault(_ToggleButton);

var _List = require('./List');

var _List2 = _interopRequireDefault(_List);

var _Icons = require('./Icons');

var _shouldComponentUpdate2 = require('./utils/shouldComponentUpdate');

var _shouldComponentUpdate3 = _interopRequireDefault(_shouldComponentUpdate2);

var _getRootClassName = require('./utils/getRootClassName');

var _getRootClassName2 = _interopRequireDefault(_getRootClassName);

var _getListProps2 = require('./utils/getListProps');

var _getListProps3 = _interopRequireDefault(_getListProps2);

var _getValueProps2 = require('./utils/getValueProps');

var _getValueProps3 = _interopRequireDefault(_getValueProps2);

var _getDataProp = require('./utils/getDataProp');

var _getDataProp2 = _interopRequireDefault(_getDataProp);

var _getNewMultipleValue = require('./utils/getNewMultipleValue');

var _getNewMultipleValue2 = _interopRequireDefault(_getNewMultipleValue);

var _getNewSingleValue = require('./utils/getNewSingleValue');

var _getNewSingleValue2 = _interopRequireDefault(_getNewSingleValue);

var _findItemIndex = require('./utils/findItemIndex');

var _findItemIndex2 = _interopRequireDefault(_findItemIndex);

var _filterByValue = require('./utils/filterByValue');

var _filterByValue2 = _interopRequireDefault(_filterByValue);

var _filterByText = require('./utils/filterByText');

var _filterByText2 = _interopRequireDefault(_filterByText);

var _deselectValue = require('./utils/deselectValue');

var _deselectValue2 = _interopRequireDefault(_deselectValue);

var _getNewActiveTagOnRemove = require('./utils/getNewActiveTagOnRemove');

var _getNewActiveTagOnRemove2 = _interopRequireDefault(_getNewActiveTagOnRemove);

var _getNextItem = require('./utils/getNextItem');

var _getNextItem2 = _interopRequireDefault(_getNextItem);

var _groupItems = require('./utils/groupItems');

var _groupItems2 = _interopRequireDefault(_groupItems);

var _getValueMap = require('./utils/getValueMap');

var _getValueMap2 = _interopRequireDefault(_getValueMap);

var _getGroups = require('./utils/getGroups');

var _getGroups2 = _interopRequireDefault(_getGroups);

var _registerHideOnClickOutsideEventListener = require('../../common/registerHideOnClickOutsideEventListener');

var _registerHideOnClickOutsideEventListener2 = _interopRequireDefault(_registerHideOnClickOutsideEventListener);

var _PaginationToolbar = require('../../PaginationToolbar');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Copyright (c) 2015-present, Zippy Technologies
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * This source code is licensed under the MIT license found in the
file in the root directory of this source tree.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */

var REMAINING_ITEMS = 'REMAINING_ITEMS';

var emptyObject = {};

var ZippyComboBox = function (_Component) {
  _inherits(ZippyComboBox, _Component);

  function ZippyComboBox(props) {
    _classCallCheck(this, ZippyComboBox);

    var _this = _possibleConstructorReturn(this, (ZippyComboBox.__proto__ || Object.getPrototypeOf(ZippyComboBox)).call(this, props));

    _this.refTools = function (tools) {
      _this.toolsNode = tools;
    };

    _this.state = {
      loading: props.defaultLoading || !!(props.dataSource && props.dataSource.then),
      value: props.defaultValue,
      /**
       * It holds items about the value.
       * This is usefull when the selected value
       * is no longer presnet inside the datasource.
       */
      valueMap: {},
      text: props.defaultText,
      activeTag: props.defaultActiveTag,
      activeItem: props.defaultActiveItem || !props.multiple && props.defaultValue,
      expanded: props.defaultExpanded,
      toolsSize: { width: 0, height: 0 },
      over: false,
      focus: false
    };

    _this.getData = _this.getData.bind(_this);
    _this.handleItemClick = _this.handleItemClick.bind(_this);
    _this.handleTextChange = _this.handleTextChange.bind(_this);
    _this.handleTextInputClick = _this.handleTextInputClick.bind(_this);
    _this.handleTagClick = _this.handleTagClick.bind(_this);
    _this.handleRemoveTag = _this.handleRemoveTag.bind(_this);
    _this.handleComboClick = _this.handleComboClick.bind(_this);
    _this.handleComboKeyDown = _this.handleComboKeyDown.bind(_this);
    _this.handleComboFocus = _this.handleComboFocus.bind(_this);
    _this.handleComboBlur = _this.handleComboBlur.bind(_this);
    _this.getComboNode = _this.getComboNode.bind(_this);
    _this.clear = _this.clear.bind(_this);
    _this.handleMouseEnter = _this.handleMouseEnter.bind(_this);
    _this.handleMouseLeave = _this.handleMouseLeave.bind(_this);
    _this.toggleExpand = _this.toggleExpand.bind(_this);
    _this.handleToolsSize = _this.handleToolsSize.bind(_this);
    _this.handleRemoveMultipleTag = _this.handleRemoveMultipleTag.bind(_this);
    _this.handleListScrollBottom = _this.handleListScrollBottom.bind(_this);

    _this.handleDelete = _this.handleDelete.bind(_this);
    _this.getListNode = _this.getListNode.bind(_this);

    _this.updateGetIdProperty();
    _this.updateGetDisplayProperty();
    _this.updateGetFilterProperty();

    _this.addTextInputRef = function (ref) {
      _this.textInput = ref;
    };
    _this.addRootRef = function (ref) {
      _this.comboNode = ref;
    };
    _this.addListRef = function (ref) {
      _this.listNode = ref;
    };

    /**
     * setActiveItem can be slow when holding arrow up or down pressed
     */
    _this.setActiveItem = (0, _throttle2.default)(_this.setActiveItem, 16);
    return _this;
  }

  _createClass(ZippyComboBox, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      if (this.props.autoFocus) {
        this.focus();
      }

      if (this.state.activeItem && this.state.activeItemIndex == null) {
        this.setState({
          activeItemIndex: this.getItemIndexById(this.state.activeItem)
        });
      }

      if (!this.isRemoteFilter()) {
        this.doFilter();
      }
    }
  }, {
    key: 'shouldComponentUpdate',
    value: function shouldComponentUpdate(nextProps, nextState) {
      return (0, _shouldComponentUpdate3.default)(this, nextProps, nextState);
    }
  }, {
    key: 'UNSAFE_componentWillReceiveProps',
    value: function UNSAFE_componentWillReceiveProps(nextProps) {
      if (nextProps.dataSource !== this.props.dataSource) {
        this.loadDataSource(nextProps.dataSource, nextProps);
      }

      if (this.props.idProperty !== nextProps.idProperty) {
        this.updateGetIdProperty();
      }

      if (this.props.displayProperty !== nextProps.displayProperty) {
        this.updateGetDisplayProperty();
      }

      if (this.props.filterProperty !== nextProps.filterProperty) {
        this.updateGetFilterProperty();
      }

      if (this.isExpandedControlled() && this.props.expanded !== nextProps.expanded) {
        this.onExpand();
      }

      if (this.props.groupProperty !== nextProps.groupProperty) {
        this.updateGroups({ groupProperty: nextProps.groupProperty });
      }

      if (this.isActiveItemControlled() && this.props.changeValueOnNavigation && !this.props.multiple && this.props.activeItem !== nextProps.activeItem) {
        this.setValue(nextProps.activeItem, { action: 'navigate' });
      }

      if (this.isExpandedControlled() && !this.props.expanded && nextProps.expanded) {
        this.loadLazyDataSource({ action: 'expand', text: '' });
      }

      /**
       * if text is controlled, and it changed
       * do text change specific operations
       */
      if (this.isTextControled() && this.props.text !== nextProps.text) {
        this.onTextUpdate(nextProps.text);
      }
    }
  }, {
    key: 'UNSAFE_componentWillMount',
    value: function UNSAFE_componentWillMount() {
      if (!this.props.lazyDataSource) {
        this.loadDataSource(this.props.dataSource);
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var props = this.props,
          state = this.state;

      /**
       * Input must be declared here because
       * it can be rendered inside Value or inside List
       * depeinding on it's position
       */

      var textInput = this.renderTextInput();

      var className = (0, _getRootClassName2.default)({
        props: props,
        state: state,
        computed: {
          value: this.getValue()
        }
      });
      var expanded = this.getExpanded();

      // items, related to tags
      var items = this.getSelectedItems();
      var groupedItems = this.groupedItems = this.getGroupedItems(this.getSelectedItems());

      this.areItemsGrouped = this.groupedItems && this.groupedItems.remainingItems && this.groupedItems.remainingItems.length;

      var style = this.getRootStyle();

      var filteredData = this.getFilteredData();
      var text = this.getText();
      this.isNewCustomTagValid = (!filteredData || filteredData.length === 0) && !!text && props.allowCustomTagCreation;

      return _react2.default.createElement(
        'div',
        _extends({}, (0, _cleanProps2.default)(props, ZippyComboBox.propTypes), {
          onClick: this.handleComboClick,
          onMouseDown: this.handleComboMouseDown,
          onKeyDown: this.handleComboKeyDown,
          onFocus: this.handleComboFocus,
          onBlur: this.handleComboBlur,
          className: className,
          style: style,
          ref: this.addRootRef,
          onMouseEnter: this.handleMouseEnter,
          onMouseLeave: this.handleMouseLeave
        }),
        _react2.default.createElement(_Value2.default, _extends({}, this.getValueProps({ items: items, groupedItems: groupedItems }), {
          textInput: textInput,
          toolsSize: state.toolsSize
        })),
        _react2.default.createElement(
          'div',
          { className: props.rootClassName + '__tools', ref: this.refTools },
          this.renderSpinner(),
          this.renderClearIcon(),
          this.renderToggleIcon(),
          // only render notify resize if tags have ellipsis
          this.props.tagEllipsis && _react2.default.createElement(_NotifyResize.NotifyResize, { notifyOnMount: true, onResize: this.handleToolsSize })
        ),
        expanded && this.renderList()
      );
    }
  }, {
    key: 'getRootStyle',
    value: function getRootStyle() {
      var props = this.props,
          state = this.state;

      var style = _extends({}, props.style);

      if (props.borderRadius) {
        style.borderRadius = props.borderRadius;
      }
      if (props.padding) {
        style.padding = props.padding;
      }
      if (props.border) {
        style.border = props.border;
      }
      if (props.background) {
        style.background = props.background;
      }
      if (!this.getValue() && props.emptyStyle) {
        style = _extends({}, style, props.emptyStyle);
      }
      if (props.disabledStyle && props.disabled) {
        style = _extends({}, style, props.disabledStyle);
      }
      if (state.focus && props.focusedStyle) {
        style = _extends({}, style, props.focusedStyle);
      }

      return style;
    }
  }, {
    key: 'renderList',
    value: function renderList() {
      var listProps = this.getListProps();

      var result = void 0;
      if (typeof this.props.renderList === 'function') {
        result = this.props.renderList({
          domProps: listProps,
          items: this.getFilteredData()
        });
      }

      if (result === undefined) {
        result = _react2.default.createElement(_List2.default, listProps);
      }

      return result;
    }
  }, {
    key: 'renderClearIcon',
    value: function renderClearIcon() {
      var props = this.props,
          state = this.state;
      var searchable = props.searchable;

      var text = this.getText();
      var value = this.getValue();

      var showClearIcon = (text || value != null) && props.clearIcon;

      if (props.showClearIconOnMouseOver) {
        if (!state.over) {
          showClearIcon = false;
        }
      }
      if (searchable === false) {
        showClearIcon = false;
      }
      if (!showClearIcon) {
        return null;
      }

      var clearButton = _react2.default.createElement(_ClearButton2.default, {
        onClear: this.clear,
        closeIcon: props.clearIcon,
        className: props.rootClassName + '__clear-icon'
      });

      return clearButton;
    }
  }, {
    key: 'renderToggleIcon',
    value: function renderToggleIcon() {
      var props = this.props;


      if (!props.toggleIcon) {
        return null;
      }

      return _react2.default.createElement(_ToggleButton2.default, {
        onToggle: this.toggleExpand,
        className: props.rootClassName + '__toggle-icon',
        toggleIcon: props.toggleIcon,
        expanded: this.getExpanded()
      });
    }

    // renders

  }, {
    key: 'renderTextInput',
    value: function renderTextInput() {
      if (this.props.disabled) {
        return null;
      }

      var text = this.getText();
      var value = text;

      if (!this.props.multiple) {
        if (text == null) {
          value = this.getValue() == null ? '' : this.getItemLabel();
        } else {
          value = text;
        }
      }

      var data = this.getFilteredData();
      var suggestion = null;
      if (this.props.minAutocompleteLength <= (value && value.length) && data && data[0]) {
        suggestion = this.getDisplayProperty(data[0]);
      }

      var inputProps = {
        key: 'text_input',
        value: value,
        suggestion: suggestion,
        placeholder: this.props.placeholder,
        rootClassName: this.props.rootClassName + '__input',
        className: this.props.inputClassName,
        style: this.props.inputStyle,
        onChange: this.handleTextChange,
        ref: this.addTextInputRef,
        onClick: this.handleTextInputClick,
        throttle: this.props.filterDelay,
        autocomplete: this.props.autocomplete,
        tabIndex: this.props.tabIndex,
        autocompleteDelay: this.props.autocompleteDelay,
        searchable: this.props.searchable
      };

      var result = void 0;
      if (typeof this.props.renderInput === 'function') {
        result = this.props.renderInput({
          text: text,
          domProps: inputProps,
          onChange: inputProps.onChange
        });
      }

      if (result === undefined) {
        result = _react2.default.createElement(_TextInput2.default, inputProps);
      }

      return result;
    }
  }, {
    key: 'renderSpinner',
    value: function renderSpinner() {
      if (!this.props.loadingSpinner) {
        return null;
      }

      var loading = this.getLoading();

      if (!loading && !this.getExpanded()) {
        return null;
      }

      var spinner = this.props.loadingSpinner === true ? _react2.default.createElement(_Icons.LoadingIcon, {
        className: this.props.rootClassName + '__loading-spinner'
      }) : this.props.loadingSpinner;

      return loading ? spinner : (0, _react.cloneElement)(spinner, {
        style: spinner.props.style ? _extends({}, spinner.props.style, { display: 'none' }) : { display: 'none' }
      });
    }

    // props getters

  }, {
    key: 'getListProps',
    value: function getListProps() {
      var props = this.props,
          state = this.state;

      var data = this.getFilteredData();
      var groupsLength = this.state.groups && Object.keys(this.state.groups).length || 0;

      var listProps = (0, _getListProps3.default)({
        props: props,
        state: state,
        computed: {
          data: data,
          loading: this.getLoading(),
          activeItem: this.getActiveItem(),
          value: this.getValue(),
          dataLength: data && data.length + groupsLength || 0,
          getIdProperty: this.getIdProperty,
          getDisplayProperty: this.getDisplayProperty,
          onItemClick: this.handleItemClick,
          getComboNode: this.getComboNode,
          ref: this.addListRef,
          onScrollBottom: this.handleListScrollBottom,
          text: this.getText(),
          isNewCustomTagValid: this.isNewCustomTagValid
        }
      });

      return listProps;
    }
  }, {
    key: 'getValueProps',
    value: function getValueProps(_ref) {
      var items = _ref.items,
          groupedItems = _ref.groupedItems,
          item = _ref.item;
      var props = this.props,
          state = this.state;

      var value = this.getValue();

      return (0, _getValueProps3.default)({
        props: props,
        state: state,
        computed: {
          items: items,
          item: item,
          groupedItems: groupedItems,
          value: value,
          label: this.getItemLabel(),
          activeTag: this.getActiveTag()
        },
        tagProps: {
          activeStyle: props.tagActiveStyle,
          onClick: this.handleTagClick,
          onCloseTagClick: this.handleRemoveTag,
          onMultipleTagClose: this.handleRemoveMultipleTag
        }
      });
    }

    // data

  }, {
    key: 'loadDataSource',
    value: function loadDataSource(dataSource) {
      var _this2 = this;

      var props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.props;

      var _ref2 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : emptyObject,
          appendTo = _ref2.appendTo,
          action = _ref2.action,
          value = _ref2.value,
          text = _ref2.text,
          skip = _ref2.skip,
          limit = _ref2.limit,
          hasNextPage = _ref2.hasNextPage;

      if (Array.isArray(dataSource)) {
        if (this.getLoading()) {
          this.setLoading(false);
        }
        this.setData(dataSource, props, { appendTo: appendTo });
        return;
      }
      if (dataSource && Array.isArray(dataSource.data)) {
        if (this.getLoading()) {
          this.setLoading(false);
        }
        this.setData(dataSource.data, props, {
          remoteCount: dataSource.count != null ? dataSource.count * 1 : null,
          appendTo: appendTo
        });
        return;
      }

      if (dataSource && dataSource.then) {
        this.setLoading(true);

        dataSource.then(function (data) {
          _this2.props.onDataSourceLoad(data);
          _this2.loadDataSource(data, props, { appendTo: appendTo });
        });
        return;
      }

      if (typeof dataSource === 'function') {
        var config = _extends({}, props, {
          data: this.state.data,
          hasNextPage: hasNextPage !== undefined ? hasNextPage : this.hasNextPage(),
          text: this.isRemoteFilter() ? text !== undefined ? text : this.getText() : undefined,
          skip: skip || 0,
          action: action,
          append: !!appendTo,
          value: value !== undefined ? value : this.getValue(),
          limit: limit !== undefined ? limit : this.props.limit
        });
        var dataResult = dataSource(config);
        this.loadDataSource(dataResult, undefined, {
          appendTo: config.append === false ? null : appendTo
        });
      }

      if (!dataSource) {
        this.setData(null, props);
      }
    }
  }, {
    key: 'setData',
    value: function setData(data) {
      var _this3 = this;

      var props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.props;

      var _ref3 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : emptyObject,
          remoteCount = _ref3.remoteCount,
          appendTo = _ref3.appendTo;

      if (!data) {
        this.setState({
          data: null,
          dataMap: null,
          filteredData: null,
          remoteCount: null
        });
        return null;
      }

      if (Array.isArray(appendTo)) {
        data = appendTo.concat(data);
      }

      var dataMap = data.reduce(function (acc, item) {
        acc[_this3.getIdProperty(item)] = item;
        return acc;
      }, {});

      if (props.groupProperty) {
        this.updateGroups({ data: data, groupProperty: props.groupProperty });
      }

      // update value map
      this.updateValueMap({
        value: this.getValue(props),
        dataMap: dataMap,
        oldValueMap: this.getValueMap()
      });

      this.updateFilteredData({ data: data });

      this.setState({
        data: data,
        dataMap: dataMap,
        remoteCount: remoteCount
      });
    }
  }, {
    key: 'getPageCount',
    value: function getPageCount() {
      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props;

      var count = this.getDataCountForPagination(props);

      return (0, _PaginationToolbar.getPageCount)({ count: count, limit: props.limit });
    }
  }, {
    key: 'hasNextPage',
    value: function hasNextPage() {
      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props;

      return this.getCurrentPage(props) < this.getPageCount(props);
    }
  }, {
    key: 'getCurrentPage',
    value: function getCurrentPage() {
      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props;
      var limit = props.limit,
          skip = props.skip;


      return (0, _PaginationToolbar.getCurrentPage)({
        skip: this.previousSkip ? this.previousSkip : 0,
        limit: limit
      });
    }
  }, {
    key: 'isLastPage',
    value: function isLastPage() {
      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props;
    }
  }, {
    key: 'getDataCountForPagination',
    value: function getDataCountForPagination() {
      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props;

      var data = this.getData();
      var count = this.isPaginationEnabled(props) ? props.remoteCount || this.state.remoteCount : data ? data.length : 0;

      return count || 0;
    }
  }, {
    key: 'getFilteredData',
    value: function getFilteredData() {
      return this.state.filteredData;
    }
  }, {
    key: 'getData',
    value: function getData() {
      return this.state.data;
    }

    // async data source

  }, {
    key: 'loadLazyDataSource',
    value: function loadLazyDataSource(_ref4) {
      var action = _ref4.action,
          text = _ref4.text;

      if (!this.props.lazyDataSource) {
        return null;
      }

      var params = {
        action: action,
        text: text,
        value: this.getValue()
      };

      this.setData(null);
      this.loadDataSource(this.props.dataSource, undefined, params);

      return null;
    }
  }, {
    key: 'isPaginationEnabled',
    value: function isPaginationEnabled() {
      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props;

      var hasLoadNextPage = typeof props.loadNextPage === 'function';
      var hasFunctionalDataSource = typeof props.dataSource === 'function';

      if (props.enablePagination === false) {
        return false;
      }

      return props.enablePagination ? hasLoadNextPage || hasFunctionalDataSource : hasLoadNextPage;
    }
  }, {
    key: 'remoteFilterData',
    value: function remoteFilterData() {
      var _ref5 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
          _ref5$text = _ref5.text,
          text = _ref5$text === undefined ? this.getText() : _ref5$text,
          _ref5$value = _ref5.value,
          value = _ref5$value === undefined ? this.getValue() : _ref5$value,
          filterType = _ref5.filterType;

      this.previousSkip = null;

      this.loadDataSource(this.props.dataSource, undefined, {
        text: text,
        skip: 0
      });
    }

    // pagination

  }, {
    key: 'loadNextPage',
    value: function loadNextPage() {
      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props;

      var filteredData = this.getFilteredData();
      if (filteredData && filteredData.length < 3) {
        return null;
      }

      if (this.previousSkip == null) {
        this.previousSkip = props.skip;
      }
      var limit = props.limit;
      var hasNextPage = this.hasNextPage();
      var newSkip = this.previousSkip + limit;
      this.previousSkip = newSkip;

      if (!this.isPaginationEnabled()) {
        return;
      }
      var fn = typeof props.dataSource === 'function' ? props.dataSource : null;

      if (fn && hasNextPage) {
        var currentData = this.state.data;

        this.loadDataSource(this.props.dataSource, undefined, {
          appendTo: currentData,
          hasNextPage: hasNextPage,
          skip: newSkip,
          limit: limit,
          filter: this.currentFilter
        });
      }
    }
  }, {
    key: 'isRemoteDataSource',
    value: function isRemoteDataSource() {
      return typeof this.props.dataSource === 'function';
    }
  }, {
    key: 'isRemoteFilter',
    value: function isRemoteFilter() {
      return _typeof(this.isRemoteDataSource()) && this.props.remoteFilter;
    }
  }, {
    key: 'doFilter',
    value: function doFilter() {
      var _ref6 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
          text = _ref6.text,
          value = _ref6.value,
          force = _ref6.force,
          data = _ref6.data,
          filterType = _ref6.filterType,
          action = _ref6.action;

      if (this.currentFilter === text && !force) {
        return;
      }

      this.currentFilter = text;

      if (this.isRemoteFilter()) {
        if (action === 'select') {
          return;
        }
        this.remoteFilterData({ value: value, text: text, filterType: filterType });
      } else {
        this.updateFilteredData({
          text: text,
          value: value,
          data: data,
          filterType: filterType
        });
      }
    }
  }, {
    key: 'updateFilteredData',
    value: function updateFilteredData() {
      var _ref7 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
          _ref7$text = _ref7.text,
          text = _ref7$text === undefined ? this.getText() : _ref7$text,
          _ref7$value = _ref7.value,
          value = _ref7$value === undefined ? this.getValue() : _ref7$value,
          _ref7$data = _ref7.data,
          data = _ref7$data === undefined ? this.state.data : _ref7$data,
          filterType = _ref7.filterType;

      var filteredData = data;

      if (!Array.isArray(filteredData)) {
        return filteredData;
      }

      if (!this.isRemoteFilter()) {
        filteredData = this.filterDataByText({ text: text, data: filteredData });
        filteredData = this.filterDataByValue({
          value: value,
          text: text,
          data: filteredData
        });
      }

      // to check if the data is actualy filtered check the length
      var isFilteredByText = filterType === 'text' && data.length !== filteredData.length;
      if (isFilteredByText && this.props.activeFirstItemOnFilter) {
        var firstItem = filteredData && filteredData[0];
        if (firstItem) {
          var id = this.getIdProperty(firstItem);
          this.setActiveItem(id);
        } else {
          // clear active item
          this.setActiveItem(null);
        }
      }

      this.setState({
        filteredData: filteredData
      });
    }
  }, {
    key: 'filterDataByValue',
    value: function filterDataByValue(_ref8) {
      var _ref8$value = _ref8.value,
          value = _ref8$value === undefined ? this.getValue() : _ref8$value,
          _ref8$data = _ref8.data,
          data = _ref8$data === undefined ? this.state.data : _ref8$data;

      if (!Array.isArray(data)) {
        return data;
      }
      var newData = data;
      if (data && value && this.props.removeSelectedItems) {
        newData = (0, _filterByValue2.default)({
          data: newData,
          getIdProperty: this.getIdProperty,
          value: value
        });
      }

      return newData;
    }
  }, {
    key: 'filterDataByText',
    value: function filterDataByText(_ref9) {
      var _ref9$text = _ref9.text,
          text = _ref9$text === undefined ? this.getText() : _ref9$text,
          _ref9$data = _ref9.data,
          data = _ref9$data === undefined ? this.state.data : _ref9$data;

      if (!data || !text) {
        return data;
      }
      var newData = data;
      if (this.isFilterTextActive()) {
        var filterFunction = this.props.filterFunction;
        newData = (0, _filterByText2.default)({
          data: data,
          text: text,
          filterFunction: filterFunction,
          getFilterProperty: this.getFilterProperty || this.getDisplayProperty,
          mode: this.props.filterMode,
          hightlight: this.props.highlightMatchedText
        });
      }

      return newData;
    }
  }, {
    key: 'getDataMap',
    value: function getDataMap() {
      return this.state.dataMap;
    }
  }, {
    key: 'getValueMap',
    value: function getValueMap() {
      return this.state.valueMap;
    }

    // value

  }, {
    key: 'isValueControlled',
    value: function isValueControlled() {
      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props;

      return props.value !== undefined;
    }
  }, {
    key: 'getValue',
    value: function getValue() {
      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props;

      return this.isValueControlled(props) ? props.value : this.state.value;
    }
  }, {
    key: 'setValue',
    value: function setValue(newValue) {
      var _ref10 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
          action = _ref10.action;

      if (this.props.disabled) {
        return null;
      }
      if (this.props.readOnly) {
        return null;
      }

      if (this.props.maxValueLength && newValue && newValue.length > this.props.maxValueLength) {
        return null;
      }

      // should not collapse when value changes by navigation with arrows
      if (this.props.collapseOnSelect && action !== 'navigate') {
        this.collapse();
      }

      if (this.props.autoBlur) {
        this.blur();
      }

      if (!this.isValueControlled()) {
        this.setState({
          value: newValue
        });
      }

      this.setText(null, { skipFilter: true });

      this.updateValueMap({ value: newValue });
      this.props.onChange(newValue);
    }
  }, {
    key: 'isFilterTextActive',
    value: function isFilterTextActive() {
      var text = this.getText();
      var data = this.getFilteredData();
      return data && text && this.props.searchable && text.length >= this.props.filterMinLength;
    }

    /**
     * If there is no data, let the value it'self describe the item
     * this is usefull in case of tags or when dataSource changes,
     * there is no asociated data width an id.
     */

  }, {
    key: 'updateValueMap',
    value: function updateValueMap(_ref11) {
      var _this4 = this;

      var value = _ref11.value,
          dataMap = _ref11.dataMap,
          oldValueMap = _ref11.oldValueMap;

      var newValueMap = (0, _getValueMap2.default)({
        value: value,
        dataMap: dataMap || this.getDataMap(),
        oldValueMap: oldValueMap || this.getValueMap()
      });

      // must normalize and add id and label
      if (newValueMap) {
        newValueMap = Object.keys(newValueMap).reduce(function (acc, id) {
          var item = newValueMap[id];
          acc[id] = _extends({}, item, {
            id: _this4.getIdProperty(item) || item,
            label: _this4.getDisplayProperty(item) || item
          });

          return acc;
        }, {});
      }

      this.setState({
        valueMap: newValueMap
      });
    }
  }, {
    key: 'selectItem',
    value: function selectItem(id) {
      var dataMap = this.getDataMap();
      var item = dataMap && dataMap[id];
      if (!item && !this.props.allowCustomTagCreation) {
        return null;
      }

      if (typeof this.props.isSelectedItemValid === 'function') {
        var isItemValid = this.props.isSelectedItemValid(item);
        if (!isItemValid) {
          return null;
        }
      }

      var value = this.getValue();
      var newValue = void 0;

      // multiselect - if value is new, add, if exists remove
      if (this.props.multiple) {
        newValue = (0, _getNewMultipleValue2.default)({ id: id, value: value });
      } else {
        newValue = (0, _getNewSingleValue2.default)({
          id: id,
          value: value,
          toggle: this.props.changeValueOnNavigation ? false : this.props.allowSelectionToggle
        });
      }

      this.setValue(newValue, { action: 'select' });
      this.props.onItemClick({ item: item, id: id });
    }
  }, {
    key: 'deselectItem',
    value: function deselectItem(id) {
      var value = this.getValue();
      var newValue = (0, _deselectValue2.default)({
        id: id,
        value: value,
        getIdProperty: this.getIdProperty
      });

      this.setValue(newValue);
    }
  }, {
    key: 'deselectItems',
    value: function deselectItems() {
      var _this5 = this;

      var ids = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

      var value = this.getValue();
      var newValue = ids.reduce(function (acc, id) {
        acc = (0, _deselectValue2.default)({
          id: id,
          value: acc,
          getIdProperty: _this5.getIdProperty
        });
        return acc;
      }, value);

      this.setValue(newValue);
    }

    // expanded

  }, {
    key: 'getExpanded',
    value: function getExpanded() {
      return this.isExpandedControlled() ? this.props.expanded : this.expanded != null ? this.expanded : this.state.expanded;
    }
  }, {
    key: 'isExpandedControlled',
    value: function isExpandedControlled() {
      return this.props.expanded !== undefined;
    }
  }, {
    key: 'setExpanded',
    value: function setExpanded(expanded) {
      var _this6 = this;

      if (this.expandedPromise) {
        this.expandedPromise.then(function (result) {
          if (_this6.getExpanded() !== expanded) {
            _this6.setExpanded(expanded);
          }
        });
        return;
      }

      this.expandedPromise = this.doSetExpanded(expanded).then(function () {
        delete _this6.expandedPromise;
      });
    }
  }, {
    key: 'doSetExpanded',
    value: function doSetExpanded(expanded) {
      var _this7 = this;

      if (this.props.disabled) {
        return Promise.resolve(null);
      }

      var currentExpanded = this.getExpanded();
      if (currentExpanded === expanded) {
        return Promise.resolve(expanded);
      }

      if (!expanded && this.isRemoteFilter()) {
        this.previousSkip = null;
      }

      global.requestAnimationFrame(function () {
        if (_this7.toolsNode) {
          _this7.handleToolsSize();
        }
      });

      var promise = void 0;
      if (!this.isExpandedControlled()) {
        promise = new Promise(function (resolve, reject) {
          _this7.setState({ expanded: expanded }, function () {
            resolve(expanded);
          });
        });
      } else {
        promise = Promise.resolve(expanded);
      }

      if (expanded) {
        if (this.isRemoteDataSource() && this.state.data === undefined) {
          // load the data initially
          this.loadDataSource(this.props.dataSource);
        } else {
          if (this.wasExpandedAtLeastOnce) {
            // so on non async remote datasources we dont refetch the data source on the initial expand
            // since it was already fetched on mount
            this.doFilter({ text: '', action: 'expand', force: true });
          }
        }
      }

      if (expanded && !this.wasExpandedAtLeastOnce) {
        this.wasExpandedAtLeastOnce = true;
      }

      if (expanded) {
        this.onExpand();
      } else {
        this.props.onCollapse();
      }

      this.props.onExpandChange(expanded);
      this.props.onExpandedChange(expanded);

      return promise;
    }

    /**
     * I need to overwrite this event, and also
     * this event will be called when controlled expand
     * changes
     */

  }, {
    key: 'onExpand',
    value: function onExpand() {
      this.props.onExpand();

      if (this.props.highlightFirst) {
        var activeItem = this.getActiveItem();
        if (!activeItem) {
          var firstItem = this.getItemByIndex(0);
          if (firstItem) {
            var id = this.getIdProperty(firstItem);
            this.setActiveItem(id);
          }
        }
      }
    }

    // active

  }, {
    key: 'isActiveTagControlled',
    value: function isActiveTagControlled() {
      return this.props.activeTag !== undefined;
    }
  }, {
    key: 'setActiveTag',
    value: function setActiveTag(id) {
      if (this.props.disabled) {
        return null;
      }
      if (!this.isActiveTagControlled()) {
        this.setState({
          activeTag: id
        });
      }

      this.props.onActiveTagChange(id);
    }
  }, {
    key: 'deselectActiveTag',
    value: function deselectActiveTag() {
      var activeTag = this.getActiveTag();
      if (activeTag) {
        this.setActiveTag(null);
      }
    }
  }, {
    key: 'getActiveTag',
    value: function getActiveTag() {
      return this.isActiveTagControlled() ? this.props.activeTag : this.state.activeTag;
    }
  }, {
    key: 'getSelectedItems',
    value: function getSelectedItems() {
      var _this8 = this;

      var valueMap = this.getValueMap();
      var value = this.getValue();
      var items = null;

      if (value) {
        value = Array.isArray(value) ? value : [value];
        items = value.map(function (id) {
          return valueMap[id] || {
            id: (typeof id === 'undefined' ? 'undefined' : _typeof(id)) === 'object' ? _this8.getIdProperty(id) : id,
            label: (typeof id === 'undefined' ? 'undefined' : _typeof(id)) === 'object' ? _this8.getDisplayProperty(id) : id
          };
        });
      }

      return items;
    }
  }, {
    key: 'getItemLabel',
    value: function getItemLabel(id) {
      if (this.props.multiple) {
        return null;
      }
      id = id === undefined ? this.getValue() : id;

      var valueMap = this.getValueMap();
      var dataMap = this.getDataMap();
      var label = void 0;

      if (valueMap && valueMap[id]) {
        label = valueMap[id].label;
      } else if (dataMap && dataMap[id]) {
        label = this.getDisplayProperty(dataMap[id]);
      }
      if (label === undefined) {
        label = this.props.defaultDisplayValue !== undefined && id != null ? this.props.defaultDisplayValue : id;
      }

      return label;
    }
  }, {
    key: 'getGroupedItems',
    value: function getGroupedItems(items) {
      var maxTagsLength = this.props.maxTagsLength;

      if (maxTagsLength == null || !items) {
        return null;
      }

      /**
       * It assumes that it receives items
       * with added id and label property
       */
      return (0, _groupItems2.default)({ maxTagsLength: maxTagsLength, items: items });
    }

    // active list item - list navigation

  }, {
    key: 'isActiveItemControlled',
    value: function isActiveItemControlled() {
      return this.props.activeItem !== undefined;
    }
  }, {
    key: 'setActiveItem',
    value: function setActiveItem(id) {
      if (this.props.disabled) {
        return null;
      }
      var activeItem = this.getActiveItem();
      if (activeItem === id) {
        return null;
      }

      if (!this.isActiveItemControlled()) {
        var activeItemIndex = null;
        if (id) {
          activeItemIndex = this.getItemIndexById(id);
        }

        this.setState({
          activeItemIndex: activeItemIndex,
          activeItem: id
        });

        if (this.props.changeValueOnNavigation && !this.props.multiple) {
          this.setValue(id, { action: 'navigate' });
        }
      }

      this.scrollToId(id);
      this.props.onActiveItemChange(id);
    }
  }, {
    key: 'getActiveItem',
    value: function getActiveItem() {
      return this.isActiveItemControlled() ? this.props.activeItem : this.state.activeItem;
    }

    // text

  }, {
    key: 'isTextControled',
    value: function isTextControled() {
      return this.props.text != null;
    }
  }, {
    key: 'getText',
    value: function getText() {
      return this.isTextControled() ? this.props.text : this.state.text;
    }
  }, {
    key: 'setText',
    value: function setText(text) {
      var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : emptyObject;
      var callback = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : emptyFn;

      if (typeof config === 'function') {
        callback = config;
        config = emptyObject;
      }

      if (text === this.getText()) {
        callback();
        return;
      }

      if (!this.isTextControled()) {
        this.setStateText(text, config, callback);
      }

      this.props.onTextChange(text);
    }
  }, {
    key: 'setStateText',
    value: function setStateText(text) {
      var _this9 = this;

      var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : emptyObject;
      var callback = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : emptyFn;

      if (typeof config === 'function') {
        callback = config;
        config = emptyObject;
      }

      this.setState({ text: text }, function () {
        _this9.onTextUpdate(text, config);
        callback();
      });
    }
  }, {
    key: 'onTextUpdate',
    value: function onTextUpdate(text) {
      var _ref12 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : emptyObject,
          skipFilter = _ref12.skipFilter;

      this.clearValueOnEmptyIfNecessary(text);

      // filter data
      if (!skipFilter) {
        this.doFilter({ text: text, filterType: 'text' });
      }
    }
  }, {
    key: 'clearValueOnEmptyIfNecessary',
    value: function clearValueOnEmptyIfNecessary(text) {
      if (this.props.clearValueOnEmpty && !this.props.multiple && text === '') {
        this.setValue(null);
      }
    }

    // loading

  }, {
    key: 'getLoading',
    value: function getLoading() {
      return this.isLoadingControlled() ? this.props.loading : this.state.loading;
    }
  }, {
    key: 'isLoadingControlled',
    value: function isLoadingControlled() {
      return this.props.loading != null;
    }
  }, {
    key: 'setLoading',
    value: function setLoading(loading) {
      if (loading === this.state.loading) {
        return;
      }
      if (!this.isLoadingControlled()) {
        this.setState({ loading: loading });
      }

      this.props.onLoadingChange(loading);
    }

    // global events

  }, {
    key: 'handleComboClick',
    value: function handleComboClick(event) {
      // catch any click from combo and prevent default to prevent input from losing focus
      event.preventDefault();

      if (this.props.toggleExpandOnClick) {
        this.toggleExpand();
      } else if (this.props.expandOnClick) {
        this.expand();
      }

      if (this.props.focusOnClick && !this.hasFocus()) {
        this.focus();
      }
    }
  }, {
    key: 'handleMouseEnter',
    value: function handleMouseEnter() {
      this.setState({
        over: true
      });
    }
  }, {
    key: 'handleMouseLeave',
    value: function handleMouseLeave() {
      this.setState({
        over: false
      });
    }
  }, {
    key: 'handleComboFocus',
    value: function handleComboFocus() {
      if (this.props.expandOnFocus) {
        this.expand();
      }

      this.setState({
        focus: true
      });

      this.props.onFocus();
    }
  }, {
    key: 'handleComboBlur',
    value: function handleComboBlur(event) {
      var _this10 = this;

      if (this.isFocused() && event && event.relatedTarget && (0, _containsNode2.default)((0, _reactDom.findDOMNode)(this), event.relatedTarget)) {
        global.requestAnimationFrame(function () {
          _this10.focus();
        });
        return;
      }
      if (this.props.collapseOnBlur) {
        this.collapse();
      }

      if (this.props.clearTextOnBlur) {
        // only clear if we can find the data
        this.setText(null);
      }

      this.setState({
        focus: false
      });

      this.props.onBlur();
    }
  }, {
    key: 'isFocused',
    value: function isFocused() {
      return this.state.focus;
    }

    // list event

  }, {
    key: 'handleItemClick',
    value: function handleItemClick(id) {
      if (!this.isFocused()) {
        this.focus();
      }
      this.setActiveItem(id);
      this.selectItem(id);
    }

    // input events

  }, {
    key: 'handleTextChange',
    value: function handleTextChange(text) {
      var _this11 = this;

      this.deselectActiveTag();
      this.setText(text, { skipFilter: this.props.expandOnTextChange && !this.getExpanded() }, function () {
        /*
         * trigger here expand because
         * the text change that triggers expand should come from
         * a key press and not from when clearing the text
         * or setting the text from the current value
         */
        if (_this11.props.expandOnTextChange) {
          _this11.expand();
        }
      });
    }
  }, {
    key: 'handleTextInputClick',
    value: function handleTextInputClick() {
      this.deselectActiveTag();
    }
  }, {
    key: 'handleRemoveTag',
    value: function handleRemoveTag(id) {
      this.removeTag(id);
    }
  }, {
    key: 'handleRemoveMultipleTag',
    value: function handleRemoveMultipleTag(ids) {
      this.deselectItems(ids);
    }
  }, {
    key: 'handleListScrollBottom',
    value: function handleListScrollBottom() {
      this.loadNextPage();
    }
  }, {
    key: 'removeTag',
    value: function removeTag(id) {
      var dir = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : -1;

      // if it is active than have to change the active tag to next
      // or previous
      var activeTag = this.getActiveTag();
      if (activeTag === id && activeTag != null) {
        var value = this.getValue();
        var newActiveTag = (0, _getNewActiveTagOnRemove2.default)({ id: id, value: value, dir: dir });
        this.setActiveTag(newActiveTag);
      }

      this.deselectItem(id);
    }
  }, {
    key: 'removeRemainingTags',
    value: function removeRemainingTags() {
      var ids = this.groupedItems.remainingItems.map(function (item) {
        return item.id;
      });

      /**
       * Must set active tag last visible tag
       */
      var visibleItems = this.groupedItems.visibleItems;
      var activeTag = this.getActiveTag();

      if (activeTag === REMAINING_ITEMS) {
        var lastItem = Array.isArray(visibleItems) && visibleItems[visibleItems.length - 1];
        if (lastItem) {
          this.setActiveTag(lastItem.id);
        }
      } else {
        this.deselectActiveTag();
      }

      this.removeTags(ids);
    }
  }, {
    key: 'removeTags',
    value: function removeTags(ids) {
      this.deselectItems(ids);
    }
  }, {
    key: 'handleTagClick',
    value: function handleTagClick(id) {
      var activeTag = this.getActiveTag();
      if (activeTag === id) {
        this.setActiveTag(null);
      } else {
        this.setActiveTag(id);
      }

      this.props.onTagClick(this.getItemById(id));

      if (this.props.focusOnClick && !this.hasFocus()) {
        this.focus();
      }
    }
  }, {
    key: 'handleComboMouseDown',
    value: function handleComboMouseDown(event) {
      event.preventDefault();
    }
  }, {
    key: 'handleComboKeyDown',
    value: function handleComboKeyDown(event) {
      /**
       * A new tag can be added if:
       * - no items are found in datasource
       */
      if (this.props.allowCustomTagCreation && event.key === 'Enter') {
        if (this.isNewCustomTagValid) {
          this.selectItem(this.getText());
          this.setText(null);
        }
      }

      if (this.props.enableNavigation) {
        if (this.props.enableListNavigation) {
          switch (event.key) {
            case 'ArrowDown':
              this.navigateToNextItem(1, event);
              break;
            case 'ArrowUp':
              this.navigateToNextItem(-1, event);
              break;
            case 'Enter':
              this.handleEnterKeyPress(event);
              break;
            case 'Space':
              this.selectActiveItem();
              break;
          }
        }

        if (this.props.enableTagNavigation) {
          switch (event.key) {
            case 'ArrowLeft':
              this.navigateToNextTag(-1, event);
              break;
            case 'ArrowRight':
              this.navigateToNextTag(1, event);
              break;
            case 'Backspace':
              this.handleBackspace(event);
              break;
            case 'Delete':
              this.handleDelete(event);
          }
        }
      }

      if (event.key === 'Escape') {
        var expanded = this.getExpanded();
        if (this.props.collapseOnEscape) {
          if (expanded) {
            this.collapse();
          }
        }

        if (!expanded && this.getActiveTag()) {
          this.setActiveTag(null);
        }

        if (!this.props.multiple) {
          this.setText(null);
        }
      }

      if (this.props.onKeyDown) {
        this.props.onKeyDown(event, this);
      }
    }
  }, {
    key: 'navigateToNextItem',
    value: function navigateToNextItem(direction, event) {
      var data = this.getFilteredData();
      if (event && event.preventDefault) {
        event.preventDefault();
      }
      if (this.getExpanded()) {
        var activeItem = this.getActiveItem();
        var newActiveItem = void 0;
        if (activeItem != null) {
          newActiveItem = (0, _getNextItem2.default)({
            direction: direction,
            data: data,
            id: activeItem,
            activeItem: activeItem,
            getIdProperty: this.getIdProperty
          });
        } else {
          var firstItemId = void 0;
          var lastItemId = void 0;
          if (data && data.length) {
            firstItemId = this.getIdProperty(data[0]);
            lastItemId = this.getIdProperty(data[data.length - 1]);
            if (direction && firstItemId != null) {
              newActiveItem = firstItemId;
            }
            if (direction === -1 && lastItemId != null) {
              newActiveItem = lastItemId;
            }
          }
        }

        this.setActiveItem(newActiveItem);
      } else {
        // expand list
        this.expand();
      }
    }
  }, {
    key: 'selectActiveItem',
    value: function selectActiveItem() {
      var activeItem = this.getActiveItem();
      if (activeItem) {
        this.selectItem(activeItem);
      }
    }
  }, {
    key: 'handleEnterKeyPress',
    value: function handleEnterKeyPress(event) {
      var expanded = this.getExpanded();
      // must be sure that list is opened

      if (expanded) {
        this.selectActiveItem();
      }

      var activeItem = this.getActiveItem();
      if (this.props.collapseOnSelectWithEnter) {
        // make sure there won't be a toggle, only collapse when a value
        // is selected
        if (activeItem && expanded) {
          this.collapse();
        }
      }

      if (this.props.navigateToNextAfterSelection && this.props.multiple && activeItem) {
        this.navigateToNextItem(1, event);
      }
    }

    /**
     * Handles tag navigation. Decides whether the
     * navigation should take place taking into account:
     * - if there is a value
     * - position of the cursor inside the value.
     * @return {null}
     */

  }, {
    key: 'navigateToNextTag',
    value: function navigateToNextTag(direction, event) {
      if (!this.isNavigationAllowed(direction)) {
        return null;
      }
      // if navigation is allowed, input key down should not take place
      if (event && event.preventDefault) {
        event.preventDefault();
      }

      var newActiveTag = void 0;

      // none is selected and arrow is left, then select last one
      var items = this.getSelectedItems();
      var itemsIds = void 0;
      if (this.areItemsGrouped) {
        /**
         * Separate grouped items and give them `grouped` id
         */
        var visibleItems = this.groupedItems.visibleItems.map(function (item) {
          return item.id;
        });
        itemsIds = [].concat(_toConsumableArray(visibleItems), [REMAINING_ITEMS]);
      } else {
        itemsIds = items.map(function (item) {
          return item.id;
        });
      }

      var currentActiveTag = this.getActiveTag();
      var currentIndex = itemsIds.indexOf(currentActiveTag);

      var lastIndex = itemsIds.length - 1;
      var lastTag = itemsIds[lastIndex];
      var firstTag = itemsIds[0];

      var isFirstTag = currentIndex === 0;
      var isLastTag = currentIndex === lastIndex;

      if (direction === -1 && isFirstTag) {
        this.setActiveTag(null);
        return null;
      }

      if (direction === 1 && isLastTag) {
        this.setActiveTag(null);
        return null;
      }

      if (currentActiveTag === null || currentIndex === -1) {
        newActiveTag = direction === -1 ? lastTag : firstTag;
      } else {
        // something already active
        if (direction === -1) {
          newActiveTag = isFirstTag ? lastTag : itemsIds[currentIndex - 1];
        } else if (direction === 1) {
          newActiveTag = isLastTag ? firstTag : itemsIds[currentIndex + 1];
        }
      }

      this.setActiveTag(newActiveTag);
      return null;
    }
  }, {
    key: 'isNavigationAllowed',
    value: function isNavigationAllowed(direction) {
      /**
       * Determine if navigation is allowed.
       * - no selection
       * - cursor index must be at 0 position for direction -1
       * - curosr index must be at the end for direction 1
       * - there must be a value
       * - it has to be multiple, so there is what to navigate
       * - and tag navigation should be neabled
       */
      if (!this.props.multiple) {
        return false;
      }

      var inputNode = this.getTextInputNode();
      if (inputNode.hasSelection()) {
        return false;
      }

      var currentActiveTag = this.getActiveTag();

      var canNavigateLeft = inputNode.isCursorAtStartPosition() && direction === -1;
      var canNavigateRight = inputNode.isCursorAtEndPosition() && direction === 1;

      // navigation is also allowed when there is an active element
      if (!canNavigateRight && !canNavigateLeft && !currentActiveTag) {
        return false;
      }

      // const value = this.getValue()
      var items = this.getSelectedItems();
      if (!Array.isArray(items)) {
        return false;
      }

      // if length = 0 then it should be deselected
      if (items.length === 1 && currentActiveTag) {
        this.setActiveTag(null);
        return false;
      }

      return true;
    }

    /**
     * A tag should be deleted if:
     * - there is no selection -> delete the last tag
     * - a tag is active -> delte the active tag
     */

  }, {
    key: 'handleBackspace',
    value: function handleBackspace(event) {
      if (this.props.multiple) {
        this.handleTagBackspaceRemove(event);
      }
    }
  }, {
    key: 'handleDelete',
    value: function handleDelete(event) {
      var activeTag = this.getActiveTag();
      if (this.props.multiple && activeTag) {
        this.removeTag(activeTag, 1);
      }
    }
  }, {
    key: 'handleTagBackspaceRemove',
    value: function handleTagBackspaceRemove(event) {
      if (!this.props.removeTagOnBackspace) {
        return null;
      }

      var value = this.getValue();
      if (!value) {
        return null;
      }

      var activeTag = this.getActiveTag();
      if (activeTag != null) {
        event.preventDefault();
        if (activeTag === REMAINING_ITEMS) {
          this.removeRemainingTags();
        } else {
          this.removeTag(activeTag, -1);
        }
        return null;
      }

      // only when cursor is at first position
      var inputNode = this.getTextInputNode();
      var canDeleteTag = value && value.length && inputNode.isCursorAtStartPosition();

      if (canDeleteTag) {
        /**
         * If there is grouped items, they must be deleted
         */
        if (this.areItemsGrouped) {
          var ids = this.groupedItems.remainingItems.map(function (item) {
            return item.id;
          });
          this.removeTags(ids);
        } else {
          var items = this.getSelectedItems();
          var lastItem = items[items.length - 1]; // value[value.length - 1]
          var lastItemId = lastItem.id;

          if (this.props.keepTagTextOnRemove) {
            var label = lastItem.label;
            if (label && typeof label === 'string') {
              this.setText(label);
            }
          }

          this.removeTag(lastItemId);
        }
      }

      return null;
    }
  }, {
    key: 'handleToolsSize',
    value: function handleToolsSize() {
      var size = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.toolsNode ? this.toolsNode.getBoundingClientRect() : { width: 0, height: 0 };

      var node = (0, _reactDom.findDOMNode)(this);
      var computedStyle = global.getComputedStyle(node);

      var width = size.width + parseInt(computedStyle.paddingLeft, 10) + parseInt(computedStyle.paddingRight, 10);

      this.setState({
        toolsSize: {
          height: size.height,
          width: width
        }
      });
    }

    // methods

  }, {
    key: 'expand',
    value: function expand() {
      this.setExpanded(true);
    }
  }, {
    key: 'collapse',
    value: function collapse() {
      this.setExpanded(false);
    }
  }, {
    key: 'scrollToIndex',
    value: function scrollToIndex(index) {
      var listNode = this.getListNode();
      return listNode && listNode.scrollToIndex(index);
    }
  }, {
    key: 'getItemIndexById',
    value: function getItemIndexById(id) {
      var index = (0, _findItemIndex2.default)({
        id: id,
        data: this.getFilteredData(),
        getIdProperty: this.getIdProperty
      });

      return index;
    }
  }, {
    key: 'scrollToId',
    value: function scrollToId(id) {
      // scroll to index
      var index = this.getItemIndexById(id);

      if (index != null) {
        this.scrollToIndex(index);
      }
    }
  }, {
    key: 'toggleExpand',
    value: function toggleExpand() {
      var expanded = this.getExpanded();
      if (expanded) {
        this.collapse();
      } else {
        this.expand();
      }
    }

    // item getters

  }, {
    key: 'getItemByIndex',
    value: function getItemByIndex(index) {
      var data = this.getFilteredData();
      if (!data || !Array.isArray(data) || !data[index]) {
        return null;
      }

      return data[index];
    }
  }, {
    key: 'getItemById',
    value: function getItemById(id) {
      var dataMap = this.getDataMap();
      return dataMap && dataMap[id] || id;
    }

    // id prop updaters

  }, {
    key: 'updateGetIdProperty',
    value: function updateGetIdProperty(props) {
      props = props || this.props;
      this.getIdProperty = (0, _getDataProp2.default)(props.idProperty);
    }
  }, {
    key: 'updateGetDisplayProperty',
    value: function updateGetDisplayProperty(props) {
      props = props || this.props;
      this.getDisplayProperty = (0, _getDataProp2.default)(props.displayProperty);
    }
  }, {
    key: 'updateGetFilterProperty',
    value: function updateGetFilterProperty(props) {
      props = props || this.props;
      this.getFilterProperty = (0, _getDataProp2.default)(props.filterProperty);
    }
  }, {
    key: 'updateGroups',
    value: function updateGroups(_ref13) {
      var _ref13$groupProperty = _ref13.groupProperty,
          groupProperty = _ref13$groupProperty === undefined ? this.props.groupProperty : _ref13$groupProperty,
          _ref13$data = _ref13.data,
          data = _ref13$data === undefined ? this.getFilteredData() : _ref13$data;

      if (!data) {
        return null;
      }
      var groups = (0, _getGroups2.default)(data, groupProperty);
      this.setState({ groups: groups });
    }

    // dom

  }, {
    key: 'focus',
    value: function focus() {
      var textInput = this.getTextInputNode();
      if (textInput && textInput.focus && !this.hasFocus()) {
        textInput.focus();
      }
    }
  }, {
    key: 'blur',
    value: function blur() {
      var textInput = this.getTextInputNode();
      if (textInput && textInput.blur) {
        textInput.blur();
      }
    }
  }, {
    key: 'hasFocus',
    value: function hasFocus() {
      var textInput = this.getTextInputNode();

      if (textInput && textInput.hasFocus) {
        return textInput.hasFocus();
      }

      return false;
    }

    // nodes

  }, {
    key: 'getTextInputNode',
    value: function getTextInputNode() {
      return this.textInput;
    }
  }, {
    key: 'getComboNode',
    value: function getComboNode() {
      return this.comboNode;
    }
  }, {
    key: 'getListNode',
    value: function getListNode() {
      return this.listNode;
    }
  }, {
    key: 'getVirtualListNode',
    value: function getVirtualListNode() {
      return this.listNode && this.listNode.getVirtualListNode();
    }
  }, {
    key: 'getlListNode',
    value: function getlListNode() {
      return this.listNode && this.listNode.getlListNode();
    }

    // other methods

  }, {
    key: 'addItem',
    value: function addItem(item) {
      var newData = [].concat(_toConsumableArray(this.getData()), [item]);
      this.setData(newData);
    }
  }, {
    key: 'clear',
    value: function clear() {
      var _this12 = this;

      this.setValue(null);
      this.setText(null);
      global.requestAnimationFrame(function () {
        if (_this12.toolsNode) {
          _this12.handleToolsSize();
        }
      });
    }
  }, {
    key: 'getItem',
    value: function getItem(id) {
      return this.getItemById(id);
    }
  }, {
    key: 'getItemCount',
    value: function getItemCount() {
      var data = this.getData();
      return Array.isArray(data) ? data.length : null;
    }
  }, {
    key: 'insertItem',
    value: function insertItem(_ref14) {
      var index = _ref14.index,
          item = _ref14.item;

      var data = this.getData();
      var newData = [].concat(_toConsumableArray(data.slice(0, index)), [item], _toConsumableArray(data.slice(index)));

      this.setData(newData);
    }
  }, {
    key: 'removeItems',
    value: function removeItems(ids) {
      var _this13 = this;

      ids = Array.isArray(ids) ? ids : [ids];
      var data = this.getData();
      var newData = data.filter(function (item) {
        var id = _this13.getIdProperty(item);
        return ids.indexOf(id) === -1;
      });

      this.setData(newData);
    }
  }, {
    key: 'toggle',
    value: function toggle() {
      var expanded = this.getExpanded();
      this.setExpanded(!expanded);
    }
  }]);

  return ZippyComboBox;
}(_react.Component);

function emptyFn() {}

ZippyComboBox.defaultProps = {
  rootClassName: 'zippy-react-toolkit-combo-box',
  inlineFlex: false,

  itemEllipsis: true,

  // style
  borderRadius: 0,
  shadow: true,
  showShadowOnMouseOver: false,
  clearTextOnBlur: true,

  // events
  onKeyDown: emptyFn,

  // focus/blur
  autoFocus: false,
  autoBlur: false,
  focusOnClick: true,
  onFocus: emptyFn,
  onBlur: emptyFn,

  // active item
  defaultActiveItem: null,
  highlightFirst: false,

  // input, filter
  onTextChange: emptyFn,
  searchable: true,
  tagCloseIconPosition: 'end',
  removeTagOnBackspace: true,
  tagEllipsis: true,
  filterMinLength: 0,
  filterDelay: 300,
  activeFirstItemOnFilter: true,
  clearIcon: true,
  toggleIcon: true,
  showClearIconOnMouseOver: false,
  clearTextOnSelect: true,
  filterMode: 'contains',
  highlightMatchedText: false,

  // tag
  onActiveTagChange: emptyFn,
  enableTagNavigation: true,
  onTagClick: emptyFn,
  onActiveItemChange: emptyFn,
  keepTagTextOnRemove: true,

  // events
  onItemClick: emptyFn,
  onChange: emptyFn,

  // autocomplete
  minAutocompleteLength: 3,
  autocompleteDelay: 300,
  autocomplete: false,

  // value
  defaultValue: null,
  multiple: false,
  removeSelectedItems: false,
  allowSelectionToggle: true,
  clearValueOnEmpty: true,

  // dataSource
  onDataSourceLoad: emptyFn,
  idProperty: 'id',
  displayProperty: 'label',
  groupProperty: 'group',

  // infinite load
  limit: 50,
  skip: 0,

  // loading
  onLoadingChange: emptyFn,
  listLoadingText: 'Loading...',
  loadingSpinner: true,

  // empty
  listEmptyText: 'No data found',

  defaultText: null,

  // list
  defaultExpanded: false,
  onExpandedChange: emptyFn,
  onExpandChange: emptyFn,
  collapseOnEscape: true,
  expandOnClick: true,
  expandOnFocus: true,
  collapseOnBlur: true,
  onExpand: emptyFn,
  onCollapse: emptyFn,
  expandOnTextChange: true,
  toggleExpandOnClick: true,

  theme: 'default',

  // navigation
  enableNavigation: true,
  enableListNavigation: true,
  navigateToNextAfterSelection: true,

  // position
  positions: ['bottom', 'top'],
  offset: 2,
  constrainTo: true
};

var VALUE_TYPE = _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number, _propTypes2.default.object, _propTypes2.default.bool, _propTypes2.default.arrayOf(_propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number, _propTypes2.default.object, _propTypes2.default.bool]))]);

ZippyComboBox.propTypes = {
  rootClassName: _propTypes2.default.string,
  theme: _propTypes2.default.string,
  inlineFlex: _propTypes2.default.bool,
  shouldComponentUpdate: _propTypes2.default.func,
  lazyDataSource: _propTypes2.default.bool,
  remoteFilter: _propTypes2.default.bool,
  disabled: _propTypes2.default.bool,
  readOnly: _propTypes2.default.bool,
  rtl: _propTypes2.default.bool,
  tabIndex: _propTypes2.default.number,
  collapseOnSelect: _propTypes2.default.bool,
  clearTextOnBlur: _propTypes2.default.bool,
  listEmptyText: _propTypes2.default.node,
  listMaxHeight: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]),
  listMinHeight: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]),
  maxTagsLength: _propTypes2.default.number,

  // loading
  defaultLoading: _propTypes2.default.bool,
  loading: _propTypes2.default.bool,
  onLoadingChange: _propTypes2.default.func,
  listLoadingText: _propTypes2.default.node,
  loadingSpinner: _propTypes2.default.oneOfType([_propTypes2.default.node, _propTypes2.default.bool]),

  // events
  onKeyDown: _propTypes2.default.func,
  onTagClick: _propTypes2.default.func,

  // global icons
  clearIcon: _propTypes2.default.oneOfType([_propTypes2.default.bool, _propTypes2.default.func, _propTypes2.default.node]),
  toggleIcon: _propTypes2.default.oneOfType([_propTypes2.default.bool, _propTypes2.default.func, _propTypes2.default.node]),
  showClearIconOnMouseOver: _propTypes2.default.bool,

  // focus/blur
  autoFocus: _propTypes2.default.bool,
  autoBlur: _propTypes2.default.bool,
  focusOnClick: _propTypes2.default.bool,
  onFocus: _propTypes2.default.func,
  onBlur: _propTypes2.default.func,

  // style
  borderRadius: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),
  padding: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),
  border: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),
  background: _propTypes2.default.string,
  shadow: _propTypes2.default.bool,
  showShadowOnMouseOver: _propTypes2.default.bool,
  emptyClassName: _propTypes2.default.string,
  emptyStyle: _propTypes2.default.object,
  disabledClassName: _propTypes2.default.string,
  disabledStyle: _propTypes2.default.object,
  focusedClassName: _propTypes2.default.string,
  focusedStyle: _propTypes2.default.object,

  // item style
  itemBackground: _propTypes2.default.string,
  disabledItemStyle: _propTypes2.default.object,
  disabledItemClassName: _propTypes2.default.string,
  renderItem: _propTypes2.default.func,
  itemEllipsis: _propTypes2.default.bool,
  activeItemStyle: _propTypes2.default.object,
  activeItemClassName: _propTypes2.default.string,
  selectedItemStyle: _propTypes2.default.object,

  // infinite load
  limit: _propTypes2.default.number,
  skip: _propTypes2.default.number,
  loadNextPage: _propTypes2.default.func,

  // input/filter
  searchable: _propTypes2.default.bool,
  placeholder: _propTypes2.default.node,
  text: _propTypes2.default.string,
  defaultText: _propTypes2.default.string,
  onTextChange: _propTypes2.default.func,
  filterFunction: _propTypes2.default.func,
  filterProperty: _propTypes2.default.string,
  loadLazyDataSource: _propTypes2.default.func,
  filterMinLength: _propTypes2.default.number,
  filterDelay: _propTypes2.default.number,
  activeFirstItemOnFilter: _propTypes2.default.bool,
  renderInput: _propTypes2.default.func,
  inputClassName: _propTypes2.default.string,
  inputStyle: _propTypes2.default.object,
  clearTextOnSelect: _propTypes2.default.bool,
  filterMode: _propTypes2.default.oneOf(['startsWith', 'contains']),
  highlightMatchedText: _propTypes2.default.bool,

  // autocomplete
  autocomplete: _propTypes2.default.bool,
  minAutocompleteLength: _propTypes2.default.number,
  autocompleteDelay: _propTypes2.default.number,

  // tag navigation
  enableNavigatio: _propTypes2.default.bool,
  keepTagTextOnRemove: _propTypes2.default.bool,
  tagActiveStyle: _propTypes2.default.object,

  enableTagNavigation: _propTypes2.default.bool,
  activeTag: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]),
  defaultActiveTag: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]),
  onActiveTagChange: _propTypes2.default.func,
  allowCustomTagCreation: _propTypes2.default.bool,

  // list item navigation
  enableNavigation: _propTypes2.default.bool,
  enableListNavigation: _propTypes2.default.bool,
  highlightFirst: _propTypes2.default.bool,

  activeItem: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]),
  defaultActiveItem: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]),
  onActiveItemChange: _propTypes2.default.func,
  navigateToNextAfterSelection: _propTypes2.default.bool,

  // events
  onItemClick: _propTypes2.default.func,
  onChange: _propTypes2.default.func,

  // list props
  listClassName: _propTypes2.default.string,
  selectedStyle: _propTypes2.default.object,
  selectedClassName: _propTypes2.default.string,
  renderGroup: _propTypes2.default.func,
  renderFooter: _propTypes2.default.func,
  renderHeader: _propTypes2.default.func,
  renderList: _propTypes2.default.func,

  // value
  value: VALUE_TYPE,
  defaultValue: VALUE_TYPE,
  defaultDisplayValue: VALUE_TYPE,
  removeSelectedItems: _propTypes2.default.bool,
  isSelectedItemValid: _propTypes2.default.func,
  maxValueLength: _propTypes2.default.number,
  changeValueOnNavigation: _propTypes2.default.bool,
  allowSelectionToggle: _propTypes2.default.bool,
  clearSelectedOnTextChange: _propTypes2.default.bool,
  clearValueOnEmpty: _propTypes2.default.bool,

  // tags
  isNewCustomTagValid: _propTypes2.default.func,
  multiple: _propTypes2.default.bool,
  renderTag: _propTypes2.default.func,
  renderTagLabel: _propTypes2.default.func,
  renderRemainingTags: _propTypes2.default.func,
  renderTags: _propTypes2.default.func,
  tagStyle: _propTypes2.default.object,
  tagBorder: _propTypes2.default.string,
  tagPadding: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),
  tagHeight: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),
  tagWidth: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),
  tagMinSize: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string, _propTypes2.default.shape({
    height: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]),
    width: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string])
  })]),
  tagMaxSize: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string, _propTypes2.default.shape({
    height: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]),
    width: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string])
  })]),
  tagCloseIcon: _propTypes2.default.oneOfType([_propTypes2.default.bool, _propTypes2.default.node, _propTypes2.default.func]),
  tagCloseIconPosition: _propTypes2.default.oneOf(['start', 'end']),
  tagEllipsis: _propTypes2.default.bool,
  removeTagOnBackspace: _propTypes2.default.bool,

  // display value
  renderDisplayValue: _propTypes2.default.func,

  // datasource
  dataSource: function dataSource(props, propName) {
    var dataSource = props[propName];
    if (dataSource != null && typeof dataSource !== 'function' && !Array.isArray(dataSource) && !(dataSource && dataSource.then)) {
      return new Error('dataSource must be an array, null, a promise or a function returning a promise.');
    }

    return null;
  },
  onDataSourceLoad: _propTypes2.default.func,
  idProperty: _propTypes2.default.string,
  displayProperty: _propTypes2.default.string,
  groupProperty: _propTypes2.default.string,
  listStyle: _propTypes2.default.object,
  relativeToViewport: _propTypes2.default.bool,

  // expanded
  expanded: _propTypes2.default.bool,
  defaultExpanded: _propTypes2.default.bool,
  onExpandedChange: _propTypes2.default.func,
  onExpandChange: _propTypes2.default.func,
  collapseOnEscape: _propTypes2.default.bool,
  expandOnClick: _propTypes2.default.bool,
  expandOnFocus: _propTypes2.default.bool,
  collapseOnBlur: _propTypes2.default.bool,
  enablePagination: _propTypes2.default.bool,
  onExpand: _propTypes2.default.func,
  onCollapse: _propTypes2.default.func,
  virtualListFactory: _propTypes2.default.func,
  renderListScroller: _propTypes2.default.func,
  renderVirtualList: _propTypes2.default.func,
  expandOnTextChange: _propTypes2.default.bool,
  toggleExpandOnClick: _propTypes2.default.bool,
  collapseOnSelectWithEnter: _propTypes2.default.bool,

  // list
  newCustomTagText: _propTypes2.default.oneOfType([_propTypes2.default.node, _propTypes2.default.func]),
  positions: _propTypes2.default.arrayOf(_propTypes2.default.string),
  constrainTo: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.func, _propTypes2.default.object, _propTypes2.default.bool]),
  offset: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.shape({
    x: _propTypes2.default.number,
    y: _propTypes2.default.number
  }), _propTypes2.default.arrayOf(_propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.shape({
    x: _propTypes2.default.number,
    y: _propTypes2.default.number
  })]))])
};

exports.default = ZippyComboBox;
exports.REMAINING_ITEMS = REMAINING_ITEMS;
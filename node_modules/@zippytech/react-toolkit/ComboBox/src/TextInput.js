'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _cleanProps = require('../../common/cleanProps');

var _cleanProps2 = _interopRequireDefault(_cleanProps);

var _getSelectionStart2 = require('./utils/getSelectionStart');

var _getSelectionStart3 = _interopRequireDefault(_getSelectionStart2);

var _getSelectionEnd2 = require('./utils/getSelectionEnd');

var _getSelectionEnd3 = _interopRequireDefault(_getSelectionEnd2);

var _setInputSelection = require('./utils/setInputSelection');

var _setInputSelection2 = _interopRequireDefault(_setInputSelection);

var _throttle = require('../../common/throttle');

var _throttle2 = _interopRequireDefault(_throttle);

var _join = require('../../common/join');

var _join2 = _interopRequireDefault(_join);

var _getCursorPosition = require('./utils/getCursorPosition');

var _getCursorPosition2 = _interopRequireDefault(_getCursorPosition);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Copyright (c) 2015-present, Zippy Technologies
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * This source code is licensed under the MIT license found in the
file in the root directory of this source tree.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */

var TextInput = function (_Component) {
  _inherits(TextInput, _Component);

  function TextInput(props) {
    _classCallCheck(this, TextInput);

    var _this = _possibleConstructorReturn(this, (TextInput.__proto__ || Object.getPrototypeOf(TextInput)).call(this, props));

    _this.handleChange = _this.handleChange.bind(_this);
    _this.updateValue = _this.updateValue.bind(_this);

    if (props.throttle) {
      _this.updateThrottledUpdateValue(props.throttle);
    }

    _this.state = {
      value: props.value
    };
    return _this;
  }

  _createClass(TextInput, [{
    key: 'UNSAFE_componentWillReceiveProps',
    value: function UNSAFE_componentWillReceiveProps(nextProps) {
      if (nextProps.throttle && this.props.value !== nextProps.value) {
        this.setState({ value: nextProps.value });
      }
      if (this.props.throttle !== nextProps.throttle) {
        this.updateThrottledUpdateValue(nextProps.throttle);
      }
    }
  }, {
    key: 'componentDidUpdate',
    value: function componentDidUpdate(prevProps) {
      var _this2 = this;

      /**
       * Before the suggestion is added we must weight for the
       * value to come back from the parent. Because it may be controlled.
       * Also the value must not be send as value, to not influence the fiter.
       *
       * Also the new value must be longer, so it will not add the suggestion
       * when the text is removed/erased.
       */

      var previousValue = prevProps.value || '';
      var currentValue = this.props.value || '';

      if (previousValue != currentValue) {
        clearTimeout(this.suggestionTimeOut);
      }

      if (this.props.suggestion &&
      // suggestion must not be the same as value
      this.props.suggestion !== currentValue && this.props.autocomplete && currentValue !== previousValue && currentValue.length > previousValue.length) {
        this.suggestionTimeOut = setTimeout(function () {
          _this2.selectForwardIfNecessary();
        }, this.props.autocompleteDelay);
      }
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      if (this.suggestionTimeOut) {
        clearTimeout(this.suggestionTimeOut);
        this.suggestionTimeOut = null;
      }
    }
  }, {
    key: 'updateThrottledUpdateValue',
    value: function updateThrottledUpdateValue(throttleDelay) {
      this.throttledUpdateValue = (0, _throttle2.default)(this.updateValue, throttleDelay, {
        trailing: true,
        leading: false
      });
    }
  }, {
    key: 'render',
    value: function render() {
      var _this3 = this;

      var _props = this.props,
          rootClassName = _props.rootClassName,
          onClick = _props.onClick,
          maxWidth = _props.maxWidth,
          visible = _props.visible,
          searchable = _props.searchable;


      var className = (0, _join2.default)(rootClassName + '__wrapper', this.props.className, !visible && rootClassName + '__wrapper--invisible', !searchable && rootClassName + '__wrapper--non-searchable');

      var value = this.getValue() || '';
      var valueLength = value != null && value.length;
      var size = valueLength ? valueLength + 1 : 1;

      var inputStyle = {};
      if (size === 1 && valueLength === 0) {
        inputStyle.width = 1;
      }

      if (maxWidth) {
        inputStyle.maxWidth = maxWidth;
      }

      return _react2.default.createElement(
        'span',
        _extends({}, (0, _cleanProps2.default)(this.props, TextInput.propTypes), {
          onClick: onClick,
          className: className
        }),
        _react2.default.createElement('input', {
          style: inputStyle,
          className: rootClassName,
          ref: function ref(_ref) {
            return _this3.inputNode = _ref;
          },
          type: 'text',
          value: value || '',
          onChange: this.handleChange,
          onClick: this.onClick,
          tabIndex: this.props.tabIndex,
          onMouseDown: this.handleMouseDown,
          size: size
        }),
        !value && this.renderPlaceholder()
      );
    }
  }, {
    key: 'renderPlaceholder',
    value: function renderPlaceholder() {
      var _this4 = this;

      if (!this.props.placeholder) {
        return null;
      }

      var placeholderProps = {
        className: this.props.rootClassName + '__placeholder'
      };

      return _react2.default.createElement(
        'span',
        _extends({}, placeholderProps, { ref: function ref(_ref2) {
            return _this4.placeholderNode = _ref2;
          } }),
        this.props.placeholder
      );
    }
  }, {
    key: 'getValue',
    value: function getValue() {
      var value = this.props.throttle ? this.state.value : this.props.value;

      return value;
    }
  }, {
    key: 'focus',
    value: function focus() {
      if (this.inputNode && this.inputNode.focus) {
        this.inputNode.focus();
      }
    }
  }, {
    key: 'blur',
    value: function blur() {
      if (this.inputNode && this.inputNode.blur) {
        this.inputNode.blur();
      }
    }
  }, {
    key: 'hasFocus',
    value: function hasFocus() {
      var activeElement = global && global.document && global.document.activeElement;
      return this.inputNode === activeElement;
    }
  }, {
    key: 'handleChange',
    value: function handleChange(event) {
      var value = event.target.value;
      if (this.props.throttle) {
        this.setState({ value: value });
        this.throttledUpdateValue(value);
      } else {
        this.updateValue(value);
      }
    }
  }, {
    key: 'handleMouseDown',
    value: function handleMouseDown(event) {
      /**
       * preventDefault is set on mouseDown
       * evets on combo so that input doesn't lose focus.
       * This makes so the cursor cannot be moved with click.
       *
       * To let this event behave normal, we stop propagation so it is not
       * called on it preventDefault.
       */
      event.stopPropagation();
    }
  }, {
    key: 'onClick',
    value: function onClick(event) {
      event.stopPropagation();
    }
  }, {
    key: 'updateValue',
    value: function updateValue(value) {
      this.props.onChange(value);
    }
  }, {
    key: 'selectForwardIfNecessary',
    value: function selectForwardIfNecessary() {
      var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props.value;

      if (!value || typeof value !== 'string') {
        return null;
      }

      var suggestion = this.props.suggestion;
      if (typeof suggestion !== 'string') {
        return null;
      }

      if (suggestion.toLowerCase().indexOf(value.toLowerCase()) === -1) {
        return null;
      }

      var firstPartLength = value.length;
      var inputNode = this.inputNode;

      this.inputNode.value = suggestion;
      this.inputNode.size = this.inputNode.value.length;
      this.inputNode.style.width = 'auto';

      (0, _setInputSelection2.default)(inputNode, firstPartLength, suggestion.length);
      return true;
    }
  }, {
    key: 'getSelectionStart',
    value: function getSelectionStart() {
      return (0, _getSelectionStart3.default)(this.inputNode);
    }
  }, {
    key: 'getSelectionEnd',
    value: function getSelectionEnd() {
      return (0, _getSelectionEnd3.default)(this.inputNode);
    }
  }, {
    key: 'hasSelection',
    value: function hasSelection() {
      return this.getSelectionStart() !== this.getSelectionEnd();
    }
  }, {
    key: 'isCursorAtStartPosition',
    value: function isCursorAtStartPosition() {
      return this.getSelectionStart() === 0;
    }
  }, {
    key: 'isCursorAtEndPosition',
    value: function isCursorAtEndPosition() {
      var cursorLastPissiblePosition = this.props.value && this.props.value.length;

      return (0, _getCursorPosition2.default)(this.inputNode) === cursorLastPissiblePosition;
    }
  }]);

  return TextInput;
}(_react.Component);

function emptyFn() {}
TextInput.defaultProps = {
  onChange: emptyFn,
  value: '',
  autocomplete: true
};

TextInput.propTypes = {
  rootClassName: _propTypes2.default.string,
  value: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number, _propTypes2.default.arrayOf(_propTypes2.default.string), _propTypes2.default.arrayOf(_propTypes2.default.number)]),
  placeholder: _propTypes2.default.node,
  onChange: _propTypes2.default.func,
  maxWidth: _propTypes2.default.number,
  throttle: _propTypes2.default.number,
  tabIndex: _propTypes2.default.number,
  autocomplete: _propTypes2.default.bool,
  autocompleteDelay: _propTypes2.default.number,
  visible: _propTypes2.default.bool,
  suggestion: _propTypes2.default.any,
  searchable: _propTypes2.default.bool
};

exports.default = TextInput;
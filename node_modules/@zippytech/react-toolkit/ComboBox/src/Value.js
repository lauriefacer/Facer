'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _groupItems = require('./utils/groupItems');

var _groupItems2 = _interopRequireDefault(_groupItems);

var _join = require('./utils/join');

var _join2 = _interopRequireDefault(_join);

var _ComboBox = require('./ComboBox');

var _Tag = require('./Tag');

var _Tag2 = _interopRequireDefault(_Tag);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Copyright (c) 2015-present, Zippy Technologies
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * This source code is licensed under the MIT license found in the
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * LICENSE file in the root directory of this source tree.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */

var Value = function (_Component) {
  _inherits(Value, _Component);

  function Value(props) {
    _classCallCheck(this, Value);

    var _this = _possibleConstructorReturn(this, (Value.__proto__ || Object.getPrototypeOf(Value)).call(this, props));

    _this.state = {
      size: null
    };
    return _this;
  }

  _createClass(Value, [{
    key: 'render',
    value: function render() {
      var props = this.props;
      var value = props.value,
          multiple = props.multiple,
          rootClassName = props.rootClassName,
          toolsSize = props.toolsSize,
          focus = props.focus,
          searchable = props.searchable,
          label = props.label;


      var showTags = value != null && multiple;
      var style = _extends({}, props.style);
      if (toolsSize) {
        style.maxWidth = 'calc(100% - ' + toolsSize.width + 'px)';
      }

      var className = (0, _join2.default)(rootClassName);

      var isDisplayValueVisible = !showTags && !focus;
      if (!showTags && !searchable) {
        isDisplayValueVisible = true;
      }

      if (value == null) {
        isDisplayValueVisible = false;
      }

      var displayValue = isDisplayValueVisible ? this.renderDisplayValue() : null;

      return _react2.default.createElement(
        'div',
        { className: className, style: style },
        showTags && this.renderTags(),
        displayValue,
        this.renderTextInput({ isDisplayValueVisible: displayValue })
      );
    }
  }, {
    key: 'renderTextInput',
    value: function renderTextInput(_ref) {
      var isDisplayValueVisible = _ref.isDisplayValueVisible;

      var textInput = this.props.textInput;
      if (!textInput) {
        return null;
      }

      if (textInput.type !== 'input') {
        return _react2.default.cloneElement(textInput, _extends({}, textInput.props, {
          visible: !isDisplayValueVisible && this.props.searchable
        }));
      }
      return textInput;
    }
  }, {
    key: 'renderDisplayValue',
    value: function renderDisplayValue() {
      var _props = this.props,
          rootClassName = _props.rootClassName,
          label = _props.label,
          renderDisplayValue = _props.renderDisplayValue;


      var domProps = {
        className: rootClassName + '__display-value',
        children: label
      };

      var result = null;
      if (typeof renderDisplayValue === 'function') {
        result = renderDisplayValue({ domProps: domProps, label: label });
      }

      if (result == null) {
        result = _react2.default.createElement('div', domProps);
      }

      return result;
    }
  }, {
    key: 'renderTags',
    value: function renderTags() {
      var _this2 = this;

      var _props2 = this.props,
          renderTags = _props2.renderTags,
          value = _props2.value,
          items = _props2.items,
          groupedItems = _props2.groupedItems;


      if (!items) {
        return null;
      }

      var remainingItems = void 0;
      var visibleItems = void 0;
      if (groupedItems) {
        remainingItems = groupedItems.remainingItems;
        visibleItems = groupedItems.visibleItems;
      } else {
        visibleItems = items;
      }

      var remainingTags = remainingItems && this.renderTag(remainingItems, this.props.maxTagsLength, {
        visibleItems: visibleItems
      });
      var visibleTags = visibleItems && visibleItems.map(function (item, index) {
        return _this2.renderTag(item, index);
      });

      var tags = [].concat(_toConsumableArray(visibleTags), [remainingTags]);
      if (typeof renderTags === 'function') {
        tags = renderTags({
          tags: tags,
          items: items,
          value: value,
          visibleItems: visibleItems,
          remainingItems: remainingItems
        });
      }

      return tags;
    }
  }, {
    key: 'renderTag',
    value: function renderTag(item, index) {
      var config = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

      var items = this.props.items;
      if (!item) {
        return null;
      }
      var _props3 = this.props,
          rootClassName = _props3.rootClassName,
          renderTag = _props3.renderTag,
          activeTag = _props3.activeTag,
          maxTagsLength = _props3.maxTagsLength,
          renderTagLabel = _props3.renderTagLabel,
          renderRemainingTags = _props3.renderRemainingTags;


      var tagRootClassName = rootClassName + '__tag';
      var isMultiple = Array.isArray(item);
      var active = isMultiple ? activeTag === _ComboBox.REMAINING_ITEMS : activeTag === item.id;

      var tagProps = _extends({
        item: item,
        items: items,
        active: active,
        isMultiple: isMultiple,
        renderTagLabel: renderTagLabel,
        maxTagsLength: maxTagsLength,
        index: index,
        renderTag: renderTag
      }, config, this.props.tagProps, {
        rootClassName: tagRootClassName,
        key: index
      });

      var tag = void 0;
      if (isMultiple && typeof renderRemainingTags === 'function') {
        tag = renderRemainingTags({
          remainingItems: item,
          visibleItems: config.visibleItems,
          domProps: tagProps
        });
      }

      if (tag === undefined) {
        tag = _react2.default.createElement(_Tag2.default, tagProps);
      }

      return tag;
    }
  }]);

  return Value;
}(_react.Component);

Value.defaultProps = {
  tagProps: {},
  groupedItems: null,
  items: []
};

var VALUE_TYPE = _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number, _propTypes2.default.object, _propTypes2.default.bool, _propTypes2.default.arrayOf(_propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number, _propTypes2.default.object, _propTypes2.default.bool]))]);

Value.propTypes = {
  size: _propTypes2.default.shape({
    width: _propTypes2.default.number,
    height: _propTypes2.default.number
  }),
  focus: _propTypes2.default.bool,
  // tags
  items: _propTypes2.default.array,
  item: _propTypes2.default.object,
  groupedItems: _propTypes2.default.shape({
    visibleItems: _propTypes2.default.array,
    remainingItems: _propTypes2.default.array
  }),
  renderTag: _propTypes2.default.func,
  renderRemainingTags: _propTypes2.default.func,
  renderTags: _propTypes2.default.func,
  renderTagLabel: _propTypes2.default.func,
  tagProps: _propTypes2.default.object, //  a way to group them together
  maxTagsLength: _propTypes2.default.number,
  rootClassName: _propTypes2.default.string,
  multiple: _propTypes2.default.bool,
  textInput: _propTypes2.default.node,
  value: VALUE_TYPE
};

exports.default = Value;
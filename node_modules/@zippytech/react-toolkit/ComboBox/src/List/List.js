'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _cleanProps = require('../../../common/cleanProps');

var _cleanProps2 = _interopRequireDefault(_cleanProps);

var _Overlay = require('../../../Overlay');

var _Overlay2 = _interopRequireDefault(_Overlay);

var _shouldComponentUpdate = require('../utils/shouldComponentUpdate');

var _shouldComponentUpdate2 = _interopRequireDefault(_shouldComponentUpdate);

var _FakeVirtualList = require('./FakeVirtualList');

var _FakeVirtualList2 = _interopRequireDefault(_FakeVirtualList);

var _Item = require('./Item');

var _Item2 = _interopRequireDefault(_Item);

var _getClassName = require('./utils/getClassName');

var _getClassName2 = _interopRequireDefault(_getClassName);

var _isSelected = require('../utils/isSelected');

var _isSelected2 = _interopRequireDefault(_isSelected);

var _getPositionRelativeToElement = require('../../../common/getPositionRelativeToElement');

var _getPositionRelativeToElement2 = _interopRequireDefault(_getPositionRelativeToElement);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Copyright (c) 2015-present, Zippy Technologies
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * This source code is licensed under the MIT license found in the
file in the root directory of this source tree.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */

var List = function (_Component) {
  _inherits(List, _Component);

  function List(props) {
    _classCallCheck(this, List);

    var _this = _possibleConstructorReturn(this, (List.__proto__ || Object.getPrototypeOf(List)).call(this, props));

    _this.renderRow = _this.renderRow.bind(_this);
    _this.getOverlayTarget = _this.getOverlayTarget.bind(_this);
    _this.handleOnClick = _this.handleOnClick.bind(_this);
    _this.handleItemClick = _this.handleItemClick.bind(_this);
    _this.virtualListShouldComponentUpdate = _this.virtualListShouldComponentUpdate.bind(_this);

    _this.setRootNode = function (ref) {
      _this.listNode = ref;
    };

    _this.addVirtualListRef = function (ref) {
      _this.virtualListNode = ref;
    };

    _this.state = { succesfullPosition: 'bottom' };
    _this.listAligned = false;
    return _this;
  }

  _createClass(List, [{
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      this.componentIsMounted = false;
    }
  }, {
    key: 'componentDidMount',
    value: function componentDidMount() {
      var _this2 = this;

      if (!this.props.relativeToViewport) {
        setTimeout(function () {
          _this2.updateListPosition();
        }, 0);
      }

      this.componentIsMounted = true;

      if (this.props.activeItemIndex != null) {
        setTimeout(function () {
          if (_this2.componentIsMounted) {
            _this2.scrollToIndex(_this2.props.activeItemIndex);
          }
        }, 16);
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var state = this.state,
          props = this.props;
      var renderFooter = props.renderFooter,
          renderHeader = props.renderHeader,
          isNewCustomTagValid = props.isNewCustomTagValid;


      this.currentGroup = null;
      var className = (0, _getClassName2.default)({ state: state, props: props });
      var style = props.style;

      if (this.state.position) {
        style = _extends({}, style, this.state.position);
      }

      if (this.state.succesfullPosition && this.props.offset) {
        var positionName = this.state.succesfullPosition === 'bc-tc' ? 'top' : 'bottom';

        if (this.props.offset) {
          style = _extends({}, style, _defineProperty({}, positionName == 'top' ? 'marginBottom' : 'marginTop', this.props.offset));
        }
      }

      if (!this.props.relativeToViewport && !this.listAligned) {
        style = _extends({}, style, {
          visibility: 'hidden',
          position: 'fixed'
        });
      }

      var result = _react2.default.createElement(
        'div',
        _extends({}, (0, _cleanProps2.default)(props, List.propTypes), {
          className: className,
          style: style,
          ref: this.setRootNode,
          onClick: this.handleOnClick
        }),
        this.renderLoadingText(),
        isNewCustomTagValid && this.renderNewCustomTagText(),
        typeof renderHeader === 'function' && this.renderHeader(),
        this.renderEmptyText(),
        this.renderVirtualList(),
        typeof renderFooter === 'function' && this.renderFooter()
      );

      if (this.props.relativeToViewport) {
        var overlayProps = _extends({}, props.overlayProps, {
          target: this.getOverlayTarget,
          relativeToViewport: this.props.relativeToViewport,
          constrainTo: this.props.constrainTo,
          positions: this.props.positions
        });

        return _react2.default.createElement(
          _Overlay2.default,
          overlayProps,
          result
        );
      }

      return result;
    }
  }, {
    key: 'getOverlayTarget',
    value: function getOverlayTarget() {
      return this.props.getComboNode();
    }
  }, {
    key: 'renderFooter',
    value: function renderFooter() {
      return this.props.renderFooter({
        props: this.props,
        data: this.props.data,
        value: this.props.value
      });
    }
  }, {
    key: 'renderHeader',
    value: function renderHeader() {
      return this.props.renderHeader({
        props: this.props,
        data: this.props.data,
        value: this.props.value
      });
    }
  }, {
    key: 'renderEmptyText',
    value: function renderEmptyText() {
      var data = this.props.data;

      if (data && data.length || this.props.loading) {
        return null;
      }
      if (this.props.isNewCustomTagValid) {
        return null;
      }

      return _react2.default.createElement(
        'div',
        { className: this.props.rootClassName + '__empty-text' },
        this.props.emptyText
      );
    }
  }, {
    key: 'renderNewCustomTagText',
    value: function renderNewCustomTagText() {
      var text = this.props.text;

      if (this.props.newCustomTagText) {
        return typeof this.props.newCustomTagText === 'function' ? this.props.newCustomTagText({ text: text }) : this.props.newCustomTagText;
      }

      return _react2.default.createElement(
        'div',
        { className: this.props.rootClassName + '__new-custom-tag-text' },
        'Create option "',
        text,
        '"'
      );
    }
  }, {
    key: 'renderLoadingText',
    value: function renderLoadingText() {
      if (!this.props.loading) {
        return null;
      }
      if (!this.props.loadingText) {
        return null;
      }

      return _react2.default.createElement(
        'div',
        { className: this.props.rootClassName + '__loading-text' },
        this.props.loadingText
      );
    }
  }, {
    key: 'renderVirtualList',
    value: function renderVirtualList() {
      var className = this.props.rootClassName + '__virtual-list';
      var count = this.props.dataLength;
      var VirtualList = this.props.virtualListFactory;
      var renderVirtualList = this.props.renderVirtualList;

      if (!count) {
        return null;
      }

      var style = {};

      if (this.props.maxHeight) {
        style.maxHeight = this.props.maxHeight;
      }
      if (this.state.constrainedHeight) {
        var constrainedOffset = 5;
        var constrainedHeight = this.props.maxHeight ? Math.min(this.props.maxHeight, this.state.constrainedHeight - constrainedOffset) : this.state.constrainedHeight - constrainedOffset;

        style.maxHeight = constrainedHeight;
      }
      if (typeof style.maxHeight === 'number' && typeof this.props.minHeight == 'number') {
        style.maxHeight = Math.max(style.maxHeight || 0, style.minHeight || 0);
      }

      var virtualListProps = {
        ref: this.addVirtualListRef,
        className: className,
        autoHide: false,
        count: count,
        renderRow: this.renderRow,
        minRowHeight: 10,
        tabIndex: null,
        shouldComponentUpdate: this.virtualListShouldComponentUpdate,
        scrollProps: {
          onContainerScrollVerticalMax: this.props.onScrollBottom
        },
        style: style
      };

      var result = void 0;

      if (renderVirtualList) {
        result = renderVirtualList(virtualListProps);
      }
      if (result === undefined) {
        if (VirtualList === _FakeVirtualList2.default) {
          virtualListProps.renderListScroller = this.props.renderListScroller;
        }

        result = _react2.default.createElement(VirtualList, virtualListProps);
      }

      if (result && result.props) {
        this.rowHeight = result.props.rowHeight;
      }

      return result;
    }
  }, {
    key: 'virtualListShouldComponentUpdate',
    value: function virtualListShouldComponentUpdate() {
      return true;
    }
  }, {
    key: 'renderRow',
    value: function renderRow(_ref) {
      var index = _ref.index;

      var groups = this.props.groups;
      if (groups && groups[index]) {
        return this.renderGroup(groups[index], index);
      }

      var _props = this.props,
          data = _props.data,
          getIdProperty = _props.getIdProperty,
          getDisplayProperty = _props.getDisplayProperty,
          rootClassName = _props.rootClassName,
          itemEllipsis = _props.itemEllipsis,
          value = _props.value,
          activeItem = _props.activeItem,
          renderItem = _props.renderItem;


      var renderIndex = this.currentGroup ? index - this.currentGroup.indexAjustment : index;

      var item = data[renderIndex];
      var id = getIdProperty(item);
      var label = getDisplayProperty(item);
      var selected = (0, _isSelected2.default)({ value: value, id: id });
      var active = id === activeItem;

      var itemProps = _extends({}, this.props.itemProps, {
        index: renderIndex,
        itemHeight: this.rowHeight,
        itemEllipsis: itemEllipsis,
        item: item,
        id: id,
        label: label,
        selected: selected,
        active: active,
        renderItem: renderItem,
        rootClassName: rootClassName + '__item',
        onClick: this.handleItemClick,
        key: id || label
      });

      return _react2.default.createElement(_Item2.default, itemProps);
    }
  }, {
    key: 'renderGroup',
    value: function renderGroup(group, index) {
      this.currentGroup = group;
      var title = group.title;


      var groupProps = {
        children: title,
        key: title,
        className: this.props.rootClassName + '__group'
      };

      var result = void 0;
      if (typeof this.props.renderGroup === 'function') {
        result = this.props.renderGroup({
          domProps: groupProps,
          index: index,
          group: group
        });
      }

      if (result === undefined) {
        result = _react2.default.createElement('div', groupProps);
      }

      return result;
    }
  }, {
    key: 'handleOnClick',
    value: function handleOnClick(event) {
      event.stopPropagation();
    }
  }, {
    key: 'handleItemClick',
    value: function handleItemClick(index) {
      this.props.onItemClick(index);
    }

    /**
     * Called on first render to decide where to render the list.
     * And then on each datasource change, but after it has updated.
     */

  }, {
    key: 'updateListPosition',
    value: function updateListPosition() {
      // getPosition
      var comboNode = this.props.getComboNode();
      if (!comboNode) {
        return null;
      }

      var listNode = this.listNode;

      if (!listNode) {
        return null;
      }

      var positionConfig = (0, _getPositionRelativeToElement2.default)({
        targetNode: comboNode,
        overlayNode: listNode,
        offset: this.props.offset,
        constrainTo: this.props.constrainTo,
        relativeToViewport: this.props.relativeToViewport,
        positions: this.props.positions
      });

      this.listAligned = true;
      if (positionConfig) {
        var constrainedHeight = positionConfig.constrainedHeight,
            positionRegion = positionConfig.positionRegion,
            succesfullPosition = positionConfig.succesfullPosition,
            position = positionConfig.position;


        this.setState({
          positionRegion: positionRegion,
          succesfullPosition: succesfullPosition,
          constrainedHeight: constrainedHeight ? positionRegion.getHeight() : null
        });
      }
    }
  }, {
    key: 'getVirtualListNode',
    value: function getVirtualListNode() {
      return this.virtualListNode;
    }
  }, {
    key: 'getlListNode',
    value: function getlListNode() {
      return this.listNode;
    }
  }, {
    key: 'scrollToIndex',
    value: function scrollToIndex(index) {
      var virtualListNode = this.getVirtualListNode();
      return virtualListNode && virtualListNode.scrollToIndex(index);
    }
  }]);

  return List;
}(_react.Component);

function emptyFn() {}

List.defaultProps = {
  // item props
  selectedStyle: {},
  style: {},

  // events
  onItemClick: emptyFn,
  getComboNode: emptyFn,

  // position
  positions: ['bottom', 'top'],
  offset: 0,
  constrainTo: true,
  virtualListFactory: _FakeVirtualList2.default,
  overlayProps: {
    theme: null,
    syncWidth: true,
    rafOnMount: false,
    adjustOnPositionBottom: false,
    updatePositionOnScroll: true,
    offset: 2,
    visible: true
  }
};

List.propTypes = {
  data: _propTypes2.default.array,
  autoPosition: _propTypes2.default.bool,
  emptyText: _propTypes2.default.node,
  dataLength: _propTypes2.default.number,
  rootClassName: _propTypes2.default.string,
  highlightFirst: _propTypes2.default.bool,
  maxHeight: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]),
  minHeight: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]),
  groups: _propTypes2.default.object,
  itemEllipsis: _propTypes2.default.bool,
  onScrollBottom: _propTypes2.default.func,
  renderListScroller: _propTypes2.default.func,
  renderGroup: _propTypes2.default.func,
  renderFooter: _propTypes2.default.func,
  renderHeader: _propTypes2.default.func,
  renderItem: _propTypes2.default.func,
  activeItemIndex: _propTypes2.default.number,
  virtualListFactory: _propTypes2.default.func,
  renderVirtualList: _propTypes2.default.func,
  text: _propTypes2.default.string,
  newCustomTagText: _propTypes2.default.oneOfType([_propTypes2.default.node, _propTypes2.default.func]),
  isNewCustomTagValid: _propTypes2.default.bool,

  // position
  positions: _propTypes2.default.arrayOf(_propTypes2.default.string),
  constrainTo: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.func, _propTypes2.default.object, _propTypes2.default.bool]),
  offset: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.shape({
    x: _propTypes2.default.number,
    y: _propTypes2.default.number
  }), _propTypes2.default.arrayOf(_propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.shape({
    x: _propTypes2.default.number,
    y: _propTypes2.default.number
  })]))]),

  // loading
  loadingText: _propTypes2.default.node,
  loading: _propTypes2.default.bool,

  relativeToViewport: _propTypes2.default.bool,
  overlayProps: _propTypes2.default.object,

  // item props
  itemProps: _propTypes2.default.object,
  activeItem: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number, _propTypes2.default.bool]),

  selectedStyle: _propTypes2.default.object,
  getIdProperty: _propTypes2.default.func,
  getDisplayProperty: _propTypes2.default.func,

  // events
  onItemClick: _propTypes2.default.func,
  getComboNode: _propTypes2.default.func
};

exports.default = List;
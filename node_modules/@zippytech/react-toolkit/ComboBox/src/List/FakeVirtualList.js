'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('react-dom');

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _cleanProps = require('../../../common/cleanProps');

var _cleanProps2 = _interopRequireDefault(_cleanProps);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Copyright (c) 2015-present, Zippy Technologies
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * This source code is licensed under the MIT license found in the
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * LICENSE file in the root directory of this source tree.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */

/**
 * Stand in component for the real Virtual List (pro)
 */
var FakeVirtualList = function (_Component) {
  _inherits(FakeVirtualList, _Component);

  function FakeVirtualList(props) {
    _classCallCheck(this, FakeVirtualList);

    var _this = _possibleConstructorReturn(this, (FakeVirtualList.__proto__ || Object.getPrototypeOf(FakeVirtualList)).call(this, props));

    _this.handleOnScroll = _this.handleOnScroll.bind(_this);
    _this.targetRef = function (node) {
      if (!node) {
        _this.targetNode = null;
      }
      _this.targetNode = node;
    };
    return _this;
  }

  _createClass(FakeVirtualList, [{
    key: 'render',
    value: function render() {
      var props = this.props;

      var count = this.props.count;

      var list = [];
      if (count > 0) {
        for (var i = 0; i < count; i++) {
          list.push(props.renderRow({ index: i }));
        }
      }

      var listProps = _extends({
        ref: this.targetRef,
        children: list
      }, (0, _cleanProps2.default)(props, FakeVirtualList.propTypes), {
        onScroll: this.handleOnScroll
      });

      var result = void 0;

      if (this.props.renderListScroller) {
        result = this.props.renderListScroller(listProps);
      }

      if (result === undefined) {
        result = _react2.default.createElement('div', listProps);
      }

      return result;
    }
  }, {
    key: 'getContainerNode',
    value: function getContainerNode() {
      return this.targetNode && this.targetNode.getContainerTargetNode ? this.targetNode.getContainerTargetNode() : this.targetNode;
    }
  }, {
    key: 'getRootNode',
    value: function getRootNode() {
      return (0, _reactDom.findDOMNode)(this.targetNode);
    }
  }, {
    key: 'getScrollerNode',
    value: function getScrollerNode() {
      return this.targetNode && this.targetNode.getScrollerNode ? this.targetNode.getScrollerNode() : this.targetNode;
    }
  }, {
    key: 'scrollToIndex',
    value: function scrollToIndex(index) {
      var containerNode = this.getContainerNode();
      var rootNode = this.getRootNode();
      var scrollerNode = this.getScrollerNode();

      if (!containerNode) {
        return null;
      }
      if (containerNode && !containerNode.childNodes.length) {
        return null;
      }
      var itemNode = containerNode.childNodes[index];
      if (!itemNode) {
        return null;
      }

      var itemHeight = itemNode.offsetHeight;
      var itemOffsetTop = itemNode.offsetTop;
      var scrollTop = scrollerNode.scrollTop;
      var containerHeight = rootNode.offsetHeight;

      // at the top and have to scroll to itemOffsetTop
      if (scrollTop > itemOffsetTop) {
        scrollerNode.scrollTop = itemOffsetTop;
      }

      // at the bottom, have to scroll more
      if (scrollTop + containerHeight < itemHeight + itemOffsetTop) {
        scrollerNode.scrollTop = itemOffsetTop + itemHeight - containerHeight;
      }

      return true;
    }
  }, {
    key: 'handleOnScroll',
    value: function handleOnScroll(event) {
      var rootNode = this.getRootNode();
      var scrollTop = event.target.scrollTop;
      var listHeight = rootNode.offsetHeight;
      var scrollHeight = rootNode.scrollHeight;

      if (scrollTop + listHeight + 5 >= scrollHeight) {
        this.props.scrollProps.onContainerScrollVerticalMax();
      }
    }
  }]);

  return FakeVirtualList;
}(_react.Component);

FakeVirtualList.propTypes = {
  autoHide: _propTypes2.default.bool,
  count: _propTypes2.default.number,
  renderRow: _propTypes2.default.func,
  minRowHeight: _propTypes2.default.number,
  tagIndex: _propTypes2.default.number,
  shouldComponentUpdate: _propTypes2.default.func,
  renderListScroller: _propTypes2.default.func,
  scrollProps: _propTypes2.default.object,
  virtualized: _propTypes2.default.bool
};

exports.default = FakeVirtualList;
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _cleanProps = require('../../../common/cleanProps');

var _cleanProps2 = _interopRequireDefault(_cleanProps);

var _join = require('../utils/join');

var _join2 = _interopRequireDefault(_join);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Copyright (c) 2015-present, Zippy Technologies
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * This source code is licensed under the MIT license found in the
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * LICENSE file in the root directory of this source tree.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */

var Item = function (_Component) {
  _inherits(Item, _Component);

  function Item(props) {
    _classCallCheck(this, Item);

    var _this = _possibleConstructorReturn(this, (Item.__proto__ || Object.getPrototypeOf(Item)).call(this, props));

    _this.handleClick = _this.handleClick.bind(_this);
    _this.handleMouseDown = _this.handleMouseDown.bind(_this);
    return _this;
  }

  _createClass(Item, [{
    key: 'render',
    value: function render() {
      var _props = this.props,
          selected = _props.selected,
          rootClassName = _props.rootClassName,
          selectedStyle = _props.selectedStyle,
          active = _props.active,
          background = _props.background,
          item = _props.item,
          index = _props.index,
          disabledStyle = _props.disabledStyle,
          disabledClassName = _props.disabledClassName,
          activeStyle = _props.activeStyle,
          activeClassName = _props.activeClassName,
          selectedClassName = _props.selectedClassName,
          renderItem = _props.renderItem,
          itemHeight = _props.itemHeight,
          itemEllipsis = _props.itemEllipsis;


      var disabled = item.disabled;

      var className = (0, _join2.default)(this.props.className, rootClassName, selected && rootClassName + '--selected', active && rootClassName + '--active', disabled && rootClassName + '--disabled', itemEllipsis && rootClassName + '--ellipsis', disabled && disabledClassName, active && activeClassName, selected && selectedClassName);

      var style = _extends({}, this.props.style, active && activeStyle, disabled && disabledStyle, selected && selectedStyle);

      if (itemHeight) {
        style.height = itemHeight;
      }

      if (background) {
        style.background = background;
      }

      var label = this.props.label;
      /**
       * if we have a match, overwrite only if label is a string
       * if it is not a string, this means it was overwritten
       */
      var matchText = item.matchText;
      if (typeof label === 'string' && matchText) {
        label = matchText.map(function (textPart, index) {
          if ((typeof textPart === 'undefined' ? 'undefined' : _typeof(textPart)) === 'object') {
            return _react2.default.createElement(
              'span',
              { className: rootClassName + '__highlight', key: index },
              textPart.match
            );
          }

          return textPart;
        });
      }

      var domProps = _extends({}, (0, _cleanProps2.default)(this.props, Item.propTypes), {
        style: style,
        className: className,
        onClick: this.handleClick,
        onMouseDown: this.handleMouseDown,
        children: label
      });

      var result = void 0;
      if (typeof renderItem === 'function') {
        result = renderItem({ domProps: domProps, label: label, item: item, index: index });
      }

      if (result === undefined) {
        result = _react2.default.createElement('div', domProps);
      }

      return result;
    }
  }, {
    key: 'handleMouseDown',
    value: function handleMouseDown(event) {
      event.preventDefault();
    }
  }, {
    key: 'handleClick',
    value: function handleClick() {
      if (this.props.item.disabled) {
        return null;
      }

      this.props.onClick(this.props.id);
    }
  }]);

  return Item;
}(_react.Component);

function emptyFn() {}

Item.defaultProps = {
  onClick: emptyFn,
  selectedStyle: {},
  item: {}
};

Item.propTypes = {
  rootClassName: _propTypes2.default.string,
  itemHeight: _propTypes2.default.number,
  itemEllipsis: _propTypes2.default.bool,
  renderItem: _propTypes2.default.func,
  selectedClassName: _propTypes2.default.string,
  selectedStyle: _propTypes2.default.object,
  background: _propTypes2.default.string,
  active: _propTypes2.default.bool,
  label: _propTypes2.default.node,
  id: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number, _propTypes2.default.bool]),
  item: _propTypes2.default.object,
  onClick: _propTypes2.default.func,
  index: _propTypes2.default.number,
  disabledStyle: _propTypes2.default.object,
  disabledClassName: _propTypes2.default.string,
  activeStyle: _propTypes2.default.object,
  activeClassName: _propTypes2.default.string
};

exports.default = Item;
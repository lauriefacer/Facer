'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _cleanProps = require('../../common/cleanProps');

var _cleanProps2 = _interopRequireDefault(_cleanProps);

var _join = require('./utils/join');

var _join2 = _interopRequireDefault(_join);

var _getMinMaxSize = require('./utils/getMinMaxSize');

var _getMinMaxSize2 = _interopRequireDefault(_getMinMaxSize);

var _Icons = require('./Icons');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Copyright (c) 2015-present, Zippy Technologies
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * This source code is licensed under the MIT license found in the
file in the root directory of this source tree.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */

var Tag = function (_Component) {
  _inherits(Tag, _Component);

  function Tag(props) {
    _classCallCheck(this, Tag);

    var _this = _possibleConstructorReturn(this, (Tag.__proto__ || Object.getPrototypeOf(Tag)).call(this, props));

    _this.handleOnClose = _this.handleOnClose.bind(_this);
    _this.handleOnMultipleClose = _this.handleOnMultipleClose.bind(_this);
    return _this;
  }

  _createClass(Tag, [{
    key: 'render',
    value: function render() {
      var props = this.props;
      var item = props.item,
          index = props.index,
          items = props.items,
          rootClassName = props.rootClassName,
          closeIconPosition = props.closeIconPosition,
          _onClick = props.onClick,
          active = props.active,
          multiple = props.multiple,
          renderTag = props.renderTag,
          isMultiple = props.isMultiple;


      var className = this.getClassName({ active: active });
      var labelClassName = rootClassName + '__label';
      var style = this.getStyle();
      var closeIcon = this.renderCloseIcon();
      var label = this.renderLabel();

      var domProps = _extends({}, (0, _cleanProps2.default)(props, Tag.propTypes), {
        key: 'tag_' + index,
        style: style,
        className: className,
        onMouseDown: function onMouseDown(event) {
          event.preventDefault(); // prevent input from losing focus
        },
        onClick: function onClick(event) {
          event.stopPropagation();
          _onClick(item.id);
        },
        children: [closeIconPosition === 'start' && closeIcon, _react2.default.createElement(
          'span',
          { key: 'tag_label', className: labelClassName },
          label
        ), closeIconPosition === 'end' && closeIcon]
      });

      var result = void 0;
      if (typeof renderTag === 'function') {
        result = renderTag({
          domProps: domProps,
          item: item,
          index: index,
          items: items,
          isMultiple: isMultiple,
          props: props
        });
      }

      if (result === undefined) {
        return _react2.default.createElement('div', domProps);
      }

      return result || null;
    }
  }, {
    key: 'getClassName',
    value: function getClassName(_ref) {
      var active = _ref.active;
      var _props = this.props,
          rootClassName = _props.rootClassName,
          ellipsis = _props.ellipsis,
          isMultiple = _props.isMultiple;


      var className = (0, _join2.default)(rootClassName, active && rootClassName + '--active', ellipsis && rootClassName + '--ellipsis', isMultiple && rootClassName + '--multiple');

      return className;
    }
  }, {
    key: 'getStyle',
    value: function getStyle() {
      var props = this.props;
      var border = props.border,
          padding = props.padding,
          height = props.height,
          width = props.width,
          maxWidth = props.maxWidth,
          activeStyle = props.activeStyle,
          active = props.active;

      var minMaxSize = (0, _getMinMaxSize2.default)(props);
      var style = _extends({}, props.style, minMaxSize);
      if (border) {
        style.border = border;
      }
      if (padding) {
        style.padding = padding;
      }
      if (width) {
        style.width = width;
      }
      if (height) {
        style.height = height;
      }
      if (maxWidth) {
        style.maxWidth = maxWidth;
      }
      if (active && activeStyle) {
        style = _extends({}, style, activeStyle);
      }

      return style;
    }
  }, {
    key: 'renderLabel',
    value: function renderLabel() {
      var _props2 = this.props,
          index = _props2.index,
          maxTagsLength = _props2.maxTagsLength,
          renderTagLabel = _props2.renderTagLabel,
          items = _props2.items,
          item = _props2.item,
          isMultiple = _props2.isMultiple;

      var label = item.label;

      if (isMultiple) {
        if (item.length === 1) {
          label = item[0].label;
        } else {
          label = items.length === item.length ? item.length + ' item' + (item.length ? 's' : '') + ' selected' : 'and other ' + item.length + ' selected';
        }
      }

      if (renderTagLabel) {
        return renderTagLabel({
          label: label,
          item: item,
          items: items,
          count: items.length,
          index: index,
          isMultiple: isMultiple,
          maxTagsLength: maxTagsLength,
          combined: isMultiple
        });
      }

      return label;
    }
  }, {
    key: 'renderCloseIcon',
    value: function renderCloseIcon() {
      var _props3 = this.props,
          closeIcon = _props3.closeIcon,
          rootClassName = _props3.rootClassName,
          isMultiple = _props3.isMultiple,
          item = _props3.item;

      var closeClassName = rootClassName + '__clear-icon';

      if (!closeIcon) {
        return null;
      }

      var closeIconProps = {
        key: 'close_icon',
        onClick: isMultiple ? this.handleOnMultipleClose : this.handleOnClose,
        className: closeClassName
      };

      var closeIconEl = closeIcon;
      if (typeof closeIcon === 'function') {
        var closeIconParams = {
          item: item,
          onDeselect: closeIconProps.onClick,
          domProps: closeIconProps
        };

        closeIconEl = closeIcon(closeIconParams);
      } else {
        if (closeIcon && (typeof closeIcon === 'undefined' ? 'undefined' : _typeof(closeIcon)) == 'object') {
          closeIconEl = (0, _react.cloneElement)(closeIcon, {
            className: (0, _join2.default)(closeIcon.props && closeIcon.props.className, closeIconProps.className),
            onClick: closeIcon.props && closeIcon.props.onClick ? function (event) {
              closeIcon.props.onClick(event);
              closeIconProps.onClick(event);
            } : closeIconProps.onClick
          });
        }
      }

      if (closeIconEl === true || closeIconEl === undefined) {
        closeIconEl = _react2.default.createElement(_Icons.CloseIcon, closeIconProps);
      }

      return closeIconEl;
    }
  }, {
    key: 'handleOnMultipleClose',
    value: function handleOnMultipleClose() {
      var ids = this.props.item.map(function (item) {
        return item.id;
      });
      this.props.onMultipleTagClose(ids);
    }
  }, {
    key: 'handleOnClose',
    value: function handleOnClose(event) {
      var _props4 = this.props,
          onCloseTagClick = _props4.onCloseTagClick,
          item = _props4.item;
      // don't lose focus

      event.preventDefault();
      event.stopPropagation();

      var id = item.id;
      onCloseTagClick(id);
    }
  }]);

  return Tag;
}(_react.Component);

Tag.displayName = 'Tag';

function emptyFn() {}

Tag.defaultProps = {
  onCloseTagClick: emptyFn,
  onMultipleTagClose: emptyFn,
  onClick: emptyFn,
  closeIconPosition: 'end',
  item: {},
  ellipsis: true,
  closeIcon: true
};

Tag.propTypes = {
  active: _propTypes2.default.bool,
  renderTag: _propTypes2.default.func,
  renderTagLabel: _propTypes2.default.func,
  index: _propTypes2.default.number,
  onCloseTagClick: _propTypes2.default.func,
  onMultipleTagClose: _propTypes2.default.func,
  closeIcon: _propTypes2.default.oneOfType([_propTypes2.default.bool, _propTypes2.default.node, _propTypes2.default.func]),
  closeIconPosition: _propTypes2.default.oneOf(['start', 'end']),
  isRemaining: _propTypes2.default.bool,
  onClick: _propTypes2.default.func,

  item: _propTypes2.default.oneOfType([_propTypes2.default.object, _propTypes2.default.array]),
  items: _propTypes2.default.array,
  isMultiple: _propTypes2.default.bool,
  rootClassName: _propTypes2.default.string,
  tags: _propTypes2.default.array,

  // style
  border: _propTypes2.default.string,
  visibleItems: _propTypes2.default.array,
  activeStyle: _propTypes2.default.object,
  padding: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),
  height: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),
  width: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),
  minSize: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string, _propTypes2.default.shape({
    height: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]),
    width: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string])
  })]),
  maxSize: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string, _propTypes2.default.shape({
    height: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]),
    width: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string])
  })]),
  maxWidth: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),
  maxTagsLength: _propTypes2.default.number,
  ellipsis: _propTypes2.default.bool
};

exports.default = Tag;
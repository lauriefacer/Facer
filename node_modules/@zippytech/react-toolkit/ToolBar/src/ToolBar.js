'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Separator = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _cleanProps = require('../../common/cleanProps');

var _cleanProps2 = _interopRequireDefault(_cleanProps);

var _NotifyResize = require('../../NotifyResize');

var _join = require('../../common/join');

var _join2 = _interopRequireDefault(_join);

var _ArrowScroller = require('../../ArrowScroller');

var _ArrowScroller2 = _interopRequireDefault(_ArrowScroller);

var _DropdownOverflow = require('./DropdownOverflow');

var _DropdownOverflow2 = _interopRequireDefault(_DropdownOverflow);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Copyright (c) 2015-present, Zippy Technologies
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * This source code is licensed under the MIT license found in the
file in the root directory of this source tree.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */

var ZippyToolbar = function (_Component) {
  _inherits(ZippyToolbar, _Component);

  function ZippyToolbar(props) {
    _classCallCheck(this, ZippyToolbar);

    var _this = _possibleConstructorReturn(this, (ZippyToolbar.__proto__ || Object.getPrototypeOf(ZippyToolbar)).call(this, props));

    _this.setRootRef = function (ref) {
      _this.node = ref;
    };
    return _this;
  }

  _createClass(ZippyToolbar, [{
    key: 'render',
    value: function render() {
      var props = this.props;
      var className = props.className;

      var rootProps = _extends({
        useTransformOnScroll: props.useTransformOnScroll,
        ref: this.setRootRef
      }, (0, _cleanProps2.default)(props, ZippyToolbar.propTypes), {
        className: className,
        rtl: props.rtl,
        rootClassName: props.rootClassName
      });

      return props.overflowStrategy === 'scroll' ? _react2.default.createElement(_ArrowScroller2.default, _extends({}, rootProps, this.getScrollerProps())) : _react2.default.createElement(_DropdownOverflow2.default, _extends({}, rootProps, this.getDropdownOverflowProps()));
    }
  }, {
    key: 'scrollIntoView',
    value: function scrollIntoView(node) {
      return this.node && this.node.scrollIntoView(node);
    }
  }, {
    key: 'getInstance',
    value: function getInstance() {
      return this.node;
    }
  }, {
    key: 'getClassName',
    value: function getClassName() {
      var props = this.props;

      return (0, _join2.default)(this.props.className, props.rootClassName, props.theme && props.rootClassName + '--theme-' + props.theme, props.changeButtonStyles && props.rootClassName + '--change-button-styles');
    }
  }, {
    key: 'getScrollerProps',
    value: function getScrollerProps() {
      var props = this.props;

      return {
        vertical: props.vertical,
        scrollOnMouseEnter: props.scrollOnMouseEnter,
        arrowSize: props.arrowSize,
        className: (0, _join2.default)(this.getClassName(), props.rootClassName + '--arrowScroller')
      };
    }
  }, {
    key: 'getDropdownOverflowProps',
    value: function getDropdownOverflowProps() {
      var props = this.props;

      return {
        className: (0, _join2.default)(this.getClassName(), props.rootClassName + '--dropdown'),
        constrainTo: props.constrainTo,
        dropdownButtonProps: props.dropdownButtonProps,
        renderDropdownButton: props.renderDropdownButton
      };
    }
  }]);

  return ZippyToolbar;
}(_react.Component);

ZippyToolbar.defaultProps = {
  rootClassName: 'zippy-react-toolkit-toolbar',
  vertical: false,
  useTransformOnScroll: false,
  changeButtonStyles: true,
  theme: 'default',
  overflowStrategy: 'scroll',
  rtl: false
};

ZippyToolbar.propTypes = {
  rtl: _propTypes2.default.bool,
  rootClassName: _propTypes2.default.string,
  changeButtonStyles: _propTypes2.default.bool,
  scrollOnMouseEnter: _propTypes2.default.bool,
  theme: _propTypes2.default.string,
  constrainTo: _propTypes2.default.oneOfType([_propTypes2.default.object, _propTypes2.default.string, _propTypes2.default.bool, _propTypes2.default.func]),
  arrowSize: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.shape({
    width: _propTypes2.default.number,
    height: _propTypes2.default.number
  })]),
  overflowStrategy: _propTypes2.default.oneOf(['scroll', 'dropdown']),
  vertical: _propTypes2.default.bool,
  dropdownButtonProps: _propTypes2.default.object,
  renderDropdownButton: _propTypes2.default.func,
  useTransformOnScroll: _propTypes2.default.bool
};

var Separator = function Separator(props) {
  return _react2.default.createElement('div', _extends({}, props, {
    className: (0, _join2.default)(props.className, 'zippy-react-toolkit-toolbar__separator')
  }));
};

ZippyToolbar.Separator = Separator;

exports.Separator = Separator;
exports.default = ZippyToolbar;
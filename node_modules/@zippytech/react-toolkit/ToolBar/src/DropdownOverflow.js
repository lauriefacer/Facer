'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _NotifyResize = require('../../NotifyResize');

var _cleanProps = require('../../common/cleanProps');

var _cleanProps2 = _interopRequireDefault(_cleanProps);

var _assign = require('../../common/assign');

var _assign2 = _interopRequireDefault(_assign);

var _join = require('../../common/join');

var _join2 = _interopRequireDefault(_join);

var _DropdownButton = require('../../DropdownButton');

var _DropdownButton2 = _interopRequireDefault(_DropdownButton);

var _getGroupedItems = require('./utils/getGroupedItems');

var _getGroupedItems2 = _interopRequireDefault(_getGroupedItems);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Copyright (c) 2015-present, Zippy Technologies
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * This source code is licensed under the MIT license found in the
file in the root directory of this source tree.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */

var firstRenderStyle = {
  visibility: 'hidden',
  overflow: 'hidden'
};

var ghostStyle = {
  visibility: 'hidden',
  overflow: 'hidden',
  position: 'absolute'
};

/**
 * The basic idea is that, the items are rendered two times.
 * Once directly inside the root.
 * Second inside a div, with visibility none and position absolute.
 * The second is used to mesure elements, to see what items fit and what don't.
 * This check is done on first render and on each size change of the component.
 */

var DropDownOverflow = function (_Component) {
  _inherits(DropDownOverflow, _Component);

  function DropDownOverflow(props) {
    _classCallCheck(this, DropDownOverflow);

    var _this = _possibleConstructorReturn(this, (DropDownOverflow.__proto__ || Object.getPrototypeOf(DropDownOverflow)).call(this, props));

    _this.setRootRef = function (ref) {
      _this.rootNode = ref;
    };

    _this.setGhostRef = function (ref) {
      _this.ghostNode = ref;
    };

    _this.state = {};
    _this.handleResize = _this.handleResize.bind(_this);

    _this.isFirstRender = true;
    return _this;
  }

  _createClass(DropDownOverflow, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      this.updateOverflowItems();
      this.isFirstRender = false;
    }
  }, {
    key: 'render',
    value: function render() {
      var props = this.props;


      var style = _extends({}, props.style, this.isFirstRender && firstRenderStyle);

      var className = (0, _join2.default)(props.rootClassName, props.className, props.rtl && props.rootClassName + '--rtl');

      var dropdownProps = (0, _assign2.default)({}, props);

      delete dropdownProps.scrollOnClick;
      delete dropdownProps.mouseoverScrollSpeed;
      delete dropdownProps.scrollSpeed;
      delete dropdownProps.scrollStep;
      delete dropdownProps.useTransformOnScroll;

      var domProps = (0, _cleanProps2.default)(dropdownProps, DropDownOverflow.propTypes);

      return _react2.default.createElement(
        'div',
        _extends({}, domProps, {
          ref: this.setRootRef,
          style: style,
          className: className
        }),
        _react2.default.createElement(_NotifyResize.NotifyResize, {
          key: 'notify',
          rafOnResize: true,
          notifyOnMount: false,
          onResize: this.handleResize
        }),
        this.renderVisibleItems(),
        (this.isFirstRender || this.state.overflowIndexes) && this.renderDropdownButton(),
        this.renderGhost()
      );
    }
  }, {
    key: 'renderVisibleItems',
    value: function renderVisibleItems() {
      var visibleItems = this.props.children;

      if (this.state.visibleIndexes) {
        var children = this.getChildrenArray();
        visibleItems = this.state.visibleIndexes.map(function (index) {
          return children[index];
        });
      }

      return visibleItems;
    }
  }, {
    key: 'renderDropdownButton',
    value: function renderDropdownButton() {
      var items = [];
      if (this.state.overflowIndexes) {
        var children = this.getChildrenArray();
        items = this.state.overflowIndexes.map(function (index) {
          return {
            id: index,
            label: children[index]
          };
        });
      }

      var domProps = _extends({
        items: items,
        constrainTo: this.props.constrainTo,
        menuProps: _extends({
          constrainTo: this.props.constrainTo
        }, this.props.dropdownButtonProps && this.props.dropdownButtonProps.menuProps, {
          theme: null,
          disableScroller: true
        })
      }, this.props.dropdownButtonProps);

      var result = void 0;
      if (typeof this.props.renderDropdownButton === 'function') {
        result = this.props.renderDropdownButton({
          items: items,
          domProps: domProps,
          overflowIndexes: this.state.overflowIndexes
        });
      }

      if (result === undefined) {
        result = _react2.default.createElement(_DropdownButton2.default, domProps);
      }

      return result;
    }

    /**
     * Everything is rendered into a div with the same size as the root
     * to mesure the size of the children, to check if something changed.
     */

  }, {
    key: 'renderGhost',
    value: function renderGhost() {
      if (!this.state.ghostVisible) {
        return null;
      }

      return _react2.default.createElement(
        'div',
        {
          ref: this.setGhostRef,
          style: _extends({}, ghostStyle, {
            width: this.state.width,
            height: this.state.height
          })
        },
        this.props.children,
        this.renderDropdownButton()
      );
    }
  }, {
    key: 'getRootSize',
    value: function getRootSize() {
      var maxSize = this.rootNode[this.getSizeName()];
      return maxSize;
    }

    /**
     * For first render items are rendered directly and mesure
     * The state for the first render is:
     * - overflow hidden
     * - visibility hidden
     *
     * So it doesn't add scroll to what ever element it is in,
     * after the mesurement everything fits and there will be no need
     * for overflow: hidden.
     */

  }, {
    key: 'updateOverflowItems',
    value: function updateOverflowItems() {
      var _this2 = this;

      if (!this.rootNode) {
        return;
      }

      var parentNode = this.state.ghostVisible ? this.ghostNode : this.rootNode;

      var children = parentNode.children;
      var maxSize = this.getRootSize();
      var boxes = [].slice.call(children).map(function (child) {
        return child[_this2.getSizeName()];
      });

      /**
       * Must take into account dropdown button width, if rendered
       * - check if a dropdown button is rendered, if so it is considered the last one.
       * - and must be removed to get correct groupping
       */
      var overflowControlSize = boxes[boxes.length - 1];

      /**
       * if it is on first render that means that the parentNode will be the route
       * in this case the fist child will be the notify-resize
       */
      if (this.isFirstRender) {
        boxes = boxes.slice(1);
      }

      boxes = boxes.slice(0, -1);
      var groupedItems = (0, _getGroupedItems2.default)({
        boxes: boxes,
        maxSize: maxSize,
        overflowControlSize: overflowControlSize
      });

      if (groupedItems) {
        this.setState({
          visibleIndexes: groupedItems.visibleIndexes,
          overflowIndexes: groupedItems.overflowIndexes
        });
      } else {
        this.setState({
          visibleIndexes: null,
          overflowIndexes: null
        });
      }
    }

    // events

  }, {
    key: 'handleResize',
    value: function handleResize(_ref) {
      var _this3 = this;

      var width = _ref.width,
          height = _ref.height;

      this.setState({
        width: width,
        height: height,
        ghostVisible: true
      }, function () {
        _this3.updateOverflowItems();
        _this3.setState({
          ghostVisible: false
        });
      });
    }

    /**
     * Used to let easy way to refactor to support vertical
     * toolbars.
     */

  }, {
    key: 'getSizeName',
    value: function getSizeName() {
      return 'offsetWidth';
    }
  }, {
    key: 'getChildrenArray',
    value: function getChildrenArray() {
      return _react2.default.Children.toArray(this.props.children);
    }
  }]);

  return DropDownOverflow;
}(_react.Component);

DropDownOverflow.defaultProps = {
  rootClassName: 'react-toolkit-dropdown-overflow',
  rtl: false
};

DropDownOverflow.propTypes = {
  rootClassName: _propTypes2.default.string,
  dropdownButtonProps: _propTypes2.default.object,
  constrainTo: _propTypes2.default.oneOfType([_propTypes2.default.object, _propTypes2.default.string, _propTypes2.default.bool, _propTypes2.default.func]),
  renderDropdownButton: _propTypes2.default.func,
  rtl: _propTypes2.default.bool
};

exports.default = DropDownOverflow;
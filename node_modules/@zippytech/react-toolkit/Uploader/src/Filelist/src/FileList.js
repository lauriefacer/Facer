'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FileExtensionIcon = exports.FileItem = exports.FileItemPropTypes = exports.FileListDefaultProps = exports.FileListPropTypes = exports.fileSizeFormatter = exports.timeFormatter = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; /**
                                                                                                                                                                                                                                                                   * Copyright (c) 2015-present, Zippy Technologies
                                                                                                                                                                                                                                                                   *
                                                                                                                                                                                                                                                                   * This source code is licensed under the MIT license found in the
                                                                                                                                                                                                                                                                   * LICENSE file in the root directory of this source tree.
                                                                                                                                                                                                                                                                   */

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _autoBind = require('@zippytech/react-class/autoBind');

var _autoBind2 = _interopRequireDefault(_autoBind);

var _cleanProps = require('../../../../common/cleanProps');

var _cleanProps2 = _interopRequireDefault(_cleanProps);

var _join = require('../../../../common/join');

var _join2 = _interopRequireDefault(_join);

var _shouldComponentUpdate2 = require('../../../../common/shouldComponentUpdate');

var _shouldComponentUpdate3 = _interopRequireDefault(_shouldComponentUpdate2);

var _FileExtensionIcon = require('./FileExtensionIcon');

var _FileExtensionIcon2 = _interopRequireDefault(_FileExtensionIcon);

var _pickProps = require('./utils/pick-props');

var _pickProps2 = _interopRequireDefault(_pickProps);

var _fileSizeFormatter = require('./utils/file-size-formatter');

var _fileSizeFormatter2 = _interopRequireDefault(_fileSizeFormatter);

var _timeFormatter = require('./utils/time-formatter');

var _timeFormatter2 = _interopRequireDefault(_timeFormatter);

var _FileItem = require('./FileItem');

var _FileItem2 = _interopRequireDefault(_FileItem);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var CLASS_NAME = 'react-file-list';

// returns constructor state for files if needed.
// in controlled state we rely on getCurrentFiles to
// read files, not the state.
var getInitialStateFile = function getInitialStateFile(props) {
  var files = props.files,
      defaultFiles = props.defaultFiles;

  if (files) {
    return null;
  }
  return defaultFiles || [];
};

// returns current files for given props and state. Will
// know where to read files array from based on the type
// of component (controlled or uncontrolled)
var getCurrentFiles = function getCurrentFiles(props, state) {
  var controlledFiles = props.files,
      defaultFiles = props.defaultFiles;
  var stateFiles = state.files;


  var files = defaultFiles || [];
  if (controlledFiles) {
    files = controlledFiles;
  } else if (stateFiles) {
    files = stateFiles;
  }

  return files;
};

// logic for rendering one individual file, bind callbacks etc
var renderFiles = function renderFiles(props, callbacks) {
  var files = props.files,
      fileItemsProps = props.fileItemsProps,
      uploadProgress = props.uploadProgress,
      FileItem = props.FileItem;

  return files.map(function (file, idx) {
    var uploadProgressForFile = uploadProgress[file.id] || {};
    return _react2.default.createElement(FileItem, _extends({}, fileItemsProps, callbacks, {
      uploadProgress: uploadProgressForFile,
      connected: props.connected,
      key: file.id + '-' + idx,
      i18n: props.i18n,
      file: file
    }));
  });
};

var getFileIDFromDOM = function getFileIDFromDOM(ev) {
  var target = ev.target;
  while (!target.getAttribute('data-file-id')) {
    target = target.parentNode;
  }

  return target.getAttribute && target.getAttribute('data-file-id');
};

var getClassName = function getClassName(props) {
  var className = props.className;

  return (0, _join2.default)(CLASS_NAME, className);
};

var isControlledComponent = function isControlledComponent(props, state) {
  return !!props.files;
};

var FileList = function (_Component) {
  _inherits(FileList, _Component);

  function FileList(props, context) {
    _classCallCheck(this, FileList);

    var _this = _possibleConstructorReturn(this, (FileList.__proto__ || Object.getPrototypeOf(FileList)).call(this, props, context));

    (0, _autoBind2.default)(_this);
    _this.state = {
      files: getInitialStateFile(props)
    };
    return _this;
  }

  _createClass(FileList, [{
    key: 'shouldComponentUpdate',
    value: function shouldComponentUpdate(nextProps, nextState) {
      return (0, _shouldComponentUpdate3.default)(this, nextProps, nextState);
    }
  }, {
    key: 'getProps',
    value: function getProps() {
      var state = this.state,
          props = this.props;
      var uploadProgress = props.uploadProgress,
          FileItem = props.FileItem,
          connected = props.connected,
          i18n = props.i18n;

      return {
        files: getCurrentFiles(props, state),
        FileItem: FileItem,
        i18n: i18n,
        connected: connected,
        uploadProgress: uploadProgress,
        fileItemsProps: (0, _pickProps2.default)(props, _FileItem.FileItemPropTypes),
        className: getClassName(props),
        isControlled: isControlledComponent(props, state)
      };
    }
  }, {
    key: 'onClearClick',
    value: function onClearClick(ev) {
      var onClearClick = this.props.onClearClick;

      var targetID = getFileIDFromDOM(ev);
      onClearClick && onClearClick(targetID);
    }
  }, {
    key: 'onUploadClick',
    value: function onUploadClick(ev) {
      var onUploadClick = this.props.onUploadClick;

      var targetID = getFileIDFromDOM(ev);
      onUploadClick && onUploadClick(targetID);
    }
  }, {
    key: 'setNewFiles',
    value: function setNewFiles(newFiles) {
      if (!this.p.isControlled) {
        this.setState({
          files: newFiles
        });
      }

      var onChange = this.props.onChange;

      onChange && onChange(newFiles);
    }

    // public api

  }, {
    key: 'getFiles',
    value: function getFiles() {
      return this.p.files;
    }
  }, {
    key: 'clearFiles',
    value: function clearFiles() {
      this.setNewFiles([]);
    }
  }, {
    key: 'addFile',
    value: function addFile(file) {
      if (!file) {
        return;
      }
      this.addFiles([file]);
    }
  }, {
    key: 'addFiles',
    value: function addFiles(files) {
      if (!files) {
        return;
      }

      var newFiles = this.state.files.concat(files);
      this.setNewFiles(newFiles);
    }
  }, {
    key: 'removeFile',
    value: function removeFile(id) {
      if (!id) {
        return;
      }
      this.removeFileAt(this.p.files.findIndex(function (file) {
        return file.id === id;
      }));
    }
  }, {
    key: 'removeFileAt',
    value: function removeFileAt(idx) {
      var files = this.p.files;

      if (typeof idx !== 'number' || idx === NaN || idx < 0 || idx >= files.length) {
        return;
      }
      var newFiles = [].concat(_toConsumableArray(files.slice(0, idx)), _toConsumableArray(files.slice(idx + 1)));
      this.setNewFiles(newFiles);
    }
  }, {
    key: 'render',
    value: function render() {
      var _p = this.p = this.getProps(),
          files = _p.files,
          className = _p.className,
          i18n = _p.i18n;

      var onClearClick = this.onClearClick,
          onUploadClick = this.onUploadClick;

      var list = renderFiles(this.p, {
        onClearClick: onClearClick,
        onUploadClick: onUploadClick
      });

      var listProps = _extends({
        children: list
      }, (0, _cleanProps2.default)(this.props, FileList.propTypes), {
        className: className
      });
      var result = void 0;

      if (this.props.renderListScroller) {
        result = this.props.renderListScroller(listProps);
      }

      if (result === undefined) {
        result = _react2.default.createElement('div', listProps);
      }

      return result;
    }
  }]);

  return FileList;
}(_react.Component);

var FileListDefaultProps = FileList.defaultProps = {
  defaultFiles: [],
  uploadProgress: {},
  timeFormatter: _timeFormatter2.default,
  fileSizeFormatter: _fileSizeFormatter2.default,
  FileItem: _FileItem2.default
};

var FileListPropTypes = FileList.propTypes = _extends({}, _FileItem.FileItemPropTypes, {
  files: _propTypes2.default.arrayOf(_propTypes2.default.object),
  uploadProgress: _propTypes2.default.object,
  connected: _propTypes2.default.bool,
  defaultFiles: _propTypes2.default.arrayOf(_propTypes2.default.object),

  onChange: _propTypes2.default.func,
  onClearClick: _propTypes2.default.func,
  onUploadClick: _propTypes2.default.func,
  i18n: _propTypes2.default.object,

  fileSizeFormatter: _propTypes2.default.func,
  timeFormatter: _propTypes2.default.func,
  renderListScroller: _propTypes2.default.func,
  locale: _propTypes2.default.string,
  FileItem: _propTypes2.default.any
});

exports.default = FileList;
exports.timeFormatter = _timeFormatter2.default;
exports.fileSizeFormatter = _fileSizeFormatter2.default;
exports.FileListPropTypes = FileListPropTypes;
exports.FileListDefaultProps = FileListDefaultProps;
exports.FileItemPropTypes = _FileItem.FileItemPropTypes;
exports.FileItem = _FileItem2.default;
exports.FileExtensionIcon = _FileExtensionIcon2.default;
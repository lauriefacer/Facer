'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _autoBind = require('@zippytech/react-class/autoBind');

var _autoBind2 = _interopRequireDefault(_autoBind);

var _cleanProps = require('../../../../common/cleanProps');

var _cleanProps2 = _interopRequireDefault(_cleanProps);

var _join = require('../../../../common/join');

var _join2 = _interopRequireDefault(_join);

var _shouldComponentUpdate2 = require('../../../../common/shouldComponentUpdate');

var _shouldComponentUpdate3 = _interopRequireDefault(_shouldComponentUpdate2);

var _splitFileInNameAndType = require('./utils/split-file-in-name-and-type');

var _splitFileInNameAndType2 = _interopRequireDefault(_splitFileInNameAndType);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Copyright (c) 2015-present, Zippy Technologies
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * This source code is licensed under the MIT license found in the
file in the root directory of this source tree.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */

var CLASS_NAME = 'zippy-react-file-extension-icon';

var renderExtensionBox = function renderExtensionBox(extension) {
  var upperExtension = extension ? extension.toUpperCase().replace('.', '') : '';
  return _react2.default.createElement(
    'svg',
    { width: 28, height: 28, viewBox: '0 0 24 28' },
    _react2.default.createElement(
      'g',
      { fill: 'none', fillRule: 'evenodd' },
      _react2.default.createElement(
        'g',
        { fill: '#A1B6D3', transform: 'translate(2)' },
        _react2.default.createElement('path', { d: 'M-4.28101998e-13,0 L12.6923077,0 L20,9.01694915 L20,28 L-4.28101998e-13,28 L-4.28101998e-13,0 Z M1,1 L1,27 L19,27 L19,9.21052632 L12.52,1 L1,1 Z' }),
        _react2.default.createElement('path', { d: 'M12,0 L20,10 L12,10 L12,0 Z M13,2 L13,9 L19,9 L13,2 Z' })
      ),
      _react2.default.createElement('rect', { width: '26', height: '12', x: '-1', y: '14', fill: '#5C8EEB' }),
      _react2.default.createElement(
        'text',
        {
          fill: '#E6EEFF',
          fontFamily: 'Verdana, Geneva, sans-serif',
          fontSize: '8',
          fontWeight: '700',
          textAnchor: 'middle'
        },
        _react2.default.createElement(
          'tspan',
          { x: '12', y: '23' },
          upperExtension
        )
      )
    )
  );
};

var FileExtensionIcon = function (_Component) {
  _inherits(FileExtensionIcon, _Component);

  function FileExtensionIcon(props) {
    _classCallCheck(this, FileExtensionIcon);

    var _this = _possibleConstructorReturn(this, (FileExtensionIcon.__proto__ || Object.getPrototypeOf(FileExtensionIcon)).call(this, props));

    (0, _autoBind2.default)(_this);
    return _this;
  }

  _createClass(FileExtensionIcon, [{
    key: 'shouldComponentUpdate',
    value: function shouldComponentUpdate(nextProps, nextState) {
      return (0, _shouldComponentUpdate3.default)(this, nextProps, nextState);
    }
  }, {
    key: 'getExtension',
    value: function getExtension() {
      var _props = this.props,
          file = _props.file,
          extension = _props.extension,
          showStartingDot = _props.showStartingDot;

      var ext = extension;
      var rawExtension = ext;

      var fileName = (typeof file === 'undefined' ? 'undefined' : _typeof(file)) == 'object' ? file.name : file;

      if (!extension && file) {
        rawExtension = ext = (0, _splitFileInNameAndType2.default)(fileName).fileExtention;
      }

      if (!showStartingDot) {
        ext = extension.replace('.', '');
      }

      return { extension: ext, rawExtension: rawExtension };
    }
  }, {
    key: 'getClassNames',
    value: function getClassNames() {
      var className = this.props.className;


      var classNames = (0, _join2.default)(CLASS_NAME, className);

      return classNames;
    }
  }, {
    key: 'getColorForExtension',
    value: function getColorForExtension(extension) {
      var _props2 = this.props,
          colors = _props2.colors,
          unknownExtensionColor = _props2.unknownExtensionColor;

      if (!colors && !unknownExtensionColor) {
        return;
      }

      var pickedColor = unknownExtensionColor;
      colors && Object.keys(colors).forEach(function (colorKey) {
        if (extension.replace('.', '').indexOf(colorKey.replace('.', '')) !== -1) {
          pickedColor = colors[colorKey];
        }
      });
      return pickedColor;
    }
  }, {
    key: 'getProps',
    value: function getProps() {
      var renderExtensionBox = this.props.renderExtensionBox;

      return _extends({}, this.getExtension(), {
        className: this.getClassNames(),
        renderExtensionBox: renderExtensionBox
      });
    }
  }, {
    key: 'render',
    value: function render() {
      var _p = this.p = this.getProps(),
          extension = _p.extension,
          rawExtension = _p.rawExtension,
          className = _p.className,
          renderExtensionBox = _p.renderExtensionBox;

      return _react2.default.createElement(
        'div',
        _extends({}, (0, _cleanProps2.default)(this.props, FileExtensionIcon.propTypes), {
          className: className
        }),
        renderExtensionBox(extension, this.getColorForExtension(extension), rawExtension)
      );
    }
  }]);

  return FileExtensionIcon;
}(_react.Component);

FileExtensionIcon.defaultProps = {
  showStartingDot: true,
  renderExtensionBox: renderExtensionBox
};

FileExtensionIcon.propTypes = {
  shouldComponentUpdate: _propTypes2.default.func,
  children: _propTypes2.default.any,
  file: _propTypes2.default.object,
  extension: _propTypes2.default.string,
  showStartingDot: _propTypes2.default.bool,
  renderExtensionBox: _propTypes2.default.func,
  colors: _propTypes2.default.object,
  unknownExtensionColor: _propTypes2.default.string
};

exports.default = FileExtensionIcon;
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.getMSString = getMSString;
exports.getSecondsString = getSecondsString;
exports.getMinutesString = getMinutesString;
exports.getHoursString = getHoursString;
exports.getDaysString = getDaysString;
exports.default = timeFormatter;
/**
 * Copyright (c) 2015-present, Zippy Technologies
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var formatNumber = function formatNumber(number, locale) {
  return number.toLocaleString(locale, {
    maximumFractionDigits: 2
  });
};

var defaultProps = {
  millisecondText: 'ms',
  secondText: 's',
  minuteText: 'm',
  hourText: 'h',
  dayText: 'd',
  showMilliseconds: false,
  showSeconds: true,
  showMinutes: true,
  showHours: true,
  collapseHalfUnits: true,
  separator: ' ',
  formatNumber: formatNumber
};

var second = 1000;
var minute = 60 * second;
var hour = 60 * minute;
var day = 24 * hour;

function getMSString(parsedTime, config) {
  var result = '';
  if (config.showMilliseconds && config.showSeconds && config.showMinutes) {
    result = '' + parsedTime.mseconds + config.millisecondText;
  }
  return result;
}

function secondsAreNotLastEntry(parsedTime, config) {
  return (parsedTime.minutes || parsedTime.hours || parsedTime.days) && (config.showMinutes || config.showHours || config.showDays);
}

function getSecondsString(parsedTime, config) {
  var result = '';
  if (config.showSeconds && config.showMinutes) {
    var seconds = parsedTime.seconds;

    if (parsedTime.mseconds && !config.showMilliseconds) {
      seconds = seconds + parsedTime.mseconds / 1000;
      if (secondsAreNotLastEntry(parsedTime, config)) {
        seconds = Math.round(seconds);
      }
    }

    if (seconds) {
      result = '' + formatNumber(seconds) + config.secondText + (config.showMilliseconds ? config.separator : '');
    }
  }
  return result;
}

function minutesAreNotLastEntry(parsedTime, config) {
  return (parsedTime.hours || parsedTime.days) && (config.showHours || config.showDays);
}

function minutesAreFirstEntry(parsedTime, config) {
  return !(config.showSeconds || config.showMilliseconds);
}

function getMinutesString(parsedTime, config) {
  var result = '';
  if (config.showMinutes) {
    var minutes = parsedTime.minutes;

    if (minutesAreFirstEntry(parsedTime, config)) {
      // minutes never show decimals
      minutes = Math.round(minutes + parsedTime.seconds / 60 + parsedTime.mseconds / 1000);
    }

    if (minutes) {
      result = '' + formatNumber(minutes) + config.minuteText + (config.showSeconds ? config.separator : '');
    }
  }
  return result;
}

function hoursAreNotLastEntry(parsedTime, config) {
  return parsedTime.days && config.showDays;
}

function getHoursString(parsedTime, config) {
  var result = '';
  if (config.showHours) {
    var hours = parsedTime.hours;

    if (!config.showMinutes) {
      hours = hours + parsedTime.minutes / 60 + parsedTime.seconds / 3600;
      hours = Math.round(hours * 10) / 10;
    }

    if (hours) {
      result = '' + formatNumber(hours) + config.hourText + (config.showMinutes ? config.separator : '');
    }
  }
  return result;
}

function getDaysString(parsedTime, config) {
  var result = '';
  var days = parsedTime.days;

  if (!config.showHours) {
    days = days + parsedTime.hours / 24 + parsedTime.minutes / (24 * 60);
    days = Math.round(days * 10) / 10;
  }

  if (days) {
    result = '' + formatNumber(days) + config.dayText + (config.showHours ? config.separator : '');
  }
  return result;
}

/**
 * @pulbic timeFormatter
 *
 * formats the given time parameter into a pretty format based
 * on config parameter.
 *
 * @param time {mixted} can be the time in ms for now
 * @param config {object} composed of:
 *
 *   - @param config.millisecondText default 'ss', the text for milliseconds
 *   - @param config.secondText default 's', the text for seconds
 *   - @param config.minuteText default 'm', the text for minutes
 *   - @param config.hourText default 'h', the text for hours
 *   - @param config.dayText default 'd', the text for days
 *   - @param config.showMilliseconds default true, show/hide milliseconds
 *   - @param config.showSeconds default true, show/hide seconds and milliseconds
 *   - @param config.showMinutes default true, show/hide minutes, seconds, ms
 *   - @param config.collapseHalfUnits default true, round up smallest dispalyed value
 *   - @param config.locale, custom locale param passed to number.toLocaleStrings(locale)
 *   - @param config.formatNumber, custom number format function, used internally by
 *     the formatter
 */
function timeFormatter(time) {
  var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  var _config = config = _extends({}, defaultProps, config),
      millisecondText = _config.millisecondText,
      secondText = _config.secondText,
      minuteText = _config.minuteText,
      hourText = _config.hourText,
      dayText = _config.dayText,
      showMilliseconds = _config.showMilliseconds,
      showSeconds = _config.showSeconds,
      showMinutes = _config.showMinutes,
      collapseHalfUnits = _config.collapseHalfUnits,
      formatNumber = _config.formatNumber,
      locale = _config.locale;

  var digitsCount = time.toString().length;

  var days = Math.floor(time / day);
  var timeWithoutDays = time - days * day;

  var hours = Math.floor(timeWithoutDays / hour);
  var timeWithoutDaysAndHours = timeWithoutDays - hours * hour;

  var minutes = Math.floor(timeWithoutDaysAndHours / minute);
  var timeWithoutDaysHoursAndMinutes = timeWithoutDaysAndHours - minutes * minute;

  var seconds = Math.floor(timeWithoutDaysHoursAndMinutes / second);
  var mseconds = timeWithoutDaysHoursAndMinutes - seconds * second;

  var parsedTime = {
    mseconds: mseconds,
    seconds: seconds,
    minutes: minutes,
    hours: hours,
    days: days
  };

  var msString = getMSString(parsedTime, config);
  var secondsString = getSecondsString(parsedTime, config);
  var minutesString = getMinutesString(parsedTime, config);
  var hoursString = getHoursString(parsedTime, config);
  var daysString = getDaysString(parsedTime, config);
  return '' + daysString + hoursString + minutesString + secondsString + msString;
}

var secondsFormatter = function secondsFormatter(seconds, config) {
  return timeFormatter(seconds * 1000, config);
};

exports.timeFormatter = timeFormatter;
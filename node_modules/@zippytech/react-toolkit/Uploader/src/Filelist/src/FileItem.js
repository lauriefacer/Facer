'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FileItemPropTypes = exports.CLASS_NAME = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _autoBind = require('@zippytech/react-class/autoBind');

var _autoBind2 = _interopRequireDefault(_autoBind);

var _cleanProps = require('../../../../common/cleanProps');

var _cleanProps2 = _interopRequireDefault(_cleanProps);

var _join = require('../../../../common/join');

var _join2 = _interopRequireDefault(_join);

var _shouldComponentUpdate2 = require('../../../../common/shouldComponentUpdate');

var _shouldComponentUpdate3 = _interopRequireDefault(_shouldComponentUpdate2);

var _i18n = require('../../i18n');

var i18n = _interopRequireWildcard(_i18n);

var _ProgressBar = require('../../../../ProgressBar');

var _ProgressBar2 = _interopRequireDefault(_ProgressBar);

var _Button = require('../../../../Button');

var _Button2 = _interopRequireDefault(_Button);

var _FileExtensionIcon = require('./FileExtensionIcon');

var _FileExtensionIcon2 = _interopRequireDefault(_FileExtensionIcon);

var _splitFileInNameAndType = require('./utils/split-file-in-name-and-type');

var _splitFileInNameAndType2 = _interopRequireDefault(_splitFileInNameAndType);

var _fileSizeFormatter = require('./utils/file-size-formatter');

var _fileSizeFormatter2 = _interopRequireDefault(_fileSizeFormatter);

var _timeFormatter = require('./utils/time-formatter');

var _timeFormatter2 = _interopRequireDefault(_timeFormatter);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; } /**
                                                                                                                                                                                                                              * Copyright (c) 2015-present, Zippy Technologies
                                                                                                                                                                                                                              *
                                                                                                                                                                                                                              * This source code is licensed under the MIT license found in the
                                                                                                                                                                                                                              * LICENSE file in the root directory of this source tree.
                                                                                                                                                                                                                              */

var CLASS_NAME = 'zippy-react-file-item';

var renderFileErrorMessage = function renderFileErrorMessage(props) {
  return _react2.default.createElement(
    'div',
    { className: CLASS_NAME + '__error__text' },
    props.error.message
  );
};

var shouldShowUploadButton = function shouldShowUploadButton(props) {
  var showError = shouldShowError(props);
  return !showError && !props.hideUploadButton;
};

var renderUploadButton = function renderUploadButton(props) {
  var isLabel = props.isLabel,
      domProps = _objectWithoutProperties(props, ['isLabel']);

  if (isLabel) {
    return _react2.default.createElement('div', domProps);
  }
  return _react2.default.createElement(_Button2.default, domProps);
};

var renderFileExtensionIcon = function renderFileExtensionIcon(props) {
  return _react2.default.createElement(_FileExtensionIcon2.default, props);
};

var renderClearIcon = function renderClearIcon(props) {
  return _react2.default.createElement(
    'div',
    {
      className: CLASS_NAME + '__clear-icon__trigger',
      onClick: props.onClick
    },
    _react2.default.createElement(
      'svg',
      { className: CLASS_NAME + '__clear-icon__content', viewBox: '0 0 24 24' },
      _react2.default.createElement('path', { d: 'M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z' }),
      _react2.default.createElement('path', { d: 'M0 0h24v24H0z', fill: 'none' })
    )
  );
};

var renderFileName = function renderFileName(props) {
  return _react2.default.createElement(
    'span',
    { className: CLASS_NAME + '__name__text' },
    props.file.name
  );
};

var renderFileSize = function renderFileSize(_ref) {
  var fileSizeFormatter = _ref.fileSizeFormatter,
      file = _ref.file,
      locale = _ref.locale;

  return fileSizeFormatter(file.size || 0, { locale: locale });
};

var renderUploadProgress = function renderUploadProgress(props) {
  var uploadedSizeText = props.uploadedSizeText,
      totalSizeText = props.totalSizeText,
      etaText = props.etaText,
      percentage = props.percentage,
      percentageText = props.percentageText;

  var flooredPercentage = Math.floor(percentageText);
  return _react2.default.createElement(
    'div',
    { className: CLASS_NAME + '__progress__wrapper' },
    _react2.default.createElement(
      'div',
      {
        className: CLASS_NAME + '__progress__text',
        style: { position: 'relative' }
      },
      _react2.default.createElement(
        'div',
        null,
        uploadedSizeText,
        '/',
        totalSizeText,
        ' -'
      ),
      _react2.default.createElement(
        'div',
        { style: { marginLeft: 3 } },
        etaText,
        ' remaining'
      ),
      _react2.default.createElement(
        'div',
        { style: { position: 'absolute', right: 0, top: 0 } },
        flooredPercentage + '%'
      )
    ),
    _react2.default.createElement(_ProgressBar2.default, {
      value: percentage * 100,
      label: null,
      labelPosition: 'center',
      transitionDuration: '.2s'
    })
  );
};

var getMeaninfulUploaderProgressProps = function getMeaninfulUploaderProgressProps(uploadProgress, props) {
  var fileSizeFormatter = props.fileSizeFormatter,
      timeFormatter = props.timeFormatter,
      file = props.file,
      locale = props.locale,
      renderFileName = props.renderFileName;

  var _ref2 = uploadProgress || file.uploadProgress || {},
      _ref2$uploadedSize = _ref2.uploadedSize,
      uploadedSize = _ref2$uploadedSize === undefined ? 0 : _ref2$uploadedSize,
      _ref2$eta = _ref2.eta,
      eta = _ref2$eta === undefined ? 0 : _ref2$eta,
      done = _ref2.done,
      error = _ref2.error;

  return {
    done: done,
    uploaderError: error,
    uploadedSize: uploadedSize,
    uploadedSizeText: fileSizeFormatter(uploadedSize, { locale: locale }),
    etaText: timeFormatter(eta, { locale: locale }),
    percentage: uploadedSize / file.size,
    percentageText: (100 * (uploadedSize / file.size)).toLocaleString(locale, {
      maximumFractionDigits: 2
    }),
    totalSize: file.size,
    totalSizeText: fileSizeFormatter(file.size, { locale: locale })
  };
};

var shouldShowJustTheNameOfTheFile = function shouldShowJustTheNameOfTheFile(props) {
  var uploadProgress = props.uploadProgress,
      invalidDetails = props.invalidDetails,
      file = props.file;

  return !(Object.keys(uploadProgress).length || invalidDetails || file.invalidDetails);
};

var shouldShowError = function shouldShowError(props) {
  var uploadProgress = props.uploadProgress,
      invalidDetails = props.invalidDetails,
      file = props.file;

  return uploadProgress.error || invalidDetails || file.invalidDetails;
};

var shouldShowUploadDone = function shouldShowUploadDone(props) {
  var uploadProgress = props.uploadProgress,
      invalidDetails = props.invalidDetails,
      file = props.file;

  return uploadProgress.done;
};

// could be different in the future
var getFileError = function getFileError(props) {
  var uploadProgress = props.uploadProgress,
      _props$invalidDetails = props.invalidDetails,
      invalidDetails = _props$invalidDetails === undefined ? [] : _props$invalidDetails,
      file = props.file;

  var fileInvalidDetails = file.invalidDetails || [];
  if (uploadProgress.error) {
    return uploadProgress.error;
  }
  return invalidDetails[0] || fileInvalidDetails[0];
};

var uploadIsInProgress = function uploadIsInProgress(props) {
  var uploadProgress = props.uploadProgress;

  return uploadProgress.inProgress;
};

var getUploadActionText = function getUploadActionText(_ref3) {
  var inDoneState = _ref3.inDoneState,
      inQuedState = _ref3.inQuedState,
      inProgressState = _ref3.inProgressState,
      i18n = _ref3.i18n;

  if (inDoneState) {
    return i18n ? i18n.UPLOADED : 'uploaded';
  }

  if (inQuedState) {
    return i18n ? i18n.QUEUED : 'queued';
  }

  if (inProgressState) {
    return i18n ? i18n.UPLOADING : 'uploading';
  }

  return i18n ? i18n.UPLOAD : 'upload';
};

var renderSuccessState = function renderSuccessState(_ref4) {
  var file = _ref4.file,
      uploadProgress = _ref4.uploadProgress,
      locale = _ref4.locale,
      fileSizeFormatter = _ref4.fileSizeFormatter,
      timeFormatter = _ref4.timeFormatter;

  uploadProgress = uploadProgress || {};

  return _react2.default.createElement(
    'div',
    null,
    _react2.default.createElement(
      'div',
      { className: CLASS_NAME + '__success__text' },
      'Uploaded ',
      fileSizeFormatter(file.size, { locale: locale }),
      ' in',
      ' ',
      timeFormatter(uploadProgress.uploadTime, { locale: locale })
    )
  );
};

var FileItem = function (_Component) {
  _inherits(FileItem, _Component);

  function FileItem(props) {
    _classCallCheck(this, FileItem);

    var _this = _possibleConstructorReturn(this, (FileItem.__proto__ || Object.getPrototypeOf(FileItem)).call(this, props));

    (0, _autoBind2.default)(_this);
    return _this;
  }

  _createClass(FileItem, [{
    key: 'shouldComponentUpdate',
    value: function shouldComponentUpdate(nextProps, nextState) {
      return (0, _shouldComponentUpdate3.default)(this, nextProps, nextState);
    }
  }, {
    key: 'getClearIconContent',
    value: function getClearIconContent() {
      var _props = this.props,
          renderClearIcon = _props.renderClearIcon,
          onClearClick = _props.onClearClick;

      if (renderClearIcon) {
        return _react2.default.createElement(
          'div',
          { className: CLASS_NAME + '__clear-icon__layout' },
          renderClearIcon({ onClick: onClearClick })
        );
      }
    }
  }, {
    key: 'getNameContent',
    value: function getNameContent() {
      var _props2 = this.props,
          renderFileName = _props2.renderFileName,
          file = _props2.file;

      if (renderFileName) {
        return _react2.default.createElement(
          'div',
          { className: CLASS_NAME + '__name__layout' },
          renderFileName({ file: file }),
          this.getFileSizeContent()
        );
      }
    }
  }, {
    key: 'getFileExtensionContent',
    value: function getFileExtensionContent() {
      var _props3 = this.props,
          renderFileExtensionIcon = _props3.renderFileExtensionIcon,
          file = _props3.file;

      if (renderFileExtensionIcon) {
        return _react2.default.createElement(
          'div',
          { className: CLASS_NAME + '__extension__layout' },
          renderFileExtensionIcon({ file: file })
        );
      }
    }
  }, {
    key: 'getFileSizeContent',
    value: function getFileSizeContent() {
      var _props4 = this.props,
          renderFileSize = _props4.renderFileSize,
          file = _props4.file,
          fileSizeFormatter = _props4.fileSizeFormatter,
          locale = _props4.locale;

      if (renderFileSize) {
        return _react2.default.createElement(
          'div',
          { className: CLASS_NAME + '__size__layout' },
          renderFileSize({ file: file, fileSizeFormatter: fileSizeFormatter, locale: locale })
        );
      }
    }
  }, {
    key: 'getUploaderProgressContent',
    value: function getUploaderProgressContent() {
      var _props5 = this.props,
          renderUploadProgress = _props5.renderUploadProgress,
          renderFileName = _props5.renderFileName,
          file = _props5.file,
          uploadProgress = _props5.uploadProgress;

      if (renderUploadProgress) {
        return _react2.default.createElement(
          'div',
          { className: CLASS_NAME + '__progress__layout' },
          renderFileName({ file: file }),
          renderUploadProgress(getMeaninfulUploaderProgressProps(uploadProgress, this.props))
        );
      }
    }
  }, {
    key: 'getUploadButtonContent',
    value: function getUploadButtonContent(_ref5) {
      var inDoneState = _ref5.inDoneState,
          inQuedState = _ref5.inQuedState,
          inProgressState = _ref5.inProgressState;
      var _props6 = this.props,
          renderUploadButton = _props6.renderUploadButton,
          file = _props6.file,
          uploadText = _props6.uploadText,
          uploadingText = _props6.uploadingText,
          onUploadClick = _props6.onUploadClick,
          connected = _props6.connected,
          i18n = _props6.i18n,
          getUploadActionText = _props6.getUploadActionText;


      if (renderUploadButton) {
        var uploadActionText = getUploadActionText({
          inDoneState: inDoneState,
          inQuedState: inQuedState,
          inProgressState: inProgressState,
          i18n: i18n
        });

        var buttonStatusClassName = 'upload';
        var isLabel = false;
        if (inProgressState) {
          buttonStatusClassName = 'uploading';
          isLabel = true;
        }
        if (inQuedState) {
          buttonStatusClassName = 'queued';
          isLabel = true;
        }
        if (inDoneState) {
          buttonStatusClassName = 'uploaded';
          isLabel = true;
        }

        return _react2.default.createElement(
          'div',
          { className: CLASS_NAME + '__upload-button__layout' },
          renderUploadButton({
            children: uploadActionText,
            disabled: !connected,
            isLabel: isLabel,
            className: (0, _join2.default)(CLASS_NAME + '__upload-button__trigger', inDoneState && CLASS_NAME + '__upload-button__trigger--done', CLASS_NAME + '__upload-button__trigger--' + buttonStatusClassName, connected === false && CLASS_NAME + '__upload-button__trigger-disabled'),
            onClick: connected ? onUploadClick : function () {}
          })
        );
      }
    }
  }, {
    key: 'getErrorContent',
    value: function getErrorContent() {
      var props = this.props;
      var renderFileErrorMessage = props.renderFileErrorMessage,
          renderFileName = props.renderFileName,
          file = props.file;

      if (renderFileErrorMessage) {
        return _react2.default.createElement(
          'div',
          { className: CLASS_NAME + '__error__layout' },
          renderFileName({ file: file }),
          renderFileErrorMessage({ error: getFileError(props) })
        );
      }
    }
  }, {
    key: 'getSuccessContent',
    value: function getSuccessContent() {
      var props = this.props;
      var renderFileName = props.renderFileName,
          renderSuccessState = props.renderSuccessState,
          file = props.file,
          uploadProgress = props.uploadProgress,
          timeFormatter = props.timeFormatter,
          fileSizeFormatter = props.fileSizeFormatter,
          locale = props.locale;

      return _react2.default.createElement(
        'div',
        { className: CLASS_NAME + '__success__layout' },
        renderFileName && renderFileName({ file: file }),
        renderSuccessState && renderSuccessState({
          file: file,
          locale: locale,
          uploadProgress: uploadProgress,
          timeFormatter: timeFormatter,
          fileSizeFormatter: fileSizeFormatter
        })
      );
    }
  }, {
    key: 'getQueuedContent',
    value: function getQueuedContent() {
      var props = this.props;
      var renderFileName = props.renderFileName,
          file = props.file;

      if (renderFileName) {
        return _react2.default.createElement(
          'div',
          { className: CLASS_NAME + '__queued__layout' },
          renderFileName({ file: file }),
          this.getFileSizeContent()
        );
      }
    }
  }, {
    key: 'getClassNames',
    value: function getClassNames() {
      var className = this.props.className;


      var classNames = (0, _join2.default)(CLASS_NAME, className);

      return classNames;
    }
  }, {
    key: 'render',
    value: function render() {
      var props = this.props;
      var _props7 = this.props,
          uploadProgress = _props7.uploadProgress,
          _props7$uploadProgres = _props7.uploadProgress,
          queued = _props7$uploadProgres.queued,
          inProgressState = _props7$uploadProgres.inProgress,
          invalidDetails = _props7.invalidDetails,
          file = _props7.file;


      var inDoneState = shouldShowUploadDone(props);
      var inQuedState = queued;
      return _react2.default.createElement(
        'div',
        _extends({}, (0, _cleanProps2.default)(this.props, FileItem.propTypes), {
          'data-file-id': file.id,
          className: this.getClassNames()
        }),
        this.getFileExtensionContent(props),
        shouldShowJustTheNameOfTheFile(props) ? this.getNameContent() : null,
        shouldShowError(props) ? this.getErrorContent() : null,
        inDoneState ? this.getSuccessContent() : null,
        inQuedState ? this.getQueuedContent() : null,
        inProgressState ? this.getUploaderProgressContent() : null,
        shouldShowUploadButton(props) ? this.getUploadButtonContent({
          inDoneState: inDoneState,
          inQuedState: inQuedState,
          inProgressState: inProgressState
        }) : null,
        this.getClearIconContent()
      );
    }
  }]);

  return FileItem;
}(_react.Component);

FileItem.defaultProps = {
  renderFileExtensionIcon: renderFileExtensionIcon,
  renderClearIcon: renderClearIcon,
  renderFileName: renderFileName,
  renderFileSize: renderFileSize,
  renderUploadProgress: renderUploadProgress,
  renderUploadButton: renderUploadButton,
  renderFileErrorMessage: renderFileErrorMessage,
  renderSuccessState: renderSuccessState,

  file: {},
  uploadProgress: {},
  timeFormatter: _timeFormatter2.default,
  fileSizeFormatter: _fileSizeFormatter2.default,

  uploadText: 'upload',
  uploadingText: 'uploading',

  hideUploadButton: false,

  getUploadActionText: getUploadActionText
};

var FileItemPropTypes = FileItem.propTypes = {
  shouldComponentUpdate: _propTypes2.default.func,

  file: _propTypes2.default.object,
  invalidDetails: _propTypes2.default.oneOfType([_propTypes2.default.object, _propTypes2.default.arrayOf(_propTypes2.default.object)]),
  uploadProgress: _propTypes2.default.object,

  renderFileExtensionIcon: _propTypes2.default.func,
  renderClearIcon: _propTypes2.default.func,
  renderFileName: _propTypes2.default.func,
  renderFileSize: _propTypes2.default.func,

  renderFileErrorMessage: _propTypes2.default.func,
  renderUploadProgress: _propTypes2.default.func,
  renderUploadButton: _propTypes2.default.func,
  renderSuccessState: _propTypes2.default.func,

  connected: _propTypes2.default.bool,

  timeFormatter: _propTypes2.default.func,
  fileSizeFormatter: _propTypes2.default.func,

  uploadText: _propTypes2.default.string,
  uploadingText: _propTypes2.default.string,

  onClearClick: _propTypes2.default.func,
  onUploadClick: _propTypes2.default.func,
  onUploadCancelClick: _propTypes2.default.func,
  i18n: _propTypes2.default.object,

  getUploadActionText: _propTypes2.default.func,

  hideUploadButton: _propTypes2.default.bool,

  locale: _propTypes2.default.string
};

exports.default = FileItem;
exports.CLASS_NAME = CLASS_NAME;
exports.FileItemPropTypes = FileItemPropTypes;
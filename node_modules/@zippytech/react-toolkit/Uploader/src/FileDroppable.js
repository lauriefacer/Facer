'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FileDroppable = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; /**
                                                                                                                                                                                                                                                                               * Copyright (c) 2015-present, Zippy Technologies
                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                               * This source code is licensed under the MIT license found in the
                                                                                                                                                                                                                                                                               * LICENSE file in the root directory of this source tree.
                                                                                                                                                                                                                                                                               */

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _reactDom = require('react-dom');

var _autoBind = require('@zippytech/react-class/autoBind');

var _autoBind2 = _interopRequireDefault(_autoBind);

var _cleanProps = require('../../common/cleanProps');

var _cleanProps2 = _interopRequireDefault(_cleanProps);

var _join = require('../../common/join');

var _join2 = _interopRequireDefault(_join);

var _shouldComponentUpdate2 = require('../../common/shouldComponentUpdate');

var _shouldComponentUpdate3 = _interopRequireDefault(_shouldComponentUpdate2);

var _assignUniqueFileIds = require('./utils/assign-unique-file-ids');

var _assignUniqueFileIds2 = _interopRequireDefault(_assignUniqueFileIds);

var _props7 = require('./props');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var setInvalidityReasson = function setInvalidityReasson(file, reasonKey, reasonMessage) {
  if (!file.invalidDetails) {
    file.invalidDetails = [];
  }

  file.invalidDetails.push({
    reason: reasonKey,
    message: reasonMessage
  });
};

var markInvalidIfOverMaxCount = function markInvalidIfOverMaxCount(files, fileMaxCount) {
  if (files.length > fileMaxCount) {
    files.slice(fileMaxCount).forEach(function (file, index) {
      file.valid = false;
      setInvalidityReasson(file, '‘fileMaxCount’', 'File ' + file.name + ' could not be added because the list is full (fileMaxCount=' + fileMaxCount + ')');
    });
  }

  return files;
};

var markDuplicateFilesById = function markDuplicateFilesById(files) {
  var fileMap = {};
  files.forEach(function (file) {
    var id = file.id;

    if (file.valid && fileMap[id]) {
      file.valid = false;
      setInvalidityReasson(file, 'fileDuplicate', 'A file that looks just like ' + file.name + ' already exists');
    } else {
      fileMap[id] = true;
    }
  });
  return files;
};

var assignUserDecidedInvalidFlags = function assignUserDecidedInvalidFlags(file, userDecidedValidity) {
  if (Array.isArray(userDecidedValidity)) {
    userDecidedValidity.forEach(function (reassonEntity) {
      assignUserDecidedInvalidFlags(file, reassonEntity);
    });
  } else {
    var typeofUserDecidedValidity = typeof userDecidedValidity === 'undefined' ? 'undefined' : _typeof(userDecidedValidity);
    if (typeofUserDecidedValidity === 'string') {
      setInvalidityReasson(file, 'userValidity', userDecidedValidity);
    } else if (typeofUserDecidedValidity === 'object') {
      setInvalidityReasson(file, userDecidedValidity.reasson, userDecidedValidity.message);
    }
  }
};

var getFileMaxCount = function getFileMaxCount(_ref) {
  var fileMaxCount = _ref.fileMaxCount,
      multiple = _ref.multiple;

  if (!multiple) {
    return 1;
  }

  return fileMaxCount;
};

var hookUserValidation = function hookUserValidation(files, isFileValid) {
  isFileValid && files.forEach(function (file, index) {
    var userDecidedValidity = isFileValid({
      file: file,
      valid: file.valid,
      files: files,
      index: index
    });
    if (userDecidedValidity === true) {
      file.valid = true;
      delete file.invalidDetails;
    } else {
      file.valid = false;
      assignUserDecidedInvalidFlags(file, userDecidedValidity);
    }
  });
  return files;
};

var isReallyDragLeave = function isReallyDragLeave(event, node) {
  var rect = node.getBoundingClientRect();
  var nativeEvent = event.nativeEvent;
  var x = nativeEvent.x,
      y = nativeEvent.y;


  return x >= rect.left + rect.width || x <= rect.left || y >= rect.top + rect.height || y <= rect.top;
};

function FileDroppable(ComponentClass) {
  var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  var supportMultiple = typeof document !== 'undefined' && document && document.createElement ? 'multiple' in document.createElement('input') : true;

  var FileDroppable = function (_Component) {
    _inherits(FileDroppable, _Component);

    function FileDroppable(props, context) {
      _classCallCheck(this, FileDroppable);

      var _this = _possibleConstructorReturn(this, (FileDroppable.__proto__ || Object.getPrototypeOf(FileDroppable)).call(this, props, context));

      (0, _autoBind2.default)(_this);
      _this.state = {
        isOver: false
      };

      var files = props.files,
          defaultFiles = props.defaultFiles;

      var initialFilesLength = (files || defaultFiles || []).length;

      if (!_this.isControlled(props)) {
        _this.state.currentFiles = _this.getCurrentFiles(props);
        initialFilesLength = _this.state.currentFiles.length;
      }

      _this.state.isEmpty = initialFilesLength === 0;
      return _this;
    }

    _createClass(FileDroppable, [{
      key: 'shouldComponentUpdate',
      value: function shouldComponentUpdate(nextProps, nextState) {
        return (0, _shouldComponentUpdate3.default)(this, nextProps, nextState);
      }

      // -----------------------------------------------------------------------------
      // begin interaction handlers
      // -----------------------------------------------------------------------------

    }, {
      key: '_stopEvent',
      value: function _stopEvent(event) {
        event.preventDefault && event.preventDefault();
        event.stopPropagation && event.stopPropagation();
      }
    }, {
      key: '_getFilesFromEvenObject',
      value: function _getFilesFromEvenObject(event) {
        return (event.dataTransfer ? event.dataTransfer.files : event.target.files) || [];
      }
    }, {
      key: 'componentDidMount',
      value: function componentDidMount() {
        this.node = (0, _reactDom.findDOMNode)(this);
      }
    }, {
      key: 'onDragEnter',
      value: function onDragEnter(event) {
        this._stopEvent(event);
        this.setState({ isOver: true, isValid: null });
        var onDragEnter = this.props.onDragEnter;

        onDragEnter && onDragEnter(event);
      }
    }, {
      key: 'onDragStart',
      value: function onDragStart(event) {
        this._stopEvent(event);
      }
    }, {
      key: 'onDragOver',
      value: function onDragOver(event) {
        event.preventDefault();
      }
    }, {
      key: 'onDragLeave',
      value: function onDragLeave(event) {
        this._stopEvent(event);
        if (isReallyDragLeave(event, this.node)) {
          this.setState({ isOver: false, isValid: null });
          var onDragLeave = this.props.onDragLeave;

          onDragLeave && onDragLeave(event);
        }
      }

      // onPick should be called

    }, {
      key: 'onPick',
      value: function onPick(event) {
        this._stopEvent(event);

        this.enterCounter = 0;

        var pickedFiles = Array.prototype.slice.call(this._getFilesFromEvenObject(event));
        return this.addFiles(pickedFiles, event);
      }
    }, {
      key: 'onDisableDrop',
      value: function onDisableDrop(event) {
        this._stopEvent(event);
      }
    }, {
      key: 'addFiles',
      value: function addFiles(pickedFiles, event) {
        var _this2 = this;

        var _props = this.props,
            onDrop = _props.onDrop,
            onChange = _props.onChange,
            acceptInvalid = _props.acceptInvalid,
            disabled = _props.disabled;

        return this.getNewCurrentFiles(pickedFiles).then(function (newCurrentFiles) {
          // only active files, not combined get into onDrop
          var _splitItemsByValidity = _this2.splitItemsByValidity(pickedFiles),
              validFiles = _splitItemsByValidity.validFiles,
              invalidFiles = _splitItemsByValidity.invalidFiles;

          var isValid = !invalidFiles.length;

          onDrop && onDrop({
            files: pickedFiles,
            validFiles: validFiles,
            invalidFiles: invalidFiles,
            isValid: isValid
          });

          onChange && onChange({
            files: newCurrentFiles,
            event: event
          });

          var nextStateProps = {
            isValid: isValid,
            isOver: false
          };

          if (!_this2.isControlled()) {
            nextStateProps.currentFiles = newCurrentFiles;
          }
          return new Promise(function (resolve) {
            _this2.setState(nextStateProps, resolve);
          });
        });
      }

      // -----------------------------------------------------------------------------
      // end interaction handlers
      // -----------------------------------------------------------------------------

      // -----------------------------------------------------------------------------
      // begin uncontrolled behavior
      // -----------------------------------------------------------------------------

      // handleIternalFilePick(pickedFiles) {
      //   const {app}
      // }

      // -----------------------------------------------------------------------------
      // end uncontrolled behavior
      // -----------------------------------------------------------------------------

      // -----------------------------------------------------------------------------
      // begin instance logic functions
      // -----------------------------------------------------------------------------

    }, {
      key: 'isControlled',
      value: function isControlled(props) {
        return !!(props || this.props).files;
      }

      // will be ran each render when computing props to send to wrapped component
      // will be ran when a drop event happens. If an alteration of the file array
      // happens here, it should always be applied each time a prop is set, a state
      // is change, or a render is triggered.

    }, {
      key: 'setFileValidity',
      value: function setFileValidity(files) {
        var _this3 = this;

        var controlProps = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        var _props2 = this.props,
            acceptsFile = _props2.acceptsFile,
            accept = _props2.accept,
            isFileValid = _props2.isFileValid,
            acceptDuplicates = _props2.acceptDuplicates;


        var fileMaxCount = getFileMaxCount(this.props);

        files.forEach(function (file, index) {
          delete file.invalidDetails;

          var fileAccepted = acceptsFile(file, accept, index, files, _this3.props);
          var validFileSize = _this3.validFileSize(file);
          var fileCountOk = fileMaxCount > index;

          !fileAccepted && setInvalidityReasson(file, 'fileAccept', 'File ' + file.name + ' did not pass the given accept test');

          !fileCountOk && setInvalidityReasson(file, 'fileMaxCount', 'File ' + file.name + ' could not be added because the list is full (fileMaxCount=' + fileMaxCount + ')');
          file.isDirectory && setInvalidityReasson(file, 'directory', 'File ' + file.name + ' could not be added because it is a directory');

          file.valid = fileAccepted && validFileSize && fileCountOk && !file.isDirectory;
        });

        // in append on drop, we need to check duplicates after we merge with existing
        // files, so duplication check needs to happen after setting file validity
        // based on accept, size and count
        if (!acceptDuplicates && !controlProps.skipDuplicate) {
          markDuplicateFilesById(files);
        }

        // in append on drop, we need to check duplicates after we merge with existing
        // files, so validation via user hook should happen after that.
        if (!controlProps.skipUserIsValid) {
          hookUserValidation(files, isFileValid);
        }

        return files;
      }
    }, {
      key: 'validFileSize',
      value: function validFileSize(file) {
        var _props3 = this.props,
            fileMinSize = _props3.fileMinSize,
            fileMaxSize = _props3.fileMaxSize,
            fileSizeFormatter = _props3.fileSizeFormatter,
            locale = _props3.locale;

        var size = file.size || 0;

        var okMinSize = size >= fileMinSize;
        var okMaxSize = size <= fileMaxSize;

        !okMinSize && setInvalidityReasson(file, 'fileMinSize', 'The file size is less than ' + fileSizeFormatter(fileMinSize, {
          locale: locale
        }));
        !okMaxSize && setInvalidityReasson(file, 'fileMaxSize', 'The file exceeds the maximum allowed size of ' + fileSizeFormatter(fileMaxSize, {
          locale: locale
        }));

        return okMinSize && okMaxSize;
      }
    }, {
      key: 'splitItemsByValidity',
      value: function splitItemsByValidity(files) {
        var invalidFiles = [];
        var validFiles = [];

        files.forEach(function (file) {
          if (file.valid) {
            validFiles.push(file);
          } else {
            invalidFiles.push(file);
          }
        });

        return { invalidFiles: invalidFiles, validFiles: validFiles };
      }
    }, {
      key: 'getNewCurrentFiles',
      value: function getNewCurrentFiles(newProvidedFiles) {
        var _this4 = this;

        var _props4 = this.props,
            appendOnDrop = _props4.appendOnDrop,
            acceptDuplicates = _props4.acceptDuplicates,
            acceptInvalid = _props4.acceptInvalid,
            isFileValid = _props4.isFileValid,
            flagDirectories = _props4.flagDirectories;


        var fileMaxCount = getFileMaxCount(this.props);

        return flagDirectories(newProvidedFiles).then(function () {
          var newCurrentFiles = _this4.setValidityAndClientUId(newProvidedFiles, _this4.props, { skipDuplicate: appendOnDrop, skipUserIsValid: appendOnDrop });

          if (appendOnDrop) {
            newCurrentFiles = [].concat(_toConsumableArray(_this4.getCurrentFiles()), _toConsumableArray(newCurrentFiles));

            markInvalidIfOverMaxCount(newCurrentFiles, fileMaxCount);
            !acceptDuplicates && markDuplicateFilesById(newCurrentFiles);
            hookUserValidation(newCurrentFiles, isFileValid);
          }

          if (!acceptInvalid) {
            newCurrentFiles = _this4.splitItemsByValidity(newCurrentFiles).validFiles;
          }
          return Promise.resolve(newCurrentFiles);
        });
      }

      // -----------------------------------------------------------------------------
      // end instance logic functions
      // -----------------------------------------------------------------------------

      // -----------------------------------------------------------------------------
      // begin props functions
      // -----------------------------------------------------------------------------

    }, {
      key: 'getCustomPropsForWrappedComponent',
      value: function getCustomPropsForWrappedComponent() {
        var props = this.props;
        var multiple = props.multiple,
            accept = props.accept,
            acceptDuplicates = props.acceptDuplicates,
            acceptInvalid = props.acceptInvalid,
            i18n = props.i18n,
            filePicker = props.filePicker,
            fileMaxSize = props.fileMaxSize,
            fileMinSize = props.fileMinSize,
            fileMaxCount = props.fileMaxCount,
            disabled = props.disabled,
            fileSizeFormatter = props.fileSizeFormatter,
            timeFormatter = props.timeFormatter;

        var files = this.getCurrentFiles();

        var _state = this.state,
            isOver = _state.isOver,
            isValid = _state.isValid;

        var wrappedInstanceProps = {
          events: disabled ? { onDrop: this.onDisabledDrop } : {
            onDragOver: this.onDragOver,
            onDragStart: this.onDragStart,
            onDragLeave: this.onDragLeave,
            onDragEnter: this.onDragEnter,
            onDrop: this.onPick
          },

          getFiles: this.getFiles,
          getTotalFileSize: this.getTotalFileSize,
          getFileNames: this.getFileNames,
          clearFiles: this.clearFiles,
          removeFile: this.removeFile,
          removeFileAt: this.removeFileAt,

          files: files,
          multiple: supportMultiple && multiple,

          accept: accept,
          acceptDuplicates: acceptDuplicates,
          acceptInvalid: acceptInvalid,
          i18n: i18n,

          fileMaxSize: fileMaxSize,
          fileMinSize: fileMinSize,
          fileMaxCount: getFileMaxCount(this.props),

          isOver: isOver,
          isValid: isValid,
          isEmpty: files.length === 0,

          fileSizeFormatter: fileSizeFormatter,
          timeFormatter: timeFormatter
        };

        return wrappedInstanceProps;
      }
    }, {
      key: 'getForwardProp',
      value: function getForwardProp() {
        var forwardProp = config.forwardProp;

        var forwardPropName = 'forwardProp';
        var result = this.getCustomPropsForWrappedComponent();

        if (forwardProp !== null) {
          if (typeof forwardProp === 'string') {
            forwardPropName = forwardProp;
          }
          result = _defineProperty({}, '' + forwardPropName, result);
        }

        return result;
      }

      // method for getting files based on state and props.
      // used on every render once.
      // use getFile for external use instead of this one.

    }, {
      key: 'getCurrentFiles',
      value: function getCurrentFiles(props, state) {
        props = props || this.props;
        var _props5 = props,
            files = _props5.files,
            defaultFiles = _props5.defaultFiles;

        var _ref2 = state || this.state,
            stateFiles = _ref2.currentFiles;

        var currentFiles = [];

        if (files) {
          currentFiles = this.setValidityAndClientUId(files, props);
        } else if (stateFiles) {
          currentFiles = stateFiles;
        } else if (defaultFiles) {
          currentFiles = this.setValidityAndClientUId(defaultFiles, props);
        }

        return currentFiles;
      }
    }, {
      key: 'setValidityAndClientUId',
      value: function setValidityAndClientUId(files, props, controlProps) {
        var _ref3 = props || this.props,
            generateUniqueFileIdentifier = _ref3.generateUniqueFileIdentifier;

        return this.setFileValidity((0, _assignUniqueFileIds2.default)(files, generateUniqueFileIdentifier), controlProps);
      }

      // -----------------------------------------------------------------------------
      // end props functions
      // -----------------------------------------------------------------------------

      // -----------------------------------------------------------------------------
      // begin public api
      // -----------------------------------------------------------------------------

    }, {
      key: 'getFiles',
      value: function getFiles() {
        var newFiles = this.getCurrentFiles(this.props, this.state);
        return this.props.files || this.state.currentFiles;
      }
    }, {
      key: 'getFileNames',
      value: function getFileNames() {
        return this.getFiles().map(function (file) {
          return file.name || '';
        });
      }
    }, {
      key: 'getTotalFileSize',
      value: function getTotalFileSize() {
        var files = this.getFiles();
        var totalSize = 0;
        files.forEach(function (file) {
          totalSize += file.size || 0;
        });
        return totalSize;
      }
    }, {
      key: 'revalidateFiles',
      value: function revalidateFiles() {
        var onChange = this.props.onChange;

        var files = this.getFiles();
        var reValidatedFiles = this.setFileValidity(files);
        if (!this.isControlled()) {
          this.setState({
            currentFiles: reValidatedFiles,
            isValid: reValidatedFiles.length === 0 ? null : !reValidatedFiles.filter(function (file) {
              return !file.valid;
            }).length
          });
        }

        onChange && onChange({
          files: reValidatedFiles,
          event: null
        });
      }
    }, {
      key: 'clearFiles',
      value: function clearFiles() {
        var onChange = this.props.onChange;

        var nextState = { isValid: null };
        if (!this.isControlled()) {
          nextState.currentFiles = [];
        }

        this.setState(nextState);

        onChange && onChange({
          files: [],
          event: null
        });
      }
    }, {
      key: 'removeFileAt',
      value: function removeFileAt(idx) {
        var _this5 = this;

        var files = this.getFiles();

        var _props6 = this.props,
            onChange = _props6.onChange,
            onRemoveAt = _props6.onRemoveAt;


        if (idx < 0 || idx > files.length) {
          return null;
        }

        var action = onRemoveAt ? onRemoveAt({
          idx: idx,
          file: files[idx]
        }) : true;

        if (!action) {
          return;
        }

        var newFiles = files;
        if (idx >= 0 && idx < files.length) {
          newFiles = [].concat(_toConsumableArray(files.slice(0, idx)), _toConsumableArray(files.slice(idx + 1)));
        }

        if (!this.isControlled()) {
          this.setState({
            currentFiles: newFiles
          }, function () {
            _this5.revalidateFiles();
          });
        } else {
          onChange && onChange({
            files: newFiles,
            event: null
          });
        }
      }
    }, {
      key: 'removeFile',
      value: function removeFile(fileID) {
        var files = this.getFiles();
        var targetFile = files.findIndex(function (file) {
          return file.id === fileID;
        });
        if (targetFile !== -1) {
          return this.removeFileAt(targetFile);
        }
        return null;
      }
      // -----------------------------------------------------------------------------
      // end public api
      // -----------------------------------------------------------------------------

    }, {
      key: 'render',
      value: function render() {
        return _react2.default.createElement(
          ComponentClass,
          _extends({}, this.getForwardProp(), (0, _cleanProps2.default)(this.props, _props7.hocPropTypes)),
          this.props.children
        );
      }
    }]);

    return FileDroppable;
  }(_react.Component);

  var configuredDefaultProps = {};
  Object.keys(_props7.hocDefaultProps).forEach(function (key) {
    configuredDefaultProps[key] = config[key];
    if (config[key] == null) {
      configuredDefaultProps[key] = _props7.hocDefaultProps[key];
    }
  });

  // syntax sugar for fileMaxCount = 1
  if (config.multiple === false) {
    configuredDefaultProps.fileMaxCount = 1;
  }

  FileDroppable.defaultProps = configuredDefaultProps;
  FileDroppable.propTypes = _props7.hocPropTypes;
  return FileDroppable;
}

exports.FileDroppable = FileDroppable;
exports.default = FileDroppable;
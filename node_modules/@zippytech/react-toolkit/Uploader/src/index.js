'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FileExtensionIcon = exports.timeFormatter = exports.fileSizeFormatter = undefined;

var _extends2;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; /**
                                                                                                                                                                                                                                                                   * Copyright (c) 2015-present, Zippy Technologies
                                                                                                                                                                                                                                                                   *
                                                                                                                                                                                                                                                                   * This source code is licensed under the MIT license found in the
                                                                                                                                                                                                                                                                   * LICENSE file in the root directory of this source tree.
                                                                                                                                                                                                                                                                   */

var _FileList = require('./Filelist/src/FileList');

Object.defineProperty(exports, 'fileSizeFormatter', {
  enumerable: true,
  get: function get() {
    return _FileList.fileSizeFormatter;
  }
});
Object.defineProperty(exports, 'timeFormatter', {
  enumerable: true,
  get: function get() {
    return _FileList.timeFormatter;
  }
});
Object.defineProperty(exports, 'FileExtensionIcon', {
  enumerable: true,
  get: function get() {
    return _FileList.FileExtensionIcon;
  }
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _autoBind = require('@zippytech/react-class/autoBind');

var _autoBind2 = _interopRequireDefault(_autoBind);

var _join = require('../../common/join');

var _join2 = _interopRequireDefault(_join);

var _shouldComponentUpdate2 = require('../../common/shouldComponentUpdate');

var _shouldComponentUpdate3 = _interopRequireDefault(_shouldComponentUpdate2);

var _cleanProps = require('../../common/cleanProps');

var _cleanProps2 = _interopRequireDefault(_cleanProps);

var _i18n = require('./i18n');

var i18n = _interopRequireWildcard(_i18n);

var _FileList2 = _interopRequireDefault(_FileList);

var _ProgressBar = require('../../ProgressBar');

var _ProgressBar2 = _interopRequireDefault(_ProgressBar);

var _Button = require('../../Button');

var _Button2 = _interopRequireDefault(_Button);

var _FileInput = require('./FileInput');

var _FileInput2 = _interopRequireDefault(_FileInput);

var _props4 = require('./props');

var _xhr = require('xhr');

var _xhr2 = _interopRequireDefault(_xhr);

var _lodash = require('lodash.throttle');

var _lodash2 = _interopRequireDefault(_lodash);

var _FileDropZone = require('./FileDropZone');

var _FileDropZone2 = _interopRequireDefault(_FileDropZone);

var _pickProps = require('./utils/pick-props');

var _pickProps2 = _interopRequireDefault(_pickProps);

var _fileProgressDetails = require('./utils/uploader/file-progress-details');

var _blobFileUploader = require('./utils/uploader/blob-file-uploader');

var _chunkFileUploader = require('./utils/uploader/chunk-file-uploader');

var _fileQueueManagement = require('./utils/uploader/file-queue-management');

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var CLASS_NAME = 'zippy-react-uploader';

var getNumberOfFilesMarkedForUpload = function getNumberOfFilesMarkedForUpload(files, uploadProgress) {
  var currentlyInUploadQueue = 0;
  Object.keys(uploadProgress).forEach(function (key) {
    var _ref = uploadProgress[key] || {},
        inProgress = _ref.inProgress,
        queued = _ref.queued;

    if (inProgress || queued) {
      currentlyInUploadQueue++;
    }
  });
  return currentlyInUploadQueue;
};

var getFileListProps = function getFileListProps(api) {
  var startUploadFile = api.startUploadFile,
      removeFile = api.removeFile,
      cancelUploadFile = api.cancelUploadFile;


  return {
    uploadFile: startUploadFile,
    removeFile: removeFile,
    cancelUploadFile: cancelUploadFile
  };
};

var renderGlobalProgressBar = function renderGlobalProgressBar(props) {
  var totalSize = props.totalSize,
      totalUploaded = props.totalUploaded,
      totalSizeText = props.totalSizeText,
      totalUploadedText = props.totalUploadedText,
      etaText = props.etaText,
      percentage = props.percentage,
      percentageText = props.percentageText;

  var flooredPercentage = Math.floor(percentageText);
  if (totalSize && totalUploaded) {
    return _react2.default.createElement(
      'div',
      null,
      _react2.default.createElement(
        'div',
        { style: { position: 'relative' } },
        totalUploadedText,
        '/',
        totalSizeText,
        etaText && ' - ' + etaText + ' remaining' || '',
        _react2.default.createElement(
          'div',
          {
            style: { position: 'absolute', right: 0, top: 0 }
          },
          flooredPercentage + '%'
        )
      ),
      _react2.default.createElement(_ProgressBar2.default, {
        value: percentage,
        label: null,
        fillColor: null,
        labelFillColor: null,
        labelRemainingColor: null,
        labelPosition: 'center',
        transitionDuration: '.2s'
      })
    );
  }

  return null;
};

var renderGlobalProgressBarLayout = function renderGlobalProgressBarLayout(props) {
  var renderGlobalProgressBar = props.renderGlobalProgressBar,
      uploadProgress = props.uploadProgress,
      fileSizeFormatter = props.fileSizeFormatter,
      timeFormatter = props.timeFormatter,
      locale = props.locale,
      files = props.files;

  var _getFilesUplaodProgre = (0, _fileProgressDetails.getFilesUplaodProgress)(uploadProgress),
      percentage = _getFilesUplaodProgre.percentage,
      totalSizeOfFiles = _getFilesUplaodProgre.totalSizeOfFiles,
      totalUploadedSizeOfFiles = _getFilesUplaodProgre.totalUploadedSizeOfFiles,
      globalEta = _getFilesUplaodProgre.globalEta;

  var percentageText = '';
  var totalSizeText = '';
  var totalUploadedText = '';
  var etaText = '';

  if (totalSizeOfFiles && totalUploadedSizeOfFiles) {
    percentageText = percentage.toLocaleString(locale, {
      maximumFractionDigits: 2
    });
    totalSizeText = fileSizeFormatter(totalSizeOfFiles, { locale: locale });
    totalUploadedText = fileSizeFormatter(totalUploadedSizeOfFiles, { locale: locale });
    etaText = timeFormatter(globalEta, { locale: locale });
  }

  var content = renderGlobalProgressBar({
    percentage: percentage,
    percentageText: percentageText,
    totalSize: totalSizeOfFiles,
    totalSizeText: totalSizeText,
    totalUploaded: totalUploadedSizeOfFiles,
    totalUploadedText: totalUploadedText,
    files: files,
    uploadProgress: uploadProgress,
    eta: globalEta,
    etaText: etaText
  });

  return _react2.default.createElement(
    'div',
    { className: CLASS_NAME + '__menu-progress-layout' },
    content
  );
};

// returns true if some files are not uploading or in the queue of being uploaded
var allFilesHaveProgress = function allFilesHaveProgress(files, uploadProgress) {
  return files.every(function (file) {
    return !!uploadProgress[file.id];
  });
};

var shouldShowUploadButton = function shouldShowUploadButton(files, uploadProgress, hasValidFiles) {
  if (!hasValidFiles) {
    return false;
  }
  return !allFilesHaveProgress(files, uploadProgress) && files.length;
};

var renderFilePickButton = function renderFilePickButton(_ref2) {
  var files = _ref2.files,
      domProps = _ref2.domProps,
      onSelectFiles = _ref2.onSelectFiles;
  return _react2.default.createElement(_FileInput2.default, _extends({}, domProps, { onChange: onSelectFiles }));
};

var renderFilePickButtonLayout = function renderFilePickButtonLayout(props) {
  var files = props.files,
      onSelectFiles = props.onSelectFiles,
      label = props.label,
      renderFilePickButton = props.renderFilePickButton,
      disabled = props.disabled;


  return _react2.default.createElement(
    'div',
    { className: CLASS_NAME + '__button-layout' },
    renderFilePickButton({
      files: files,
      onSelectFiles: !disabled ? onSelectFiles : null,
      domProps: {
        disabled: disabled,
        children: label,
        className: (0, _join2.default)(CLASS_NAME + '__button', disabled && CLASS_NAME + '__button-disabled')
      }
    })
  );
};

var renderClearAllButton = function renderClearAllButton(_ref3) {
  var files = _ref3.files,
      domProps = _ref3.domProps;

  return _react2.default.createElement(_Button2.default, domProps);
};

var renderClearAllButtonLayout = function renderClearAllButtonLayout(props) {
  var files = props.files,
      clearFiles = props.clearFiles,
      label = props.label,
      renderClearAllButton = props.renderClearAllButton,
      disabled = props.disabled;


  return _react2.default.createElement(
    'div',
    { className: CLASS_NAME + '__button-layout' },
    renderClearAllButton({
      files: files,
      domProps: {
        disabled: disabled || !files.length,
        onClick: disabled ? null : clearFiles,
        children: label,
        className: CLASS_NAME + '__toolbar-button'
      },
      clearFiles: clearFiles
    })
  );
};

var renderErrorMessage = function renderErrorMessage(_ref4) {
  var files = _ref4.files,
      hasConnection = _ref4.hasConnection,
      domProps = _ref4.domProps;

  return files.length !== 0 && !hasConnection && _react2.default.createElement('div', _extends({ className: CLASS_NAME + '__errorMessage' }, domProps));
};

var renderErrorMessageLayout = function renderErrorMessageLayout(props) {
  var files = props.files,
      label = props.label,
      renderErrorMessage = props.renderErrorMessage,
      hasConnection = props.hasConnection;


  return _react2.default.createElement(
    'div',
    { className: CLASS_NAME + '__error-message-layout' },
    renderErrorMessage({
      files: files,
      hasConnection: hasConnection,
      domProps: {
        children: label,
        className: CLASS_NAME + '__error-message'
      }
    })
  );
};

var renderUploadAllButton = function renderUploadAllButton(_ref5) {
  var files = _ref5.files,
      domProps = _ref5.domProps,
      uploadProgress = _ref5.uploadProgress;

  return _react2.default.createElement(_Button2.default, domProps);
};

var renderUploadAllButtonLayout = function renderUploadAllButtonLayout(props) {
  var files = props.files,
      uploadFiles = props.uploadFiles,
      label = props.label,
      renderUploadAllButton = props.renderUploadAllButton,
      uploadProgress = props.uploadProgress,
      disabled = props.disabled,
      connected = props.connected,
      hasValidFiles = props.hasValidFiles;

  return _react2.default.createElement(
    'div',
    { className: CLASS_NAME + '__button-layout' },
    shouldShowUploadButton(files, uploadProgress, hasValidFiles) && renderUploadAllButton({
      files: files,
      domProps: {
        disabled: disabled || !hasValidFiles,
        className: CLASS_NAME + '__toolbar-button',
        onClick: disabled ? null : function (ev) {
          return uploadFiles(ev);
        },
        children: label
      },
      uploadProgress: uploadProgress
    })
  );
};

var renderToolbar = function renderToolbar(props) {
  var uploadProgress = props.uploadProgress,
      uploadButtonLayout = props.uploadButtonLayout,
      clearButtonLayout = props.clearButtonLayout,
      pickButtonLayout = props.pickButtonLayout,
      progressLayout = props.progressLayout,
      errorMessage = props.errorMessage,
      files = props.files,
      timeFormatter = props.timeFormatter,
      fileSizeFormatter = props.fileSizeFormatter,
      locale = props.locale,
      hasConnection = props.hasConnection,
      domProps = props.domProps;


  return _react2.default.createElement(
    'div',
    domProps,
    pickButtonLayout,
    clearButtonLayout,
    uploadButtonLayout,
    hasConnection === false && errorMessage,
    progressLayout
  );
};

var renderToolbarLayout = function renderToolbarLayout(props) {
  var files = props.files,
      uploadProgress = props.uploadProgress,
      onSelectFiles = props.onSelectFiles,
      clearFiles = props.clearFiles,
      uploadFiles = props.uploadFiles,
      renderUploadAllButton = props.renderUploadAllButton,
      renderGlobalProgressBar = props.renderGlobalProgressBar,
      renderFilePickButton = props.renderFilePickButton,
      renderClearAllButton = props.renderClearAllButton,
      locale = props.locale,
      timeFormatter = props.timeFormatter,
      fileSizeFormatter = props.fileSizeFormatter,
      i18n = props.i18n,
      renderToolbar = props.renderToolbar,
      showToolbar = props.showToolbar,
      disabled = props.disabled,
      hasConnection = props.hasConnection,
      hasValidFiles = props.hasValidFiles;

  if (!showToolbar) {
    return;
  }

  var pickButtonLayout = renderFilePickButton && renderFilePickButtonLayout({
    label: i18n.SELECT_FILES,
    files: files,
    onSelectFiles: onSelectFiles,
    renderFilePickButton: renderFilePickButton,
    disabled: disabled
  });

  var clearButtonLayout = renderClearAllButton && renderClearAllButtonLayout({
    label: i18n.CLEAR_FILES,
    files: files,
    clearFiles: clearFiles,
    renderClearAllButton: renderClearAllButton,
    disabled: disabled
  });

  var progressLayout = renderGlobalProgressBar && renderGlobalProgressBarLayout({
    uploadProgress: uploadProgress,
    timeFormatter: timeFormatter,
    fileSizeFormatter: fileSizeFormatter,
    locale: locale,
    renderGlobalProgressBar: renderGlobalProgressBar,
    disabled: disabled
  });
  var errorMessage = renderErrorMessage && renderErrorMessageLayout({
    label: i18n.CONNECTION_ERROR,
    files: files,
    renderErrorMessage: renderErrorMessage,
    hasConnection: hasConnection
  });

  var uploadButtonLayout = renderUploadAllButton && renderUploadAllButtonLayout({
    label: i18n.UPLOAD_FILES,
    files: files,
    uploadProgress: uploadProgress,
    uploadFiles: uploadFiles,
    renderUploadAllButton: renderUploadAllButton,
    disabled: disabled,
    connected: hasConnection,
    hasValidFiles: hasValidFiles
  });

  var content = renderToolbar({
    uploadProgress: uploadProgress,
    uploadButtonLayout: uploadButtonLayout,
    clearButtonLayout: clearButtonLayout,
    pickButtonLayout: pickButtonLayout,
    progressLayout: progressLayout,
    errorMessage: errorMessage,
    files: files,
    timeFormatter: timeFormatter,
    fileSizeFormatter: fileSizeFormatter,
    locale: locale,
    disabled: disabled,
    hasConnection: hasConnection,
    domProps: {
      className: CLASS_NAME + '__menu'
    }
  });

  return _react2.default.createElement(
    'div',
    { key: 'udm', className: CLASS_NAME + '__menu-layout' },
    content
  );
};

var Uploader = function (_Component) {
  _inherits(Uploader, _Component);

  function Uploader(props) {
    _classCallCheck(this, Uploader);

    var _this = _possibleConstructorReturn(this, (Uploader.__proto__ || Object.getPrototypeOf(Uploader)).call(this, props));

    (0, _autoBind2.default)(_this);

    var files = props.files,
        defaultFiles = props.defaultFiles,
        lazyUpdateDelay = props.lazyUpdateDelay;

    _this.state = {
      files: files ? null : defaultFiles
    };

    _this.uploadProgress = {};

    _this.lazyForceUpdate = lazyUpdateDelay > 0 ? (0, _lodash2.default)(_this.forceUpdate, lazyUpdateDelay) : _this.forceUpdate;
    return _this;
  }

  _createClass(Uploader, [{
    key: 'shouldComponentUpdate',
    value: function shouldComponentUpdate(nextProps, nextState) {
      if (nextState.lastUpdate !== this.state.lastUpdate) {
        return true;
      }
      return (0, _shouldComponentUpdate3.default)(this, nextProps, nextState);
    }
  }, {
    key: 'UNSAFE_componentWillMount',
    value: function UNSAFE_componentWillMount() {
      this.checkConectivity();
    }
  }, {
    key: 'componentDidMount',
    value: function componentDidMount() {
      var _p = this.p,
          autoUpload = _p.autoUpload,
          files = _p.files;


      if (autoUpload && files.length) {
        this.queueFilesForUpload(files, this.uploadQueuedFiles);
      }
    }
  }, {
    key: 'UNSAFE_componentWillReceiveProps',
    value: function UNSAFE_componentWillReceiveProps(nextProps, nextState) {
      var nextP = this.getProps(nextProps, nextState);
      var newAutoUplaodFiles = nextP.autoUpload,
          newFiles = nextP.files;
      var _p2 = this.p,
          autoUpload = _p2.autoUpload,
          files = _p2.files;

      if (newAutoUplaodFiles && newFiles.length) {
        this.p = nextP;
        this.queueFilesForUpload(newFiles, this.uploadQueuedFiles);
      }
    }
  }, {
    key: 'checkFilesValid',
    value: function checkFilesValid(files) {
      var valid = files.reduce(function (acc, file) {
        return acc || file.valid;
      }, false);
      return valid;
    }
  }, {
    key: 'checkConectivity',
    value: function checkConectivity() {
      var _this2 = this;

      if (typeof Blob === 'undefined') {
        return;
      }
      var testBlob = new Blob([JSON.stringify({ hello: 'world' }, null, 2)], {
        type: 'application/json'
      });

      var _props = this.props,
          xhr = _props.xhr,
          targetUrl = _props.targetUrl;

      var uploadProps = {
        xhr: xhr,
        targetUrl: targetUrl
      };
      uploadProps.onProgress = function () {};
      uploadProps.onStart = function () {};
      uploadProps.onDone = function () {};
      uploadProps.onError = function () {};
      uploadProps.onAbort = function () {};
      this.setState({ checkingConectivity: true });
      (0, _blobFileUploader.uploadBlob)(testBlob, uploadProps).then(function () {
        _this2.setState({ hasConnection: true, checkingConectivity: false });
      }).catch(function (err) {
        _this2.setState({ hasConnection: false, checkingConectivity: false });
      });
    }
  }, {
    key: 'clearFiles',
    value: function clearFiles() {
      var _this3 = this;

      var _p3 = this.p,
          filesInUploadOrQueue = _p3.filesInUploadOrQueue,
          isControlled = _p3.isControlled,
          files = _p3.files,
          onChange = _p3.onChange,
          onBeforeClearAllFiles = _p3.onBeforeClearAllFiles,
          uploadProgress = _p3.uploadProgress;


      var shouldClearFiles = onBeforeClearAllFiles ? onBeforeClearAllFiles({
        filesInUploadOrQueue: filesInUploadOrQueue,
        files: files,
        uploadProgress: uploadProgress
      }) : true;

      if (!shouldClearFiles) {
        return;
      }

      if (!isControlled) {
        this.uploadProgress = {};
        this.setState({
          files: []
        });

        if (filesInUploadOrQueue) {
          var queuedFiles = (0, _fileQueueManagement.getQueuedFiles)(files, uploadProgress);
          var inProgressFiles = (0, _fileQueueManagement.getInProgressFiles)(files, uploadProgress);

          queuedFiles.forEach(function (file) {
            return _this3.processFileRemoveall(file);
          });
          inProgressFiles.forEach(function (file) {
            return _this3.processFileRemoveall(file);
          });
        }
      }

      onChange && onChange([]);
    }
  }, {
    key: 'setProgress',
    value: function setProgress(key, value) {
      //Cancel's the test upload progress
      if (this.state.checkingConectivity === true) {
        return;
      }
      if (!value) {
        delete this.uploadProgress[key];
      } else {
        this.uploadProgress[key] = value;
      }

      this.uploadProgress = _extends({}, this.uploadProgress);
    }
  }, {
    key: 'getFileUploadProps',
    value: function getFileUploadProps() {
      var _p4 = this.p,
          filesInUploadOrQueue = _p4.filesInUploadOrQueue,
          files = _p4.files,
          uploadProgress = _p4.uploadProgress,
          requestHeaders = _p4.requestHeaders,
          xhr = _p4.xhr,
          targetUrl = _p4.targetUrl,
          simultaneousFileUpload = _p4.simultaneousFileUpload,
          chunkSize = _p4.chunkSize,
          simultaneousChunksPerFile = _p4.simultaneousChunksPerFile;


      var uploadProps = {
        xhr: xhr,
        targetUrl: targetUrl,
        chunkSize: chunkSize,
        simultaneousFileUpload: simultaneousFileUpload,
        simultaneousChunksPerFile: simultaneousChunksPerFile,
        onProgress: this.onFileUploadProgress,
        onStart: this.onFileUploadStarted,
        onDone: this.onFileUploadDone,
        onError: this.onFileUploadError,
        onAbort: this.onFileUploadAbort,
        uploadProgress: uploadProgress,
        headers: _extends({}, requestHeaders)
      };
      return uploadProps;
    }
  }, {
    key: 'uploadQueuedFiles',
    value: function uploadQueuedFiles() {
      var _this4 = this;

      var _p5 = this.p,
          files = _p5.files,
          simultaneousFileUpload = _p5.simultaneousFileUpload,
          chunked = _p5.chunked,
          uploadFn = _p5.uploadFn,
          beforeFileUpload = _p5.beforeFileUpload;
      var uploadProgress = this.uploadProgress;

      if (this.state.hasConnection === false) {
        return;
      }
      var uploadableFiles = (0, _fileQueueManagement.getNextSetOfQueuedFiles)(files, uploadProgress, simultaneousFileUpload);

      if (!uploadableFiles.length) {
        return;
      }

      var uploadProps = this.getFileUploadProps();
      uploadableFiles.map(function (file) {
        _this4.setProgress(file.id, (0, _fileQueueManagement.getStartProgressForFile)(file));
        uploadFn(file, uploadProps).catch(function (err) {
          console.error('ciritcal upload error', err);
        });
      });

      this.forceUpdate();
    }
  }, {
    key: 'uploadFiles',
    value: function uploadFiles(ev, filesInCurrentBatch) {
      if (this.state.hasConnection === false) {
        return;
      }
      var _p6 = this.p,
          onUploadStart = _p6.onUploadStart,
          files = _p6.files;


      var uploadProgress = this.uploadProgress;
      //fixed bug where single uploading files were reuploading at Upload All
      var nonUploadingFiles = files.filter(function (file) {
        return !uploadProgress[file.id];
      });
      var uplaodStartOk = onUploadStart ? onUploadStart(filesInCurrentBatch || nonUploadingFiles) : true;
      //here we should add another check
      if (uplaodStartOk) {
        this.queueFilesForUpload(filesInCurrentBatch || nonUploadingFiles, this.uploadQueuedFiles);
      }
    }
  }, {
    key: 'onFileUploadProgress',
    value: function onFileUploadProgress(fileId, params, afterStateCallback) {
      var _p7 = this.p,
          uploadProgress = _p7.uploadProgress,
          files = _p7.files,
          getFileUploadProgress = _p7.getFileUploadProgress,
          onFileUploadProgress = _p7.onFileUploadProgress;

      this.setProgress(fileId, getFileUploadProgress(params, uploadProgress[fileId]));

      this.lazyForceUpdate(function () {
        onFileUploadProgress && onFileUploadProgress({
          file: files.find(function (file) {
            return file.id === fileId;
          }),
          xhrParams: params,
          uploadProgress: uploadProgress[fileId]
        });
        afterStateCallback && afterStateCallback();
      });
    }
  }, {
    key: 'onFileUploadDone',
    value: function onFileUploadDone(fileId, params) {
      var _p8 = this.p,
          onFileUploadDone = _p8.onFileUploadDone,
          files = _p8.files,
          uploadProgress = _p8.uploadProgress;

      var targetFile = files.find(function (file) {
        return file.id === fileId;
      });
      var xhrParams = _extends({}, params, {
        total: targetFile && targetFile.size,
        loaded: targetFile && targetFile.size
      });
      this.onFileUploadProgress(fileId, xhrParams, this.uploadQueuedFiles);
      onFileUploadDone && onFileUploadDone({
        file: targetFile,
        xhrParams: xhrParams,
        uploadProgress: uploadProgress[fileId]
      });

      this.allQueueDoneCheck();
    }
  }, {
    key: 'onFileUploadStarted',
    value: function onFileUploadStarted(_ref6) {
      var file = _ref6.file,
          chunkWrappers = _ref6.chunkWrappers;
      var uploadProgress = this.uploadProgress;
      var onFileUploadStart = this.p.onFileUploadStart;


      if (chunkWrappers) {
        this.setProgress(file.id, _extends({}, uploadProgress[file.id], {
          chunkWrappers: chunkWrappers
        }));
        this.lazyForceUpdate();
      }

      onFileUploadStart && onFileUploadStart({
        file: file,
        uploadProgress: uploadProgress[file.id]
      });
    }
  }, {
    key: 'allQueueDoneCheck',
    value: function allQueueDoneCheck() {
      var _p9 = this.p,
          files = _p9.files,
          onAllQueuedFilesUploaded = _p9.onAllQueuedFilesUploaded;
      var uploadProgress = this.uploadProgress;

      if (onAllQueuedFilesUploaded && !(0, _fileQueueManagement.hasFilesInUploadOrQueued)(files, uploadProgress)) {
        onAllQueuedFilesUploaded();
      }
    }
  }, {
    key: 'onFileUploadAbort',
    value: function onFileUploadAbort(fileId, params) {
      var uploadProgress = this.uploadProgress;
      var _p10 = this.p,
          onFileUploadAbort = _p10.onFileUploadAbort,
          files = _p10.files;

      var fileUploadProgress = uploadProgress[fileId];
      if (fileUploadProgress) {
        onFileUploadAbort && onFileUploadAbort({
          file: files.find(function (file) {
            return file.id === fileId;
          }),
          xhrParams: params,
          uploadProgress: fileUploadProgress
        });

        delete uploadProgress[fileId];
        this.allQueueDoneCheck();
        this.forceUpdate(this.uploadQueuedFiles);
      }
    }
  }, {
    key: 'onFileUploadError',
    value: function onFileUploadError(fileId, errorMessage) {
      var uploadProgress = this.uploadProgress;
      var onFileUploadError = this.p.onFileUploadError;

      this.setProgress(fileId, _extends({}, uploadProgress[fileId], {
        status: 'error',
        error: { message: errorMessage },
        loadedSize: 0,
        done: false,
        inProgress: false
      }));

      onFileUploadError && onFileUploadError(fileId, errorMessage);

      this.forceUpdate(this.uploadQueuedFiles);
    }
  }, {
    key: 'startUploadFile',
    value: function startUploadFile(fileID) {
      var _p11 = this.p,
          files = _p11.files,
          uploadProgress = _p11.uploadProgress,
          onUploadStart = _p11.onUploadStart;

      var targetFileIdx = files.findIndex(function (file) {
        return file.id === fileID;
      });
      var targetFile = files[targetFileIdx];
      var shouldUpload = true;

      if (!(0, _fileQueueManagement.getQueuedFiles)(files, uploadProgress).length && !(0, _fileQueueManagement.getInProgressFiles)(files, uploadProgress).length) {
        shouldUpload = onUploadStart ? onUploadStart(targetFile) : true;
      }

      shouldUpload && this.startUploadAt(targetFileIdx);
    }
  }, {
    key: 'queueFilesForUpload',
    value: function queueFilesForUpload(targetFiles, afterStateCallback) {
      var uploadProgress = this.uploadProgress;
      var _p12 = this.p,
          files = _p12.files,
          beforeFileUpload = _p12.beforeFileUpload;


      var newTargetFiles = (targetFiles || files).filter(function (file) {
        return !uploadProgress[file.id];
      });
      this.uploadProgress = (0, _fileQueueManagement.queueFilesForUpload)(newTargetFiles, beforeFileUpload, uploadProgress);
      this.forceUpdate(afterStateCallback);
    }
  }, {
    key: 'startUploadAt',
    value: function startUploadAt(fileIdx) {
      var _p13 = this.p,
          files = _p13.files,
          simultaneousFileUpload = _p13.simultaneousFileUpload,
          filesInUploadOrQueue = _p13.filesInUploadOrQueue;


      if (fileIdx < 0 || fileIdx > files.length) {
        return;
      }

      var file = files[fileIdx];
      this.queueFilesForUpload([file], this.uploadQueuedFiles);
    }
  }, {
    key: 'onFDZChange',
    value: function onFDZChange(_ref7) {
      var files = _ref7.files;
      var _p14 = this.p,
          uploadProgress = _p14.uploadProgress,
          autoUpload = _p14.autoUpload,
          isControlled = _p14.isControlled,
          onChange = _p14.onChange;

      this.uploadProgress = (0, _fileQueueManagement.cleanUploadProgressOfOldFiles)(files, uploadProgress);

      var _getFilesUplaodProgre2 = (0, _fileProgressDetails.getFilesUplaodProgress)(uploadProgress),
          percentage = _getFilesUplaodProgre2.percentage;

      var hasValidFiles = this.checkFilesValid(files);
      this.setState({ hasValidFiles: hasValidFiles });

      if (!isControlled) {
        this.setState({
          files: files
        });

        if (autoUpload) {
          this.queueFilesForUpload(files, this.uploadQueuedFiles);
        }

        if (!autoUpload && 0 <= percentage && percentage < 100) {
          //when the upload is on, and we add new files, we want them to go to the queue
          this.queueFilesForUpload(files, this.uploadQueuedFiles);
        }
      }

      onChange && onChange(files);
    }
  }, {
    key: 'processFileRemoveall',
    value: function processFileRemoveall(file) {
      var uploadProgress = this.p.uploadProgress;


      if (file._uploadRequest) {
        file._uploadRequest.abort();
      } else {
        var fileProgress = uploadProgress[file.id];

        if (fileProgress && fileProgress.chunkWrappers) {
          (0, _chunkFileUploader.abortAnyChunksInProgress)(fileProgress);
        }

        if (fileProgress && fileProgress.inProgress) {
          this.onFileUploadAbort(file.id);
        }
      }
    }
  }, {
    key: 'onFDZFileRemoveAtIndex',
    value: function onFDZFileRemoveAtIndex(_ref8) {
      var idx = _ref8.idx,
          file = _ref8.file;
      var _p15 = this.p,
          beforeFileAbort = _p15.beforeFileAbort,
          onRemoveAt = _p15.onRemoveAt,
          uploadProgress = _p15.uploadProgress;

      var okToRemove = beforeFileAbort ? beforeFileAbort({
        file: file,
        fileIndex: idx,
        uploadProgress: uploadProgress[file.id]
      }) : true;
      if (okToRemove) {
        this.processFileRemoveall(file);
        onRemoveAt && onRemoveAt({
          file: file,
          idx: idx
        });
        return true;
      }
    }
  }, {
    key: 'getClassName',
    value: function getClassName(_ref9) {
      var renderToolbar = _ref9.renderToolbar,
          simultaneousFileUpload = _ref9.simultaneousFileUpload,
          filesInUploadOrQueue = _ref9.filesInUploadOrQueue,
          toolbarPosition = _ref9.toolbarPosition,
          disabled = _ref9.disabled;
      var _props2 = this.props,
          theme = _props2.theme,
          className = _props2.className,
          singleFile = _props2.singleFile;

      return (0, _join2.default)(CLASS_NAME, className, CLASS_NAME + '--theme-' + theme, filesInUploadOrQueue && CLASS_NAME + '--inprogress', singleFile && CLASS_NAME + '--singefile', renderToolbar && CLASS_NAME + '--menu-' + toolbarPosition, renderToolbar && CLASS_NAME + '--hasmenu', disabled && CLASS_NAME + '--disabled');
    }
  }, {
    key: 'getProps',
    value: function getProps(props, state) {
      props = props || this.props;
      state = state || this.state;

      var _props3 = props,
          children = _props3.children,
          className = _props3.className,
          simultaneousFileUpload = _props3.simultaneousFileUpload,
          singleFile = _props3.singleFile,
          chunked = _props3.chunked,
          renderToolbar = _props3.renderToolbar,
          toolbarPosition = _props3.toolbarPosition,
          activeFiles = _props3.files,
          disabled = _props3.disabled;
      var _state = state,
          stateFiles = _state.files;
      var uploadProgress = this.uploadProgress;


      var files = activeFiles ? activeFiles : stateFiles;

      var filesInUploadOrQueue = getNumberOfFilesMarkedForUpload(files, uploadProgress);

      var getFileUploadProgressFn = _fileProgressDetails.getFileUploadProgress,
          uploadFn = _blobFileUploader.uploadBlob;

      if (chunked) {
        getFileUploadProgressFn = _fileProgressDetails.getChunkedFileUploadProgress;
        uploadFn = _chunkFileUploader.uploadChunkedBlob;
      }

      return _extends({}, props, {
        simultaneousFileUpload: singleFile ? 1 : simultaneousFileUpload,
        filesInUploadOrQueue: filesInUploadOrQueue,
        children: children,
        files: files,
        uploadFn: uploadFn,
        uploadProgress: uploadProgress,
        getFileUploadProgress: getFileUploadProgressFn,
        className: this.getClassName({
          simultaneousFileUpload: simultaneousFileUpload,
          filesInUploadOrQueue: filesInUploadOrQueue,
          renderToolbar: renderToolbar,
          toolbarPosition: toolbarPosition,
          disabled: disabled
        })
      });
    }
  }, {
    key: 'onSelectFiles',
    value: function onSelectFiles(files) {
      this.fdz.addFiles(files);
    }
  }, {
    key: 'setFDZRef',
    value: function setFDZRef(el) {
      this.fdz = el;
    }
  }, {
    key: 'render',
    value: function render() {
      var _p16 = this.p = this.getProps(),
          filesInUploadOrQueue = _p16.filesInUploadOrQueue,
          className = _p16.className,
          files = _p16.files,
          uploadProgress = _p16.uploadProgress,
          locale = _p16.locale,
          fileSizeFormatter = _p16.fileSizeFormatter,
          timeFormatter = _p16.timeFormatter,
          propsI18N = _p16.i18n,
          renderUploadAllButton = _p16.renderUploadAllButton,
          renderGlobalProgressBar = _p16.renderGlobalProgressBar,
          renderToolbar = _p16.renderToolbar,
          showToolbar = _p16.showToolbar,
          toolbarPosition = _p16.toolbarPosition,
          renderFilePickButton = _p16.renderFilePickButton,
          renderClearAllButton = _p16.renderClearAllButton,
          renderUploadButton = _p16.renderUploadButton,
          disableFileDrop = _p16.disableFileDrop,
          disabled = _p16.disabled;

      var children = void 0;
      var composedI18N = _extends({}, i18n, propsI18N);

      var fileDropZone = _react2.default.createElement(_FileDropZone2.default, _extends({
        key: 'fdz'
      }, (0, _pickProps2.default)(this.props, _FileDropZone2.default.propTypes), getFileListProps(this), {
        disabled: disableFileDrop || disabled,
        files: files,
        connected: this.state.hasConnection,
        onChange: this.onFDZChange,
        onRemoveAt: this.onFDZFileRemoveAtIndex,
        ref: this.setFDZRef,
        i18n: composedI18N,
        uploadProgress: uploadProgress
      }));
      var uploaderMenu = renderToolbar && renderToolbarLayout({
        files: files,
        uploadProgress: uploadProgress,
        onSelectFiles: this.onSelectFiles,
        clearFiles: this.clearFiles,
        uploadFiles: this.uploadFiles,
        renderUploadAllButton: renderUploadAllButton,
        renderGlobalProgressBar: renderGlobalProgressBar,
        renderFilePickButton: renderFilePickButton,
        renderClearAllButton: renderClearAllButton,
        renderToolbar: renderToolbar,
        showToolbar: showToolbar,
        locale: locale,
        timeFormatter: timeFormatter,
        fileSizeFormatter: fileSizeFormatter,
        i18n: composedI18N,
        disabled: disabled,
        hasConnection: this.state.hasConnection,
        hasValidFiles: this.state.hasValidFiles
      });

      if (toolbarPosition === 'top') {
        children = [uploaderMenu, fileDropZone];
      } else {
        children = [fileDropZone, uploaderMenu];
      }

      return _react2.default.createElement(
        'div',
        _extends({}, (0, _cleanProps2.default)(this.props, Uploader.propTypes), {
          className: className
        }),
        children
      );
    }
  }]);

  return Uploader;
}(_react.Component);

Uploader.defaultProps = _extends({}, _FileDropZone2.default.defaultProps, (_extends2 = {

  theme: 'default',
  simultaneousFileUpload: 3,
  simultaneousChunksPerFile: 3,
  chunkSize: 1024 * 1024,
  chunked: false,
  xhr: _xhr2.default,
  fileSizeFormatter: _FileList.fileSizeFormatter,
  timeFormatter: _FileList.timeFormatter,
  lazyUpdateDelay: 10,
  renderToolbar: renderToolbar,
  showToolbar: true,

  toolbarPosition: 'bottom',
  renderFilePickButton: renderFilePickButton,
  renderClearAllButton: renderClearAllButton,
  renderUploadAllButton: renderUploadAllButton,
  renderGlobalProgressBar: renderGlobalProgressBar,

  defaultFiles: []
}, _defineProperty(_extends2, 'fileSizeFormatter', _FileList.fileSizeFormatter), _defineProperty(_extends2, 'timeFormatter', _FileList.timeFormatter), _defineProperty(_extends2, 'i18n', i18n), _extends2));

Uploader.propTypes = _extends({}, _props4.hocPropTypes, _props4.fdzPropTypes, {

  shouldComponentUpdate: _propTypes2.default.func,
  children: _propTypes2.default.any,
  connected: _propTypes2.default.bool,
  theme: _propTypes2.default.string,

  targetUrl: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.func]).isRequired,

  singleFile: _propTypes2.default.bool,

  simultaneousFileUpload: _propTypes2.default.number,
  simultaneousChunksPerFile: _propTypes2.default.number,
  lazyUpdateDelay: _propTypes2.default.number,

  chunkSize: _propTypes2.default.number,
  chunked: _propTypes2.default.bool,

  xhr: _propTypes2.default.func,

  locale: _propTypes2.default.string,

  requestHeaders: _propTypes2.default.object, // any additional headers to pass to upload requests

  fileSizeFormatter: _propTypes2.default.func,
  timeFormatter: _propTypes2.default.func,

  toolbarPosition: _propTypes2.default.oneOf(['top', 'bottom']),

  renderToolbar: _propTypes2.default.func,
  showToolbar: _propTypes2.default.bool,

  renderFilePickButton: _propTypes2.default.func,
  renderClearAllButton: _propTypes2.default.func,
  renderUploadAllButton: _propTypes2.default.func,
  renderGlobalProgressBar: _propTypes2.default.func,

  autoUpload: _propTypes2.default.bool,
  disableFileDrop: _propTypes2.default.bool,
  disabled: _propTypes2.default.bool,

  files: _propTypes2.default.arrayOf(_propTypes2.default.object),
  defaultFiles: _propTypes2.default.arrayOf(_propTypes2.default.object),

  onChange: _propTypes2.default.func,

  i18n: _propTypes2.default.object,

  onUploadStart: _propTypes2.default.func, //called when a new queue of files is started
  beforeFileUpload: _propTypes2.default.func, // called before startign the upload of a file
  onFileUploadStart: _propTypes2.default.func, // called after the xhr start event is fired
  onFileUploadProgress: _propTypes2.default.func, // calld on xhr progress, throttled
  beforeFileAbort: _propTypes2.default.func,
  onFileUploadAbort: _propTypes2.default.func, // calld on xhr progress, throttled
  onFileUploadError: _propTypes2.default.func, // calld on xhr progress, throttled
  onFileUploadDone: _propTypes2.default.func, // called when file has been uploaded
  onAllQueuedFilesUploaded: _propTypes2.default.func, // called when the current queue is done
  onBeforeClearAllFiles: _propTypes2.default.func // called as a prevention hook for clearAllFiles button
});

exports.default = Uploader;
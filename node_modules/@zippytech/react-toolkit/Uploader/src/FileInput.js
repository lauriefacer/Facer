'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _autoBind = require('@zippytech/react-class/autoBind');

var _autoBind2 = _interopRequireDefault(_autoBind);

var _cleanProps = require('../../common/cleanProps');

var _cleanProps2 = _interopRequireDefault(_cleanProps);

var _join = require('../../common/join');

var _join2 = _interopRequireDefault(_join);

var _Button = require('../../Button');

var _Button2 = _interopRequireDefault(_Button);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Copyright (c) 2015-present, Zippy Technologies
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * This source code is licensed under the MIT license found in the
file in the root directory of this source tree.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */

var CLASS_NAME = 'zippy-react-uploader-file-input';

var FileInput = function (_Component) {
  _inherits(FileInput, _Component);

  function FileInput(props, context) {
    _classCallCheck(this, FileInput);

    var _this = _possibleConstructorReturn(this, (FileInput.__proto__ || Object.getPrototypeOf(FileInput)).call(this, props, context));

    (0, _autoBind2.default)(_this);
    return _this;
  }

  _createClass(FileInput, [{
    key: 'startChooseAction',
    value: function startChooseAction(ev) {
      if (this.props.disabled) {
        return;
      }
      this._input.click();
    }
  }, {
    key: 'setFileInputRef',
    value: function setFileInputRef(el) {
      this._input = el;
    }
  }, {
    key: 'onChange',
    value: function onChange(ev) {
      this.props.onChange(Array.prototype.slice.call(ev.target.files, 0));
      this.clearFiles();
    }
  }, {
    key: 'clearFiles',
    value: function clearFiles() {
      this._input.value = null;
    }
  }, {
    key: 'render',
    value: function render() {
      var props = this.props,
          _props = this.props,
          children = _props.children,
          onChange = _props.onChange,
          multiple = _props.multiple,
          disabled = _props.disabled;


      return _react2.default.createElement(
        _Button2.default,
        _extends({}, (0, _cleanProps2.default)(props, FileInput.propTypes), {
          disabled: disabled,
          onClick: this.startChooseAction,
          className: (0, _join2.default)(props.className, CLASS_NAME)
        }),
        children,
        _react2.default.createElement('input', {
          ref: this.setFileInputRef,
          multiple: multiple,
          disabled: disabled,
          onChange: this.onChange,
          type: 'file',
          className: CLASS_NAME + '__field'
        })
      );
    }
  }]);

  return FileInput;
}(_react.Component);

FileInput.defaultProps = {
  multiple: true
};

FileInput.propTypes = {
  onChange: _propTypes2.default.func.isRequired,
  multiple: _propTypes2.default.bool,
  disabled: _propTypes2.default.bool
};

exports.default = FileInput;
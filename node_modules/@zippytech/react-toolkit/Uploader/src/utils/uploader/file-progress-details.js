'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

/**
 * Copyright (c) 2015-present, Zippy Technologies
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var getETABasedOnSizeAndTime = function getETABasedOnSizeAndTime(uploadedSize, totalSize, startTime) {
  var deltaTime = Date.now() - startTime || 1;
  var deltaSize = totalSize - uploadedSize;
  var averageSpeedPerMSSecond = uploadedSize / deltaTime;
  return Math.round(deltaSize / averageSpeedPerMSSecond / 1000) * 1000;
};

/**
 * Computes ETA and total size, remaining size etc for the
 * given xhr.upload.progress param
 * @param progress - the xhr.upload.progress for a given file
 *
 * @param fileUploadProgress - the current fileUploadProgress object
 * containg infomration like startTime and current status of file. This
 * is application dependent and used by the file uploader to represent
 * internal state.
 */
var getFileUploadProgress = function getFileUploadProgress(xhrProgress, fileUploadProgress) {
  if ((typeof fileUploadProgress === 'undefined' ? 'undefined' : _typeof(fileUploadProgress)) !== 'object') {
    fileUploadProgress = { startTime: Date.now() };
  }

  var uploadProgress = _extends({}, fileUploadProgress);

  var total = xhrProgress.total,
      loaded = xhrProgress.loaded;

  uploadProgress.uploadedSize = loaded;
  uploadProgress.totalSize = total;
  uploadProgress.eta = getETABasedOnSizeAndTime(loaded, total, uploadProgress.startTime);

  if (total === loaded) {
    uploadProgress.done = true;
    uploadProgress.inProgress = false;
    uploadProgress.uploadTime = Date.now() - uploadProgress.startTime;
  }

  return uploadProgress;
};

var getTotalUploadedSizeFromChunks = function getTotalUploadedSizeFromChunks(wrappedChunksArray) {
  // .chunk is blob of file, .progress is xhr progress set by uploader
  var totalSize = wrappedChunksArray.filter(function (chunkWrapper) {
    return chunkWrapper.chunk && chunkWrapper.progress;
  }).reduce(function (totalSize, chunkWrapper) {
    return totalSize + chunkWrapper.progress.loaded;
  }, 0);

  return totalSize;
};

/**
 * Computes ETA and total size, remaining size etc for the
 * given xhr.upload.progress param
 * @param progress - the xhr.upload.progress for a given file
 *
 * @param fileUploadProgress - the current fileUploadProgress object
 * containg infomration like startTime and current status of file. This
 * is application dependent and used by the file uploader to represent
 * internal state.
 */
var getChunkedFileUploadProgress = function getChunkedFileUploadProgress(wrappedChunksArray, fileUploadProgress) {
  var uploadProgress = _extends({}, fileUploadProgress);

  var uploadedSize = getTotalUploadedSizeFromChunks(wrappedChunksArray);
  var totalSize = uploadProgress.totalSize;
  uploadProgress.uploadedSize = uploadedSize;

  uploadProgress.eta = getETABasedOnSizeAndTime(uploadedSize, totalSize, uploadProgress.startTime);

  if (uploadedSize === totalSize) {
    uploadProgress.done = true;
    uploadProgress.inProgress = false;
    uploadProgress.uploadTime = Date.now() - uploadProgress.startTime;
  }

  return uploadProgress;
};

// calculates total progress in % for given uploadProgress map.
var getFilesUplaodProgress = function getFilesUplaodProgress(uploadProgress) {
  var totalSizeOfFiles = 0;
  var totalUploadedSizeOfFiles = 0;
  var firstFileStartTime = Infinity;
  Object.keys(uploadProgress).forEach(function (key) {
    var fileProgress = uploadProgress[key] || {};
    var queued = fileProgress.queued,
        done = fileProgress.done,
        inProgress = fileProgress.inProgress,
        totalSize = fileProgress.totalSize,
        uploadedSize = fileProgress.uploadedSize,
        startTime = fileProgress.startTime,
        error = fileProgress.error;


    if (queued || inProgress || done || error) {
      totalSizeOfFiles = totalSizeOfFiles + (totalSize || 0);
      totalUploadedSizeOfFiles = totalUploadedSizeOfFiles + (uploadedSize || 0);
      firstFileStartTime = firstFileStartTime > startTime ? startTime : firstFileStartTime;
    }
  });

  return {
    percentage: Math.round(totalUploadedSizeOfFiles / totalSizeOfFiles * 100) / 100 * 100,
    totalSizeOfFiles: totalSizeOfFiles,
    totalUploadedSizeOfFiles: totalUploadedSizeOfFiles,
    globalEta: getETABasedOnSizeAndTime(totalUploadedSizeOfFiles, totalSizeOfFiles, firstFileStartTime)
  };
};

exports.getETABasedOnSizeAndTime = getETABasedOnSizeAndTime;
exports.getFileUploadProgress = getFileUploadProgress;
exports.getFilesUplaodProgress = getFilesUplaodProgress;
exports.getChunkedFileUploadProgress = getChunkedFileUploadProgress;
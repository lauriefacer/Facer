'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.abortAnyChunksInProgress = exports.uploadChunkedBlob = undefined;

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; /**
                                                                                                                                                                                                                                                                   * Copyright (c) 2015-present, Zippy Technologies
                                                                                                                                                                                                                                                                   *
                                                                                                                                                                                                                                                                   * This source code is licensed under the MIT license found in the
                                                                                                                                                                                                                                                                   * LICENSE file in the root directory of this source tree.
                                                                                                                                                                                                                                                                   */

var _blobFileUploader = require('./blob-file-uploader');

var getNumberOfChunksForSize = function getNumberOfChunksForSize(size, chunkSize) {
  var numberOfChunkcs = size / chunkSize;
  var roundedNumberOfChunks = Math.round(numberOfChunkcs);
  if (roundedNumberOfChunks < numberOfChunkcs) {
    roundedNumberOfChunks = roundedNumberOfChunks + 1;
  }

  return roundedNumberOfChunks;
};

// returns an array of offsets for chunkcs, based on chunkSize and chunkCount
// for exmaple, if chunkcSize is 2B, and chunkCount is 5, will return
// [[0,2], [2,4], [4,6], [6,8], [8,10]]
var generateChunkOffsets = function generateChunkOffsets(fileSize, chunkSize, chunkCount) {
  var count = 0,
      endOffset = void 0;
  var chunkedOffset = [];
  while (count < chunkCount) {
    endOffset = chunkSize * (count + 1);
    if (endOffset > fileSize) {
      endOffset = fileSize;
    }
    chunkedOffset.push([chunkSize * count, endOffset]);
    count++;
  }
  return chunkedOffset;
};

/**
 * uploadBlob
 *
 * Uploads a blob. Sends headers for additinal details. Does not chunk upload.
 * This is the basic file upload method used by the file uploader.
 *
 * @param file - required. The file/blob file descriptor pointing to a file
 * on the users local machine.
 *
 * @param targetUrl - required. Server endpoint where to make the post request to.
 *
 * @param xhr - xhr library/warpper implementing .post method with parameters identical
 * to https://www.npmjs.com/package/xhr.
 *
 * @param onProgress, onDone, onError, onAbort - xhr.upload lifecycle callbacks
 * will be called for progress, load, erorr and abort events with the file and
 * xhr arguments. Used by uploader to handle file upload updates in the UI, like
 * progress (eta, procentage) and error dispalying.
 *
 */
var uploadChunkedBlob = function uploadChunkedBlob(file, params) {
  if (!file) {
    return;
  }

  var headers = params.headers,
      targetUrl = params.targetUrl,
      xhr = params.xhr,
      chunkSize = params.chunkSize,
      simultaneousChunksPerFile = params.simultaneousChunksPerFile,
      onBeforeStart = params.onBeforeStart,
      onStart = params.onStart,
      onProgress = params.onProgress,
      onDone = params.onDone,
      onError = params.onError,
      onAbort = params.onAbort;
  var id = file.id,
      name = file.name,
      size = file.size;

  var numberOfChunkcs = getNumberOfChunksForSize(size, chunkSize);

  var chunkedOffsets = generateChunkOffsets(size, chunkSize, numberOfChunkcs);

  var wrappedBloblsArray = wrapChunksWithProgressData(chunkedOffsets, {
    // TODO blob callbacks don't have to be on blob Wrappers, they can be on
    // upper level object
    onBlobError: function onBlobError(chunk, error) {
      chunk.status = 'error';
      chunk.error = error;
      onError(id, error);
    },

    onBlobDone: function onBlobDone(chunk, xhrParams) {
      chunk.status = 'done';
      onProgress(id, wrappedBloblsArray);
    },

    onBlobAbort: function onBlobAbort(chunk, xhrParams) {
      chunk.status = 'aborted';
      onAbort(id, wrappedBloblsArray);
    },

    onBlobProgress: function onBlobProgress(chunk, xhrParams) {
      chunk.progress = xhrParams;
      onProgress(id, wrappedBloblsArray);
    },

    fileId: id
  });

  // before upload hook
  var resultOfBeforeStart = onBeforeStart ? onBeforeStart({
    file: file,
    numberOfChunkcs: numberOfChunkcs,
    chunkedOffsets: chunkedOffsets,
    chunkWrappers: wrappedBloblsArray
  }) : true;

  if (!resultOfBeforeStart) {
    return;
  }

  // start upload hook
  onStart && onStart({
    file: file,
    numberOfChunkcs: numberOfChunkcs,
    chunkedOffsets: chunkedOffsets,
    chunkWrappers: wrappedBloblsArray
  });

  var requestHeaders = _extends({}, headers, {
    FileName: name,
    NumberOfChunkcs: numberOfChunkcs,
    Chunked: true
  });

  return uploadAllChunkcsInSequence(file, simultaneousChunksPerFile, wrappedBloblsArray, _extends({}, params, { headers: requestHeaders }), function () {
    onDone(id, wrappedBloblsArray);
  });
};

var initialiseFileSliceForChunk = function initialiseFileSliceForChunk(file, chunkWrapper) {
  if (!chunkWrapper.chunk) {
    var _chunkWrapper$chunkOf = _slicedToArray(chunkWrapper.chunkOffsets, 2),
        startOffset = _chunkWrapper$chunkOf[0],
        endOffset = _chunkWrapper$chunkOf[1];

    chunkWrapper.chunk = file.slice(startOffset, endOffset);
    chunkWrapper.chunk.id = chunkWrapper.chunkId;
  }
  return chunkWrapper;
};

var getNextAvailableChunks = function getNextAvailableChunks(file, simultaneousChunksPerFile, chunks) {
  var chunksInProgressCount = countInProgressChunks(chunks);
  if (chunksInProgressCount >= simultaneousChunksPerFile) {
    return null;
  }

  var queuedChunks = chunks.filter(function (chunkWrapper) {
    return chunkWrapper.status === 'queued';
  });
  if (!queuedChunks.length) {
    return null;
  }

  return queuedChunks.slice(0, simultaneousChunksPerFile - chunksInProgressCount).map(function (chunkWrapper) {
    return initialiseFileSliceForChunk(file, chunkWrapper);
  });
};

var wrapChunksWithProgressData = function wrapChunksWithProgressData(chunks, progressData) {
  var fileId = progressData.fileId;

  return chunks.map(function (chunkOffsets, idx) {
    return _extends({}, progressData, {
      chunkId: fileId + '-chunk-' + idx,
      chunkOffsets: chunkOffsets,
      idx: idx,
      status: 'queued'
    });
  });
};

var getChunkUploadParams = function getChunkUploadParams(chunkSpecificParams, uploaderSpecificParams) {
  return _extends({}, uploaderSpecificParams, chunkSpecificParams);
};

var countRemaningQueuedChunks = function countRemaningQueuedChunks(chunkWrappers) {
  return chunkWrappers.filter(function (chunkWrapper) {
    return chunkWrapper.status === 'queued';
  }).length;
};

var countAbortedChunks = function countAbortedChunks(chunkWrappers) {
  return chunkWrappers.filter(function (chunkWrapper) {
    return chunkWrapper.status === 'aborted';
  }).length;
};

var countInProgressChunks = function countInProgressChunks(chunkWrappers) {
  return chunkWrappers.filter(function (chunkWrapper) {
    return chunkWrapper.status === 'uploading';
  }).length;
};

var uploadValidityHolds = function uploadValidityHolds(chunkWrappers) {
  return !countAbortedChunks(chunkWrappers);
};

var setChunksStatus = function setChunksStatus(chunkWrappers, status) {
  if (!chunkWrappers) {
    return [];
  }
  return chunkWrappers.map(function (chunkWrapper) {
    chunkWrapper.status = status;
    return chunkWrapper;
  });
};

var uploadAllChunkcsInSequence = function uploadAllChunkcsInSequence(file, simultaneousChunksPerFile, chunkWrappers, params, onDone) {
  if (countRemaningQueuedChunks(chunkWrappers) === 0) {
    onDone && onDone();
    return;
  }

  var currentChunks = setChunksStatus(getNextAvailableChunks(file, simultaneousChunksPerFile, chunkWrappers), 'uploading');

  if (!currentChunks.length) {
    return;
  }

  var currentChunksUploads = currentChunks.map(function (currentChunk) {
    return (0, _blobFileUploader.uploadBlob)(currentChunk.chunk, getChunkUploadParams({
      onError: function onError(chunkId, xhrParams) {
        currentChunk.onBlobError(currentChunk, xhrParams);
      },
      onAbort: function onAbort(chunkId, xhrParams) {
        currentChunk.onBlobAbort(currentChunk, xhrParams);
      },
      onDone: function onDone(chunkId, xhrParams) {
        currentChunk.onBlobDone(currentChunk, xhrParams);
      },
      onProgress: function onProgress(chunkId, xhrParams) {
        currentChunk.onBlobProgress(currentChunk, xhrParams);
      },
      headers: _extends({}, params.headers, {
        FileClientId: currentChunk.fileId,
        ChunkID: currentChunk.chunkId,
        ChunkNumber: currentChunk.idx
      })
    }, params)).then(function () {
      if (uploadValidityHolds(chunkWrappers)) {
        return uploadAllChunkcsInSequence(file, simultaneousChunksPerFile, chunkWrappers, params, onDone);
      }
    });
  });

  return Promise.all(currentChunksUploads);
};

var abortAnyChunksInProgress = function abortAnyChunksInProgress(uplaodProgress) {
  var chunkWrappers = uplaodProgress.chunkWrappers;

  chunkWrappers.filter(function (chunkWrapper) {
    return chunkWrapper.status === 'uploading';
  }).forEach(function (chunkWrapper) {
    chunkWrapper.chunk._uploadRequest.abort();
  });
};

exports.uploadChunkedBlob = uploadChunkedBlob;
exports.abortAnyChunksInProgress = abortAnyChunksInProgress;
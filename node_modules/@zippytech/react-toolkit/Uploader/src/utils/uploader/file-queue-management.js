"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
/**
 * Copyright (c) 2015-present, Zippy Technologies
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

// ================================================
// Sequenced file uploading functions
// ================================================

// returns files that were marked as queued for upload.
var getQueuedFiles = function getQueuedFiles(files, uploadProgress) {
  var filteredFiles = files.filter(function (file) {
    var progress = uploadProgress[file.id] || {};
    return progress.queued;
  });
  return filteredFiles;
};

var getErroredFiles = function getErroredFiles(files, uploadProgress) {
  var filteredFiles = files.filter(function (file) {
    var progress = uploadProgress[file.id] || {};
    return progress.error;
  });
  return filteredFiles;
};

var getInProgressFiles = function getInProgressFiles(files, uploadProgress) {
  var filteredFiles = files.filter(function (file) {
    var progress = uploadProgress[file.id] || {};
    return progress.inProgress;
  });
  return filteredFiles;
};

// marks all given files as 'queued' by setting the appropriate uplaodPgress
// entry for each file.
var queueFilesForUpload = function queueFilesForUpload(files, beforeFileUpload) {
  var uploadProgress = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

  files.forEach(function (file, idx) {
    var id = file.id,
        size = file.size,
        valid = file.valid;

    var nextUploadProgressForFile = void 0;
    if (uploadProgress[id] && uploadProgress[id].size) {
      nextUploadProgressForFile = uploadProgress[id];
    } else {
      nextUploadProgressForFile = {
        queued: true,
        totalSize: size,
        uploadedSize: 0
      };
    }
    if (valid) {
      var okToUpload = beforeFileUpload ? beforeFileUpload({
        file: file,
        fileIndex: idx,
        uploadProgress: nextUploadProgressForFile
      }) : true;
      if (okToUpload) {
        uploadProgress[id] = nextUploadProgressForFile;
      }
    }
  });
  return uploadProgress;
};

var getFileInProgressCount = function getFileInProgressCount(uploadProgress) {
  var count = 0;
  Object.keys(uploadProgress).forEach(function (key) {
    var _ref = uploadProgress[key] || {},
        inProgress = _ref.inProgress;

    if (inProgress) {
      count++;
    }
  });
  return count;
};

var getNextSetOfQueuedFiles = function getNextSetOfQueuedFiles(files, uploadProgress, simultaneousUploads) {
  var filesInProgressCount = getFileInProgressCount(uploadProgress);

  if (filesInProgressCount >= simultaneousUploads) {
    return [];
  }
  var queuedFiles = getQueuedFiles(files, uploadProgress);
  return queuedFiles.slice(0, simultaneousUploads - filesInProgressCount);
};

// initialises a uploadProgress entry based on given file
// used to populate upload progress state in uploader
var getStartProgressForFile = function getStartProgressForFile(file) {
  return {
    inProgress: true,
    totalSize: file.size,
    uploadedSize: 0,
    startTime: Date.now()
  };
};

// removes any uploadProgress key not found in the files array.
var cleanUploadProgressOfOldFiles = function cleanUploadProgressOfOldFiles(files, uploadProgress) {
  var newUploadProgress = {};
  Object.keys(uploadProgress).forEach(function (key) {
    if (files.findIndex(function (file) {
      return file.id === key;
    }) >= 0) {
      newUploadProgress[key] = uploadProgress[key] || {};
    }
  });
  return newUploadProgress;
};

var hasFilesInUploadOrQueued = function hasFilesInUploadOrQueued(files, uploadProgress) {
  var queuedCount = getQueuedFiles(files, uploadProgress).length;
  var inProgressCount = getInProgressFiles(files, uploadProgress).length;
  return queuedCount || inProgressCount;
};

// ================================================
// END Sequenced file uploading functions
// ================================================

exports.cleanUploadProgressOfOldFiles = cleanUploadProgressOfOldFiles;
exports.getStartProgressForFile = getStartProgressForFile;
exports.getNextSetOfQueuedFiles = getNextSetOfQueuedFiles;
exports.getFileInProgressCount = getFileInProgressCount;
exports.queueFilesForUpload = queueFilesForUpload;
exports.getQueuedFiles = getQueuedFiles;
exports.getInProgressFiles = getInProgressFiles;
exports.hasFilesInUploadOrQueued = hasFilesInUploadOrQueued;
exports.getErroredFiles = getErroredFiles;
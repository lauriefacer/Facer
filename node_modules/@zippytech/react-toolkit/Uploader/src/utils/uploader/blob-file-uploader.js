'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

/**
 * Copyright (c) 2015-present, Zippy Technologies
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var isStatusCodeOk = function isStatusCodeOk(_ref) {
  var statusCode = _ref.statusCode;

  return statusCode === 200 || statusCode === 201 || statusCode === 202;
};

/**
 * uploadBlob
 *
 * Uploads a blob. Sends headers for additinal details. Does not chunk upload.
 * This is the basic file upload method used by the file uploader.
 *
 * @param file - required. The file/blob file descriptor pointing to a file
 * on the users local machine.
 *
 * @param targetUrl - required. Server endpoint where to make the post request to.
 *
 * @param xhr - xhr library/warpper implementing .post method with parameters identical
 * to https://www.npmjs.com/package/xhr.
 *
 * @param onProgress, onDone, onError, onAbort - xhr.upload lifecycle callbacks
 * will be called for progress, load, erorr and abort events with the file and
 * xhr arguments. Used by uploader to handle file upload updates in the UI, like
 * progress (eta, procentage) and error dispalying.
 *
 */
var uploadBlob = function uploadBlob(file, params) {
  if (!file) {
    return;
  }
  var headers = params.headers,
      fileId = params.fileId,
      targetUrl = params.targetUrl,
      xhr = params.xhr,
      onProgress = params.onProgress,
      onStart = params.onStart,
      onDone = params.onDone,
      onError = params.onError,
      onAbort = params.onAbort;
  var _file$id = file.id,
      id = _file$id === undefined ? fileId : _file$id,
      name = file.name;


  var requestHeaders = _extends({
    FileName: name,
    FileClientId: id,
    'Content-Type': 'multipart/form-data'
  }, headers);

  return new Promise(function (resolve, reject) {
    if (!targetUrl) {
      return reject('no targetUrl provided');
    }

    file._uploadRequest = xhr.post(targetUrl, {
      withCredentials: true,
      body: file,
      headers: requestHeaders,
      beforeSend: function beforeSend(xhr) {
        onStart && onStart({ file: file });

        xhr.upload.addEventListener('progress', function (params) {
          return onProgress(id, params);
        });

        xhr.addEventListener('error', function (params) {
          file._uploadRequest = false;
          onError(id, 'server request error');
        });

        xhr.addEventListener('abort', function (params) {
          file._uploadRequest = false;
          onAbort(id, params);
        });
      }
    }, function (error, params) {
      file._uploadRequest = false;
      onDone(id, params);

      if (error) {
        return reject(error);
      }

      if (isStatusCodeOk(params)) {
        resolve(params);
      } else {
        onError(id, 'server request error: ' + params.statusCode);
        resolve(params);
      }
    });
  });
};

exports.uploadBlob = uploadBlob;
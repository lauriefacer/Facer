'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.fdzPropTypes = exports.hocPropTypes = exports.fdzDefaultProps = exports.hocDefaultProps = undefined;

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _clientUniqueFileId = require('./utils/client-unique-file-id');

var _clientUniqueFileId2 = _interopRequireDefault(_clientUniqueFileId);

var _acceptsFile = require('./utils/accepts-file');

var _acceptsFile2 = _interopRequireDefault(_acceptsFile);

var _flagDirectories = require('./utils/dropzone/flag-directories');

var _flagDirectories2 = _interopRequireDefault(_flagDirectories);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Copyright (c) 2015-present, Zippy Technologies
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var hocDefaultProps = {
  fileMaxSize: Infinity,
  fileMaxCount: Infinity,
  fileMinSize: 0,
  generateUniqueFileIdentifier: _clientUniqueFileId2.default,
  accept: function accept() {
    return true;
  },
  acceptDuplicates: false,
  appendOnDrop: true,
  multiple: true,
  acceptInvalid: false,
  acceptsFile: _acceptsFile2.default,

  isFileValid: false,
  disabled: false,

  fileSizeFormatter: function fileSizeFormatter(number) {
    return number;
  },
  flagDirectories: _flagDirectories2.default
};

var hocPropTypes = {
  shouldComponentUpdate: _propTypes2.default.func,
  children: _propTypes2.default.any,

  accept: _propTypes2.default.oneOfType([_propTypes2.default.func, // accept function will receive the file, and return true to accept it
  _propTypes2.default.string, // accept string or array of string will be used to accept files
  _propTypes2.default.arrayOf(_propTypes2.default.string)]),

  acceptInvalid: _propTypes2.default.bool, //if true, will call onChange with invalid files as well, makred with valid:false
  appendOnDrop: _propTypes2.default.bool, //indicates if new items are appended or replace old ones
  multiple: _propTypes2.default.bool, //if multiple file drag and drop is supported

  // drag interation callbacks
  onDragEnter: _propTypes2.default.func,
  onDragLeave: _propTypes2.default.func,
  onChange: _propTypes2.default.func,

  onRemoveAt: _propTypes2.default.func,

  files: _propTypes2.default.array, // controlled mode of the component with this array of files
  defaultFiles: _propTypes2.default.array, // what the uncontrolled, initial internal state should
  // hold and expose as files[] in the wrapped component,

  acceptsFile: _propTypes2.default.func, //only used for testing accepted utility function
  generateUniqueFileIdentifier: _propTypes2.default.func,

  fileMaxSize: _propTypes2.default.number,
  fileMinSize: _propTypes2.default.number,
  fileMaxCount: _propTypes2.default.number,

  isFileValid: _propTypes2.default.oneOfType([_propTypes2.default.func, _propTypes2.default.bool]),
  // has last say in file validaiton. If it returns false,
  // file will be marked as invalid, if it returns true,
  // file will be marked as valid.

  acceptDuplicates: _propTypes2.default.bool, // defaults to false. If false, will mark as invalid
  // files which are duplicates based on their unique generated
  // client file id.

  disabled: _propTypes2.default.bool,

  fileSizeFormatter: _propTypes2.default.func,
  timeFormatter: _propTypes2.default.func,
  locale: _propTypes2.default.string,
  i18n: _propTypes2.default.object,

  flagDirectories: _propTypes2.default.func
};

var fdzPropTypes = {
  emptyClass: _propTypes2.default.string,
  emptyStyle: _propTypes2.default.object,
  emptyText: _propTypes2.default.oneOfType([_propTypes2.default.object, _propTypes2.default.bool]),

  invalidClass: _propTypes2.default.string,
  invalidStyle: _propTypes2.default.object,
  invalidText: _propTypes2.default.oneOfType([_propTypes2.default.object, _propTypes2.default.bool, _propTypes2.default.string]),

  overClass: _propTypes2.default.string,
  overStyle: _propTypes2.default.object,
  overText: _propTypes2.default.oneOfType([_propTypes2.default.object, _propTypes2.default.bool]),

  theme: _propTypes2.default.string,

  noEvents: _propTypes2.default.bool,

  fileList: _propTypes2.default.func,
  uploadProgress: _propTypes2.default.object
};

var fdzDefaultProps = {
  emptyClass: '',
  emptyStyle: {},
  emptyText: null,

  invalidClass: '',
  invalidStyle: {},
  invalidText: null,

  overClass: '',
  overStyle: {},
  overText: null,

  noEvents: false,

  theme: 'default',
  uploadProgress: {}
};

exports.hocDefaultProps = hocDefaultProps;
exports.fdzDefaultProps = fdzDefaultProps;
exports.hocPropTypes = hocPropTypes;
exports.fdzPropTypes = fdzPropTypes;
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _regionAlign = require('@zippytech/region-align');

var _regionAlign2 = _interopRequireDefault(_regionAlign);

var _assign = require('../../../common/assign');

var _assign2 = _interopRequireDefault(_assign);

var _getPositionOffsets = require('./getPositionOffsets');

var _getPositionOffsets2 = _interopRequireDefault(_getPositionOffsets);

var _positionsMap = require('../positionsMap');

var _positionsMap2 = _interopRequireDefault(_positionsMap);

var _getArrowPosition = require('./getArrowPosition');

var _getArrowPosition2 = _interopRequireDefault(_getArrowPosition);

var _getConstrainRegion = require('../../../common/getConstrainRegion');

var _getConstrainRegion2 = _interopRequireDefault(_getConstrainRegion);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// position
/**
 * Copyright (c) 2015-present, Zippy Technologies
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

function getPosition(_ref) {
  var _ref$constrainTo = _ref.constrainTo,
      constrainTo = _ref$constrainTo === undefined ? true : _ref$constrainTo,
      targetNode = _ref.targetNode,
      overlayNode = _ref.overlayNode,
      offset = _ref.offset,
      positions = _ref.positions,
      relativeToViewport = _ref.relativeToViewport,
      arrowSize = _ref.arrowSize;

  if (!constrainTo || !overlayNode || !targetNode) {
    return null;
  }

  var constrain = (0, _getConstrainRegion2.default)(constrainTo, targetNode);

  var overlayRegion = _regionAlign2.default.from(overlayNode);
  var alignRegion = _regionAlign2.default.from(targetNode);

  var newRegion = overlayRegion.clone();
  var positionsNormalized = positions.map(function (position) {
    return _positionsMap2.default[position].position;
  });

  var positionsOffsets = (0, _getPositionOffsets2.default)(positions, offset);
  var positionsOffsetsClone = positionsOffsets.map(function (offset) {
    return (0, _assign2.default)({}, offset);
  });

  var succesfullPosition = newRegion.alignTo(alignRegion, positionsNormalized, {
    constrain: constrain,
    offset: positionsOffsetsClone
  });

  var arrowConfig = (0, _getArrowPosition2.default)({
    arrowSize: arrowSize,
    overlayRegion: newRegion,
    targetRegion: alignRegion,
    position: succesfullPosition
  });

  var position = {
    top: newRegion.top,
    left: newRegion.left
  };

  /**
   * If it uses absolute positon position must be corrected.
   * Substract top and left from offsetParent (first parent that has position).
   */
  if (!relativeToViewport && overlayNode.offsetParent) {
    var offsetParentRegion = _regionAlign2.default.from(overlayNode.offsetParent);
    position.left -= offsetParentRegion.left;
    position.top -= offsetParentRegion.top;
  }

  return { arrowConfig: arrowConfig, position: position, alignRegion: alignRegion };
}

exports.default = getPosition;
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

/**
 * Copyright (c) 2015-present, Zippy Technologies
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/**
 * Find common events, and remove them fron the original
 * kist
 * @param  {String[]} showEvent
 * @param  {String[]} hideEvent
 * @return {{ normalizedShowEvents normalizedHideEvents toggleEvents }}            [description]
 */
function separateEvents(_ref) {
  var showEvent = _ref.showEvent,
      hideEvent = _ref.hideEvent;

  if (!Array.isArray(showEvent) || !Array.isArray(hideEvent)) {
    return {};
  }

  var normalizedShowEvents = [].concat(_toConsumableArray(showEvent));
  var normalizedHideEvents = [].concat(_toConsumableArray(hideEvent));
  var toggleEvents = [];

  // it is enough to iterate through one of the event
  // lists
  normalizedShowEvents.forEach(function (eventName, index) {
    var searchIndex = normalizedHideEvents.indexOf(eventName);
    if (searchIndex !== -1) {
      toggleEvents.push(eventName);
      delete normalizedShowEvents[index];
      delete normalizedHideEvents[searchIndex];
    }
  });

  normalizedShowEvents = normalizedShowEvents.filter(function (eventName) {
    return eventName;
  });
  normalizedHideEvents = normalizedHideEvents.filter(function (eventName) {
    return eventName;
  });

  return {
    normalizedShowEvents: normalizedShowEvents,
    normalizedHideEvents: normalizedHideEvents,
    toggleEvents: toggleEvents
  };
}

exports.default = separateEvents;
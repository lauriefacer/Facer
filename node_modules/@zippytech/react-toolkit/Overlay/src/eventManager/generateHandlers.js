'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createToggleHandler = exports.createHideHandler = exports.createShowHandler = undefined;

var _matchesSelector = require('../../../common/matchesSelector');

var _matchesSelector2 = _interopRequireDefault(_matchesSelector);

var _matchesTarget = require('./matchesTarget');

var _matchesTarget2 = _interopRequireDefault(_matchesTarget);

var _assign = require('../../../common/assign');

var _assign2 = _interopRequireDefault(_assign);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Creates a handler for onShow event
 * it decies wether to call onShow(action),
 * and if it has to cancel an ongoing onHide.
 * @param  {function} action
 * @param  {String} target       [description]
 * @param  {Number} delay        [description]
 * @param  {Object: { showId, hideId, targetThatTriggeredEvent  }} timeoutState
 * @return {Function}
 */
function createShowHandler(_ref) {
  var action = _ref.action,
      target = _ref.target,
      getDelay = _ref.getDelay,
      timeoutState = _ref.timeoutState;

  return function (event) {
    var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    var delay = getDelay && getDelay();
    /**
     * target can be overwritten by config
     * it is used when it is triggered by
     * the overlay mouseneter
     */
    if (config.target) {
      event = (0, _assign2.default)({}, event, {
        target: config.target
      });
    }

    var node = event.target;

    if (!(0, _matchesTarget2.default)(target, node)) {
      return null;
    }

    var activeTargetNode = timeoutState.targetThatTriggeredEvent;
    timeoutState.targetThatTriggeredEvent = node;

    // case 7. onShow cancels onHide if from any target
    if (timeoutState.hideId) {
      clearTimeout(timeoutState.hideId);
      timeoutState.hideId = null;
    }

    if (delay) {
      // case 1, if it comes from same target do nothing
      if (timeoutState.showId && activeTargetNode === node) {
        return null;
      }

      /**
       * case 2. if comes from different target
       * remove the previous onShow and
       * schedule the new target's onShow
       */
      if (timeoutState.showId) {
        clearTimeout(timeoutState.showId);
      }

      timeoutState.showId = setTimeout(function () {
        timeoutState.showId = null;
        action(event);
      }, delay);
    } else {
      action(event);
    }
  };
}

/**
 * Creates a handler for onHide event
 * it decies wether to call onHide(action),
 * and if it has to cancel an ongoing onShow.
 * @param  {function} action
 * @param  {String} target       [description]
 * @param  {Number} delay        [description]
 * @param  {Object: { showId, hideId, targetThatTriggeredEvent  }} timeoutState
 * @return {Function}
 */
/**
 * Copyright (c) 2015-present, Zippy Technologies
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

function createHideHandler(_ref2) {
  var action = _ref2.action,
      target = _ref2.target,
      getDelay = _ref2.getDelay,
      timeoutState = _ref2.timeoutState;

  return function (event) {
    var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    var delay = getDelay && getDelay();
    /**
     * target can be overwritten by config
     * it is used when it is triggered by
     * the overlay mouseneter
     */
    if (config.target) {
      event = (0, _assign2.default)({}, event, {
        target: config.target
      });
    }

    var node = event.target;

    /**
     * config is used to overwrite initial setup
     */
    if (config.target !== null) {
      if (!(0, _matchesTarget2.default)(target, node)) {
        return null;
      }
    }

    var activeTargetNode = timeoutState.targetThatTriggeredEvent;
    timeoutState.targetThatTriggeredEvent = node;

    // case 3. onHide cancels onShow if from same target
    if (activeTargetNode === node && timeoutState.showId) {
      clearTimeout(timeoutState.showId);
      timeoutState.showId = null;
    }

    // case 4 .. do nothing

    if (delay) {
      // case 5. from same target, do nothing
      if (timeoutState.hideId && activeTargetNode === node) {
        return null;
      }

      timeoutState.hideId = setTimeout(function () {
        timeoutState.hideId = null;
        action(event);
      }, delay);
    } else {
      action(event);
    }
  };
}

/**
 * Event handler that when called toggles calling
 * onShow and onHide
 * @param  {Function} onHide
 * @param  {Function} onShow
 * @param {String} target, css selector
 * @return {Function} handler
 */
function createToggleHandler(_ref3) {
  var onHide = _ref3.onHide,
      onShow = _ref3.onShow,
      target = _ref3.target,
      getActiveTargetNode = _ref3.getActiveTargetNode,
      getVisible = _ref3.getVisible;

  return function (event) {
    var activeTargetNode = getActiveTargetNode();
    var node = event.target;

    if (!(0, _matchesTarget2.default)(target, node)) {
      return null;
    }

    // if from same element toggle, else hide
    if (getVisible() && node === activeTargetNode) {
      onHide(event);
    } else {
      onShow(event);
    }
  };
}

exports.createShowHandler = createShowHandler;
exports.createHideHandler = createHideHandler;
exports.createToggleHandler = createToggleHandler;
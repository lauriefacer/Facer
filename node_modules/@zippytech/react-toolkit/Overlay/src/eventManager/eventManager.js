'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _separateEvents2 = require('./separateEvents');

var _separateEvents3 = _interopRequireDefault(_separateEvents2);

var _registerEvents = require('./registerEvents');

var _generateHandlers = require('./generateHandlers');

var _createHideOnClickOutsideAction = require('./createHideOnClickOutsideAction');

var _createHideOnClickOutsideAction2 = _interopRequireDefault(_createHideOnClickOutsideAction);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Decides when to trigger onShow or onHide.
 *
 *  Delays, the interaction between onShow and onHide with delay
 *  All cases are tested in delay-test.js.
 *
 *  Cases:
 *  [x] 1 - onShow scheduled + domShow event from same target
 *  a second event is not scheduled
 *
 *  [x] 2 - onShow scheduled + domShow event from different target
 *  previous scheduled is calceled, the new one is scheduled
 *
 *  [x] 3 - onShow scheduled + domHide event from same target
 *  cancel onShow event
 *
 *  [x] 4 - onShow scheduled + domHide event from other target
 *  nothing to do
 *
 *  [x] 5 - onHide scheduled + domHide event from same target
 *  don't schedule a new on hide
 *
 *  [x] 6 - onHide scheduled + domHide from different target
 *  nothing to do
 *
 *  [x] 7 - onHide scheduled + domShow from same target
 *  cancel scheduled
 *
 *  [x] 8 - onHide scheduled + domShow from different target
 *  cancel scheduled, as it should just jump from one another
 *
 *  TODO:
 *  When the overlay has hideEvents: mouseout,
 *  we asume that
 *  showEvent: 'mouseenter'
 *  hideEvent: 'mouseleave'
 *  is applied on the overlay
 *
 *  target can be node
 *
 *
 * @param {Object} : {
 *  showEvent: String[] - events to trigger show
 *  hideEvent: String[] - events to trigger hide
 *  target: String|String[]|DOMNode - on what elements to listen to events and
 *  on which elements it should overlay/show
 *  hideOnScroll: Boolean - whether to hide on window scroll
 *  hideOnClickOutside: Bool - whether to hide when a click was registered outiside
 *  the overlay or the target element
 *
 *  getVisible: () => visible - returns the current visible state of the overlay
 *
 *  showDelay/hideDelay: Number - in ms, time from when the event has been triggered until
 *  the onShow/onHide will be called
 *
 *  getOverlayNode: () => DOMNode
 *  getActiveTargetNode: () => DOMNode - this is the node that whas the source of the
 *  event from the previous onShow/onHide
 * }
 * @return { unregister: Function }
 */
/**
 * Copyright (c) 2015-present, Zippy Technologies
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

function eventManager(config) {
  var _config$showEvent = config.showEvent,
      showEvent = _config$showEvent === undefined ? [] : _config$showEvent,
      _config$hideEvent = config.hideEvent,
      hideEvent = _config$hideEvent === undefined ? [] : _config$hideEvent,
      target = config.target,
      hideOnScroll = config.hideOnScroll,
      hideOnClickOutside = config.hideOnClickOutside,
      hideOnEscape = config.hideOnEscape,
      onShow = config.onShow,
      onHide = config.onHide,
      getShowDelay = config.getShowDelay,
      getHideDelay = config.getHideDelay,
      getVisible = config.getVisible,
      _config$getOverlayNod = config.getOverlayNode,
      getOverlayNode = _config$getOverlayNod === undefined ? function () {} : _config$getOverlayNod,
      getActiveTargetNode = config.getActiveTargetNode;

  // is mutated

  var timeoutState = {
    showId: null,
    hideId: null,
    targetThatTriggeredEvent: null
  };

  // common events must toggle
  // they must be separated and removed from hideEvent and showEvent

  var _separateEvents = (0, _separateEvents3.default)({
    showEvent: showEvent,
    hideEvent: hideEvent
  }),
      normalizedShowEvents = _separateEvents.normalizedShowEvents,
      normalizedHideEvents = _separateEvents.normalizedHideEvents,
      toggleEvents = _separateEvents.toggleEvents;

  var showAction = (0, _generateHandlers.createShowHandler)({
    timeoutState: timeoutState,
    target: target,
    getActiveTargetNode: getActiveTargetNode,
    action: onShow,
    getDelay: getShowDelay
  });
  if (normalizedShowEvents && onShow) {
    // register show
    (0, _registerEvents.registerListeners)({
      events: normalizedShowEvents,
      action: showAction
    });
  }

  // register hide
  var hideAction = (0, _generateHandlers.createHideHandler)({
    timeoutState: timeoutState,
    target: target,
    getActiveTargetNode: getActiveTargetNode,
    action: onHide,
    getDelay: getHideDelay
  });

  if (normalizedHideEvents && onHide) {
    (0, _registerEvents.registerListeners)({
      events: normalizedHideEvents,
      action: hideAction
    });
  }

  var toggleAction = void 0;
  if (toggleEvents.length) {
    toggleAction = (0, _generateHandlers.createToggleHandler)({
      target: target,
      getActiveTargetNode: getActiveTargetNode,
      getVisible: getVisible,
      onHide: hideAction,
      onShow: showAction
    });

    (0, _registerEvents.registerListeners)({
      events: toggleEvents,
      action: toggleAction
    });
  }

  var hideOnClickOutsideAction = void 0;
  if (hideOnClickOutside) {
    hideOnClickOutsideAction = (0, _createHideOnClickOutsideAction2.default)({
      getOverlayNode: getOverlayNode,
      getActiveTargetNode: getActiveTargetNode,
      onHide: hideAction
    });
    (0, _registerEvents.registerListeners)({
      events: ['click'],
      action: hideOnClickOutsideAction
    });
  }

  var hideOnScrollAction = void 0;
  if (hideOnScroll) {
    hideOnScrollAction = function hideOnScrollAction(event) {
      if (getVisible()) {
        hideAction(event, { target: null });
      }
    };
    (0, _registerEvents.registerListeners)({
      events: ['scroll'],
      action: hideOnScrollAction
    });
  }

  var hideOnEscapeAction = void 0;
  if (hideOnEscape) {
    hideOnEscapeAction = function hideOnEscapeAction(event) {
      if (getVisible() && event.key === 'Escape') {
        hideAction(event, { target: null });
      }
    };
    (0, _registerEvents.registerListeners)({
      events: ['keydown'],
      action: hideOnEscapeAction
    });
  }

  /**
   * If there is a mouseleave registered for hideEvent
   * will also listen for mouseleave and mouseenter
   * on tooltip
   */
  var handleOverlayShowAction = void 0;
  var handleOverlayHideAction = void 0;
  if (normalizedHideEvents.indexOf('mouseleave') !== -1) {
    handleOverlayShowAction = function handleOverlayShowAction(event) {
      if (event.target === getOverlayNode()) {
        var activeTargetNode = getActiveTargetNode();
        showAction(event, { target: activeTargetNode });
      }
    };

    (0, _registerEvents.registerListeners)({
      events: ['mouseenter'],
      action: handleOverlayShowAction
    });

    handleOverlayHideAction = function handleOverlayHideAction(event) {
      if (event.target === getOverlayNode()) {
        var activeTargetNode = getActiveTargetNode();
        hideAction(event, { target: activeTargetNode });
      }
    };
    (0, _registerEvents.registerListeners)({
      events: ['mouseleave'],
      action: handleOverlayHideAction
    });
  }

  // unregister all event listeners
  return {
    unregister: function unregister() {
      if (normalizedShowEvents && showAction) {
        (0, _registerEvents.unregisterListeners)({
          events: normalizedShowEvents,
          action: showAction
        });
      }

      // unregister hide
      if (normalizedHideEvents && hideAction) {
        (0, _registerEvents.unregisterListeners)({
          events: normalizedHideEvents,
          action: hideAction
        });
      }

      // unregister hide
      if (toggleEvents && toggleAction) {
        (0, _registerEvents.unregisterListeners)({
          events: toggleEvents,
          action: toggleAction
        });
      }

      // unregister clickoutside
      if (hideOnClickOutsideAction) {
        (0, _registerEvents.unregisterListeners)({
          events: ['click'],
          action: hideOnClickOutsideAction
        });
      }

      // unregister hideOnScrollAction
      if (hideOnScrollAction) {
        (0, _registerEvents.unregisterListeners)({
          events: ['scroll'],
          action: hideOnScrollAction
        });
      }

      // unregister onSow and onHide listeners on popover
      if (handleOverlayShowAction) {
        (0, _registerEvents.unregisterListeners)({
          events: ['mouseenter'],
          action: handleOverlayShowAction
        });
      }
      if (handleOverlayHideAction) {
        (0, _registerEvents.unregisterListeners)({
          events: ['mouseleave'],
          action: handleOverlayHideAction
        });
      }
      if (hideOnEscapeAction) {
        (0, _registerEvents.unregisterListeners)({
          events: ['keydown'],
          action: hideOnEscapeAction
        });
      }
    }
  };
}

exports.default = eventManager;
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _cleanProps = require('../../common/cleanProps');

var _cleanProps2 = _interopRequireDefault(_cleanProps);

var _assign = require('../../common/assign');

var _assign2 = _interopRequireDefault(_assign);

var _eventManager = require('./eventManager');

var _eventManager2 = _interopRequireDefault(_eventManager);

var _getMinMaxSize = require('./utils/getMinMaxSize');

var _getMinMaxSize2 = _interopRequireDefault(_getMinMaxSize);

var _join = require('./utils/join');

var _join2 = _interopRequireDefault(_join);

var _shouldComponentUpdate2 = require('./utils/shouldComponentUpdate');

var _shouldComponentUpdate3 = _interopRequireDefault(_shouldComponentUpdate2);

var _normalizeEvent = require('./utils/normalizeEvent');

var _normalizeEvent2 = _interopRequireDefault(_normalizeEvent);

var _getFocusableElements = require('./utils/getFocusableElements');

var _getFocusableElements2 = _interopRequireDefault(_getFocusableElements);

var _getPositionRelativeToElement = require('../../common/getPositionRelativeToElement');

var _getPositionRelativeToElement2 = _interopRequireDefault(_getPositionRelativeToElement);

var _Arrow = require('./Arrow');

var _Arrow2 = _interopRequireDefault(_Arrow);

var _positionsMap = require('../../common/getPositionRelativeToElement/positionsMap');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Copyright (c) 2015-present, Zippy Technologies
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * This source code is licensed under the MIT license found in the
file in the root directory of this source tree.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */

var ZippyOverlay = function (_Component) {
  _inherits(ZippyOverlay, _Component);

  function ZippyOverlay(props) {
    _classCallCheck(this, ZippyOverlay);

    var _this = _possibleConstructorReturn(this, (ZippyOverlay.__proto__ || Object.getPrototypeOf(ZippyOverlay)).call(this, props));

    _this.state = {
      visible: props.defaultVisible,
      position: null,
      arrowConfig: null,
      renderTrigger: null
    };

    _this.handleDocumentScroll = _this.handleDocumentScroll.bind(_this);
    _this.onHide = _this.onHide.bind(_this);
    _this.onShow = _this.onShow.bind(_this);
    _this.handleKeyDown = _this.handleKeyDown.bind(_this);
    _this.getOverlayNode = _this.getOverlayNode.bind(_this);
    _this.getVisible = _this.getVisible.bind(_this);
    _this.getActiveTargetNode = _this.getActiveTargetNode.bind(_this);
    _this.rootRef = function (node) {
      _this.rootNode = node;
    };

    _this.fixedRef = function (node) {
      _this.fixedNode = node;
    };
    return _this;
  }

  _createClass(ZippyOverlay, [{
    key: 'shouldComponentUpdate',
    value: function shouldComponentUpdate(nextProps, nextState) {
      return (0, _shouldComponentUpdate3.default)(this, nextProps, nextState);
    }
  }, {
    key: 'componentDidMount',
    value: function componentDidMount() {
      var _this2 = this;

      this.register();
      this.componentIsMounted = true;

      if (this.props.updatePositionOnScroll) {
        window.addEventListener('scroll', this.handleDocumentScroll, true);
      }

      var doPosition = function doPosition() {
        /**
         * If target is a node then activeTargetNode
         * is this target, so position can be set.
         */
        var target = _this2.getTarget();
        if ((typeof target === 'undefined' ? 'undefined' : _typeof(target)) === 'object') {
          _this2.activeTargetNode = target;
          _this2.setPosition(_this2.props.onInitialPosition);
          if (_this2.getVisible()) {
            _this2.onShow({ target: target });
          }
        }
      };

      if (this.props.rafOnMount) {
        requestAnimationFrame(doPosition);
      } else {
        doPosition();
      }
    }
  }, {
    key: 'UNSAFE_componentWillReceiveProps',
    value: function UNSAFE_componentWillReceiveProps(nextProps) {
      if (this.props.visible !== nextProps.visible) {
        this.handleVisibleChange(nextProps.visible);
      }
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      this.unregister();
      this.componentIsMounted = null;
      this.activeTargetNode = null;

      if (this.props.updatePositionOnScroll) {
        window.removeEventListener('scroll', this.handleDocumentScroll, true);
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var props = this.props;

      var className = this.prepareClassName();
      var contentClassName = this.prepareContentClassName();
      var style = this.prepareStyle();
      var contentStyle = this.prepareContentStyle();

      return _react2.default.createElement(
        'div',
        _extends({}, (0, _cleanProps2.default)(props, ZippyOverlay.propTypes), {
          className: className,
          ref: this.rootRef,
          style: style,
          onKeyDown: this.handleKeyDown
        }),
        _react2.default.createElement('div', _extends({
          className: contentClassName
        }, this.getChildrenProps(), {
          style: contentStyle
        })),
        props.arrow && this.renderArrow(),
        props.relativeToViewport && this.renderFixed()
      );
    }
  }, {
    key: 'renderFixed',
    value: function renderFixed() {
      return _react2.default.createElement('div', {
        style: { position: 'fixed', top: 0, left: 0, width: 0, height: 0 },
        ref: this.fixedRef
      });
    }
  }, {
    key: 'renderArrow',
    value: function renderArrow() {
      if (!this.state.arrowConfig) {
        return null;
      }
      var rootClassName = this.props.rootClassName;


      var position = this.state.arrowConfig.position;
      var location = this.state.arrowConfig.location;
      var className = (0, _join2.default)(rootClassName + '__arrow', rootClassName + '__arrow--' + location, this.props.arrowClassName);

      var style = (0, _assign2.default)({}, this.props.arrowStyle);

      if (this.props.border) {
        (0, _assign2.default)(style, {
          border: this.props.border
        });
      }

      if (this.props.background != undefined) {
        (0, _assign2.default)(style, {
          background: this.props.background
        });
      }

      var wrapperClassName = (0, _join2.default)(rootClassName + '__arrow-wrapper', rootClassName + '__arrow-wrapper--' + location);

      return _react2.default.createElement(_Arrow2.default, {
        className: className,
        wrapperClassName: wrapperClassName,
        position: position,
        style: style,
        size: this.props.arrowSize
      });
    }

    /**
     * Children can be a function or jsx.
     * If undefined, it used the target's data-tooltip
     * attribute and will set the contents with
     * dangerouslySetInnerHTML.
     */

  }, {
    key: 'getChildrenProps',
    value: function getChildrenProps() {
      var children = this.props.children;

      var targetNode = this.getPositionTarget();
      var childrenProps = { children: children };
      var childrenParams = {
        targetNode: targetNode,
        visible: this.getVisible()
      };

      if (typeof children === 'function') {
        return {
          children: children(childrenParams)
        };
      }

      if (children === undefined && targetNode) {
        var tooltip = targetNode.getAttribute('data-tooltip');
        if (tooltip != null) {
          return {
            dangerouslySetInnerHTML: {
              __html: tooltip
            }
          };
        }
      }

      return childrenProps;
    }

    // className

  }, {
    key: 'prepareClassName',
    value: function prepareClassName() {
      var props = this.props,
          state = this.state;
      var rootClassName = props.rootClassName,
          theme = props.theme,
          visibleClassName = props.visibleClassName,
          relativeToViewport = props.relativeToViewport;


      var visible = this.getVisible();

      var className = (0, _join2.default)(rootClassName, props.className, visible && rootClassName + '--visible', visible && visibleClassName, !visible && rootClassName + '--invisible', relativeToViewport && rootClassName + '--position-fixed', theme && rootClassName + '--theme-' + theme);

      if (this.props.fade) {
        // animation
        className = (0, _join2.default)(className, props.fade && rootClassName + '--has-transition', state.transitionEnter && rootClassName + '--transition-enter', state.transitionEnterActive && rootClassName + '--transition-enter-active', state.transitionLeave && rootClassName + '--transition-leave', state.transitionLeaveActive && rootClassName + '--transition-leave-active');
      }

      return className;
    }
  }, {
    key: 'prepareContentClassName',
    value: function prepareContentClassName() {
      return (0, _join2.default)(this.props.contentClassName, this.props.rootClassName + '__content');
    }
  }, {
    key: 'prepareStyle',
    value: function prepareStyle() {
      var style = (0, _assign2.default)({
        zIndex: this.props.zIndex
      }, this.props.style);
      /**
       * Transition duration must be added
       * only when transition should start.
       *
       * If is added all the time when it first
       * changes opacity, it will transition
       * directly/blinks, I think because it tries
       * to transition also from visibility hidden to
       * visible.
       */
      if (this.props.fade) {
        (0, _assign2.default)(style, this.getTransitionStyle());
      }

      if (this.props.border) {
        (0, _assign2.default)(style, {
          border: this.props.border
        });
      }

      if (this.state.position) {
        if (this.props.useTransform) {
          style.transform = 'translate3d(' + Math.round(this.state.position.left || 0) + 'px, ' + Math.round(this.state.position.top || 0) + 'px, 0px)';
          style.left = 0;
          style.top = 0;
        } else {
          (0, _assign2.default)(style, {
            left: Math.round(this.state.position.left)
          });
          if (this.state.position.top != null) {
            style.top = Math.round(this.state.position.top);
          }
        }
        if (this.state.position.bottom != null) {
          style.bottom = Math.round(this.state.position.bottom);
        }
        if (this.state.position.width) {
          style.width = this.state.position.width;
        }
      }

      return style;
    }
  }, {
    key: 'prepareContentStyle',
    value: function prepareContentStyle() {
      var style = (0, _assign2.default)({}, this.props.contentStyle);

      if (this.props.background != undefined) {
        (0, _assign2.default)(style, {
          background: this.props.background
        });
      }

      if (this.props.padding != undefined) {
        (0, _assign2.default)(style, {
          padding: this.props.padding
        });
      }

      if (this.props.height != undefined) {
        (0, _assign2.default)(style, {
          height: this.props.height
        });
      }

      if (this.props.width != undefined) {
        (0, _assign2.default)(style, {
          width: this.props.width
        });
      }

      var maxMinSize = (0, _getMinMaxSize2.default)(this.props);
      (0, _assign2.default)(style, maxMinSize);

      return style;
    }
  }, {
    key: 'getTransitionStyle',
    value: function getTransitionStyle() {
      var state = this.state;

      var style = {};

      if (state.transitionEnterActive || state.transitionLeaveActive) {
        style.transitionDuration = state.transitionEnterActive ? this.getFadeInDuration() + 'ms' : this.getFadeOutDuration() + 'ms';

        style.transitionTimingFunction = state.transitionEnterActive ? this.getFadeInTransitionFunction() : this.getFadeOutTransitionFunction();
      }

      return style;
    }

    // show hide logic

  }, {
    key: 'onShow',
    value: function onShow(event) {
      var _this3 = this;

      this.activeTargetNode = event.target;

      /**
       * a render must be triggered before
       * position and visibility is updated
       * because a real size is neaded for
       * a correct position to be determined
       */
      this.setState({
        renderTrigger: !this.state.renderTrigger
      }, function () {
        _this3.setPosition();
        _this3.setVisible(true);
      });
    }
  }, {
    key: 'onHide',
    value: function onHide(event) {
      this.setVisible(false);
    }

    // event registering

  }, {
    key: 'register',
    value: function register() {
      var _this4 = this;

      this.eventManager = this.getEventManager()({
        // events
        showEvent: (0, _normalizeEvent2.default)(this.props.showEvent),
        hideEvent: (0, _normalizeEvent2.default)(this.props.hideEvent),

        // selector
        target: this.getTarget(),

        // bools
        hideOnScroll: this.props.hideOnScroll,
        hideOnClickOutside: this.props.hideOnClickOutside,
        hideOnEscape: this.props.hideOnEscape,

        // actions
        onShow: this.onShow,
        onHide: this.onHide,

        // delays
        getShowDelay: function getShowDelay() {
          return _this4.props.showDelay;
        },
        getHideDelay: function getHideDelay() {
          return _this4.props.hideDelay;
        },

        // states
        getVisible: this.getVisible,

        // nodes
        getOverlayNode: this.getOverlayNode,
        getActiveTargetNode: this.getActiveTargetNode
      });
    }
  }, {
    key: 'unregister',
    value: function unregister() {
      if (this.eventManager) {
        this.eventManager.unregister();
      }
    }
  }, {
    key: 'getEventManager',
    value: function getEventManager() {
      return this.props.eventManager;
    }
  }, {
    key: 'getTarget',
    value: function getTarget() {
      var target = void 0;

      var rootNode = this.getOverlayNode();

      if (this.props.target) {
        target = this.props.target;

        if (typeof target === 'function') {
          target = target(this.props, rootNode, this);
        }
      } else {
        if (rootNode) {
          target = rootNode.parentElement;
        }
      }

      return target;
    }

    // visible

  }, {
    key: 'setVisible',
    value: function setVisible(visible) {
      if (!this.isVisibleControlled()) {
        if (visible !== this.getVisible()) {
          this.handleVisibleChange(visible);
        }

        this.setState({
          visible: visible
        });
      }
      if (visible) {
        this.props.onShow();
      } else {
        this.props.onHide();
      }
      this.props.onVisibleChange(visible);
    }
  }, {
    key: 'isVisibleControlled',
    value: function isVisibleControlled() {
      return this.props.visible != null; // allow null and undefined
    }
  }, {
    key: 'getVisible',
    value: function getVisible() {
      return this.isVisibleControlled() ? this.props.visible : this.state.visible;
    }

    // positioning

  }, {
    key: 'setPosition',
    value: function setPosition(callback) {
      this.setState(this.getPositionConfig(), callback);
    }

    /**
     * Uses `getPosition` with parameters
     */

  }, {
    key: 'getPositionConfig',
    value: function getPositionConfig() {
      var _props = this.props,
          constrainTo = _props.constrainTo,
          offset = _props.offset,
          syncWidth = _props.syncWidth;

      var positions = this.props.positions;
      // const targetNode = this.getActiveTargetNode();
      var targetNode = this.getPositionTarget();

      var tooltipPositions = targetNode ? targetNode.getAttribute('data-tooltip-positions') : null;

      if (tooltipPositions) {
        positions = tooltipPositions.split(',').map(function (position) {
          return position && position.trim ? position.trim() : position;
        });
      }
      var normalizedPositions = Array.isArray(positions) ? positions : [positions];

      var newState = (0, _getPositionRelativeToElement2.default)({
        showArrow: true,
        constrainTo: constrainTo,
        offset: offset,
        targetNode: targetNode,
        overlayNode: this.getOverlayNode(),
        positions: normalizedPositions,
        adjustOnPositionBottom: this.props.adjustOnPositionBottom,
        relativeToViewport: this.props.relativeToViewport,
        arrowSize: this.props.arrowSize
      });

      if (this.props.relativeToViewport && this.fixedNode) {
        var fixedRect = this.fixedNode.getBoundingClientRect();

        if (newState && newState.position) {
          var useTransform = this.props.useTransform;

          newState.position = {
            top: newState.position.top - (useTransform ? 0 : fixedRect.top),
            left: newState.position.left - (useTransform ? 0 : fixedRect.left)
          };

          if (syncWidth) {
            newState.position.width = newState.alignRegion.width;
          }
        }
      }

      return newState;
    }
  }, {
    key: 'handleDocumentScroll',
    value: function handleDocumentScroll() {
      if (this.props.updatePositionOnScroll) {
        /**
         * Dom mutation is used because
         * state change whould be to expensive
         * onSCroll
         */
        this.updateDomPosition();
      }
    }
  }, {
    key: 'updateDomPosition',
    value: function updateDomPosition() {
      var positionConfig = this.getPositionConfig();

      if (this.rootNode && positionConfig) {
        var newPosition = positionConfig.position;
        if (newPosition.bottom !== undefined) {
          this.rootNode.style.bottom = newPosition.bottom + 'px';
        }

        if (this.props.useTransform) {
          var oldPosition = this.state.position || { top: 0, left: 0 };
          this.rootNode.style.transform = 'translate3d(' + Math.round(newPosition.left || oldPosition.left) + 'px, ' + Math.round(newPosition.top || oldPosition.top) + 'px, 0px)';
        } else {
          if (newPosition.top !== undefined) {
            this.rootNode.style.top = Math.round(newPosition.top) + 'px';
          }

          this.rootNode.style.left = Math.round(newPosition.left) + 'px';
        }
      }
    }

    // node getters

  }, {
    key: 'getOverlayNode',
    value: function getOverlayNode() {
      return this.rootNode;
    }
  }, {
    key: 'getActiveTargetNode',
    value: function getActiveTargetNode() {
      return this.activeTargetNode;
    }
  }, {
    key: 'getPositionTarget',
    value: function getPositionTarget() {
      var target = this.getTarget();

      if (target instanceof Element) {
        return target;
      }

      return this.getActiveTargetNode();
    }

    // fade animation
    // animation

  }, {
    key: 'handleVisibleChange',
    value: function handleVisibleChange(visible) {
      if (!this.props.fade) {
        return null;
      }
      if (visible) {
        this.setupEnterTransition();
      } else {
        this.setupLeaveTransition();
      }
    }
  }, {
    key: 'setupEnterTransition',
    value: function setupEnterTransition() {
      var _this5 = this;

      this.props.onFadeInStart();
      this.setState({
        transitionEnter: true,
        transitionEnterActive: false,

        // reset leave
        transitionLeave: false,
        transitionLeaveActive: false
      }, function () {
        setTimeout(function () {
          if (_this5.componentIsMounted) {
            _this5.setState({
              transitionEnterActive: true
            }, function () {
              _this5.props.onFadeInEnd();
            });
          }
        }, 16);
      });
    }
  }, {
    key: 'setupLeaveTransition',
    value: function setupLeaveTransition() {
      var _this6 = this;

      this.props.onFadeOutStart();
      this.setState({
        transitionLeave: true,
        transitionLeaveActive: false,

        // reset enter
        transitionEnter: false,
        transitionEnterActive: false
      }, function () {
        setTimeout(function () {
          if (_this6.componentIsMounted) {
            _this6.setState({
              transitionLeaveActive: true
            }, function () {
              setTimeout(function () {
                if (_this6.componentIsMounted) {
                  // cleanup
                  _this6.setState({
                    transitionLeave: false,
                    transitionLeaveActive: false
                  }, function () {
                    _this6.props.onFadeOutEnd();
                  });
                }
              }, _this6.getFadeOutDuration());
            });
          }
        }, 16);
      });
    }
  }, {
    key: 'getFadeInDuration',
    value: function getFadeInDuration() {
      if (this.props.fadeInDuration) {
        return this.props.fadeInDuration;
      }
      return this.props.fadeDuration;
    }
  }, {
    key: 'getFadeOutDuration',
    value: function getFadeOutDuration() {
      if (this.props.fadeOutDuration) {
        return this.props.fadeOutDuration;
      }
      return this.props.fadeDuration;
    }
  }, {
    key: 'getFadeInTransitionFunction',
    value: function getFadeInTransitionFunction() {
      if (this.props.fadeInTransitionFunction) {
        return this.props.fadeInTransitionFunction;
      }
      return this.props.fadeTransitionFunction;
    }
  }, {
    key: 'getFadeOutTransitionFunction',
    value: function getFadeOutTransitionFunction() {
      if (this.props.fadeOutTransitionFunction) {
        return this.props.fadeOutTransitionFunction;
      }
      return this.props.fadeTransitionFunction;
    }

    // capture tab navigation
    // root events

  }, {
    key: 'handleKeyDown',
    value: function handleKeyDown(event) {
      if (this.props.captureTabNavigation && event.key === 'Tab') {
        this.captureTabNavigation(event);
      }

      // let event propagate
      if (this.props.onKeyDown) {
        this.props.onKeyDown(event);
      }
    }
  }, {
    key: 'captureTabNavigation',
    value: function captureTabNavigation(event) {
      var shiftKey = event.shiftKey;
      var nodes = (0, _getFocusableElements2.default)(this.rootNode);
      if (!nodes.length) {
        return null;
      }
      var firstNode = nodes[0];
      var lastNode = nodes[nodes.length - 1];

      if (lastNode === event.target && !shiftKey) {
        firstNode.focus();
        event.preventDefault();
        event.stopPropagation();
      }

      if (firstNode === event.target && shiftKey) {
        lastNode.focus();
        event.preventDefault();
        event.stopPropagation();
      }
    }

    // methods

  }, {
    key: 'show',
    value: function show() {
      this.setVisible(true);
    }
  }, {
    key: 'hide',
    value: function hide() {
      this.setVisible(false);
    }
  }]);

  return ZippyOverlay;
}(_react.Component);

var emptyFn = function emptyFn() {};

ZippyOverlay.defaultProps = {
  captureTabNavigation: false,
  updatePositionOnScroll: false,
  zIndex: 100,
  theme: 'default',

  // style
  rootClassName: 'zippy-react-toolkit-overlay',
  background: null,
  padding: null,

  // visibility
  eventManager: _eventManager2.default,
  target: null,
  showEvent: ['mouseenter'],
  hideEvent: ['mouseleave'],
  defaultVisible: false,

  // arrow
  arrow: true,
  arrowStyle: {},
  arrowSize: 11,

  // delays
  showDelay: null,
  hideDelay: null,

  // visible modifiers
  hideOnClickOutside: true,
  hideOnScroll: false,

  // animation
  fade: false,
  fadeDuration: 300,
  fadeInDuration: 300,
  fadeOutDuration: 50,
  fadeTransitionFunction: 'ease',

  // position
  positions: _positionsMap.posiblePositions,
  constrainTo: true,
  offset: 10,
  rafOnMount: true,
  relativeToViewport: true,
  adjustOnPositionBottom: false,

  // events
  onVisibleChange: emptyFn,
  onShow: emptyFn,
  onHide: emptyFn,

  onFadeInStart: emptyFn,
  onFadeOutStart: emptyFn,
  onFadeInEnd: emptyFn,
  onFadeOutEnd: emptyFn
};

ZippyOverlay.propTypes = {
  shouldComponentUpdate: _propTypes2.default.func,
  captureTabNavigation: _propTypes2.default.bool,
  updatePositionOnScroll: _propTypes2.default.bool,
  children: _propTypes2.default.oneOfType([_propTypes2.default.node, _propTypes2.default.func]),

  // style
  rootClassName: _propTypes2.default.string,
  border: _propTypes2.default.string,
  background: _propTypes2.default.string,
  theme: _propTypes2.default.string,
  zIndex: _propTypes2.default.number,

  // content
  contentStyle: _propTypes2.default.object,
  contentClassName: _propTypes2.default.string,
  padding: _propTypes2.default.number,

  // size
  height: _propTypes2.default.number,
  width: _propTypes2.default.number,
  minSize: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string, _propTypes2.default.shape({
    height: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]),
    width: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string])
  })]),
  maxSize: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string, _propTypes2.default.shape({
    height: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]),
    width: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string])
  })]),

  // arrow
  arrow: _propTypes2.default.bool,
  arrowClassName: _propTypes2.default.string,
  arrowStyle: _propTypes2.default.object,
  arrowSize: _propTypes2.default.number,

  // visibility
  visible: _propTypes2.default.bool,
  visibleClassName: _propTypes2.default.string,
  defaultVisible: _propTypes2.default.bool,
  target: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.object, _propTypes2.default.func]),
  eventManager: _propTypes2.default.func,

  // visible events
  showEvent: _propTypes2.default.oneOfType([_propTypes2.default.arrayOf(_propTypes2.default.string), _propTypes2.default.string]),
  hideEvent: _propTypes2.default.oneOfType([_propTypes2.default.arrayOf(_propTypes2.default.string), _propTypes2.default.string]),

  // delays
  showDelay: _propTypes2.default.number,
  hideDelay: _propTypes2.default.number,

  // visible modifiers
  hideOnClickOutside: _propTypes2.default.bool,
  hideOnScroll: _propTypes2.default.bool,
  hideOnEscape: _propTypes2.default.bool,

  useTransform: _propTypes2.default.bool,

  // animation
  fade: _propTypes2.default.bool,
  fadeDuration: _propTypes2.default.number,
  fadeInDuration: _propTypes2.default.number,
  fadeOutDuration: _propTypes2.default.number,
  fadeTransitionFunction: _propTypes2.default.string,
  fadeInTransitionFunction: _propTypes2.default.string,
  fadeOutTransitionFunction: _propTypes2.default.string,

  // positioning
  constrainTo: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.object, _propTypes2.default.func, _propTypes2.default.bool]),
  positions: function positions(props, propName, componentName) {
    var positions = props[propName];

    if (typeof positions === 'string') {
      if (_positionsMap.posiblePositions.indexOf(positions) === -1) {
        return new Error('\nInvalid prop ' + propName + ' suplied to ' + componentName + '.\nFollowing values are allowed: ' + _positionsMap.posiblePositions.join(', ') + '\n');
      }
    }
  },
  offset: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.shape({
    x: _propTypes2.default.number,
    y: _propTypes2.default.number
  }), _propTypes2.default.arrayOf(_propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.shape({
    x: _propTypes2.default.number,
    y: _propTypes2.default.number
  })]))]),
  rafOnMount: _propTypes2.default.bool,
  relativeToViewport: _propTypes2.default.bool,
  adjustOnPositionBottom: _propTypes2.default.bool,
  syncWidth: _propTypes2.default.bool,

  onInitialPosition: _propTypes2.default.func,

  // events
  onVisibleChange: _propTypes2.default.func,
  onShow: _propTypes2.default.func,
  onHide: _propTypes2.default.func,

  onFadeInStart: emptyFn,
  onFadeOutStart: emptyFn,
  onFadeInEnd: emptyFn,
  onFadeOutEnd: emptyFn
};

exports.default = ZippyOverlay;
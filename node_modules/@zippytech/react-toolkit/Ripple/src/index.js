'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _join = require('../../common/join');

var _join2 = _interopRequireDefault(_join);

var _cleanProps = require('../../common/cleanProps');

var _cleanProps2 = _interopRequireDefault(_cleanProps);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Copyright (c) 2015-present, Zippy Technologies
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * This source code is licensed under the MIT license found in the
file in the root directory of this source tree.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */

var Ripple = function (_Component) {
  _inherits(Ripple, _Component);

  function Ripple(props) {
    _classCallCheck(this, Ripple);

    var _this = _possibleConstructorReturn(this, (Ripple.__proto__ || Object.getPrototypeOf(Ripple)).call(this, props));

    _this.state = {
      ripple: false
    };

    _this.onWaveStart = _this.onWaveStart.bind(_this);
    _this.onWaveStop = _this.onWaveStop.bind(_this);

    _this.ref = function (n) {
      _this.node = n;
    };
    return _this;
  }

  _createClass(Ripple, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      if (this.props.wave) {
        this.start();
      }
    }
  }, {
    key: 'componentDidUpdate',
    value: function componentDidUpdate(oldProps) {
      if (!oldProps.wave && this.props.wave) {
        this.start();
      }
    }
  }, {
    key: 'start',
    value: function start() {
      var _this2 = this;

      requestAnimationFrame(function () {
        _this2.setState({
          size: _this2.getSize(),
          ripple: true
        });
      });
    }
  }, {
    key: 'onWaveStart',
    value: function onWaveStart() {
      if (this.props.onStart) {
        this.props.onStart();
      }
    }
  }, {
    key: 'onWaveStop',
    value: function onWaveStop() {
      this.setState({
        ripple: false
      });

      if (this.props.onStop) {
        this.props.onStop();
      }
    }
  }, {
    key: 'getSize',
    value: function getSize() {
      if (this.props.getSize) {
        return this.props.getSize();
      }

      var theSize = this.props.size;

      if (theSize) {
        if (typeof theSize === 'number') {
          return {
            width: theSize,
            height: theSize
          };
        }
        var width = theSize.width,
            height = theSize.height;

        return { width: width, height: height };
      }

      var parentNode = this.node.parentNode;

      if (parentNode) {
        return {
          width: parentNode.scrollWidth,
          height: parentNode.scrollHeight
        };
      }
      return { width: 0, height: 0 };
    }
  }, {
    key: 'render',
    value: function render() {
      var props = this.props;
      var rootClassName = props.rootClassName,
          waveDuration = props.waveDuration,
          theme = props.theme,
          position = props.position;

      var size = this.state.size || {};
      var width = size.width,
          height = size.height;


      var className = (0, _join2.default)(rootClassName, this.props.className, theme && rootClassName + '--theme-' + theme);

      if (this.state.ripple) {
        className = (0, _join2.default)(className, rootClassName + '--wave ');
      }

      var animationDuration = typeof waveDuration === 'number' ? waveDuration + 'ms' : waveDuration;

      var style = _extends({}, props.style, { animationDuration: animationDuration }, position);
      if (width || height) {
        var _size = Math.max(width, height);

        style.width = _size + 'px';
        style.height = _size + 'px';
      }

      var result = _react2.default.createElement('div', { style: { display: 'none' }, ref: this.ref });
      if (this.state.ripple) {
        result = _react2.default.createElement('div', _extends({
          ref: this.ref
        }, (0, _cleanProps2.default)(props, Ripple.propTypes), {
          className: className,
          style: style,
          onAnimationStart: this.onWaveStart,
          onAnimationEnd: this.onWaveStop
        }));
      }

      return result;
    }
  }]);

  return Ripple;
}(_react.Component);

var emptyFn = function emptyFn() {};

Ripple.defaultProps = {
  rootClassName: 'zippy-react-toolkit-ripple',
  onStart: emptyFn,
  onStop: emptyFn,
  onAnimationEnd: emptyFn,
  onAnimationStart: emptyFn,
  theme: 'default',
  waveDuration: 750,
  wave: false
};

Ripple.propTypes = {
  rootClassName: _propTypes2.default.string,
  theme: _propTypes2.default.string,
  onStop: _propTypes2.default.func,
  onStart: _propTypes2.default.func,
  wave: _propTypes2.default.bool,
  size: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.shape({
    width: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]),
    height: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string])
  })]),
  position: _propTypes2.default.object,
  getSize: _propTypes2.default.func,
  waveDuration: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string])
};

exports.default = Ripple;
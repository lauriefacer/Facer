'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _join = require('../../common/join');

var _join2 = _interopRequireDefault(_join);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Copyright (c) 2015-present, Zippy Technologies
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * This source code is licensed under the MIT license found in the
file in the root directory of this source tree.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */

var DEFAULT_CLASS_NAME = 'zippy-react-toolkit-load-mask__loader';
var LOADBAR_CLASSNAME = DEFAULT_CLASS_NAME + '-loadbar';

var getMeasureName = function getMeasureName(duration) {
  if (typeof duration == 'number' || duration * 1 == duration) {
    return 's';
  }

  var measure = void 0;
  duration.match(/[a-zA-Z]*$/, function (match) {
    measure = match;
  });
  return measure || 's';
};

var ZippySpinLoader = function (_React$Component) {
  _inherits(ZippySpinLoader, _React$Component);

  function ZippySpinLoader() {
    _classCallCheck(this, ZippySpinLoader);

    return _possibleConstructorReturn(this, (ZippySpinLoader.__proto__ || Object.getPrototypeOf(ZippySpinLoader)).apply(this, arguments));
  }

  _createClass(ZippySpinLoader, [{
    key: 'render',
    value: function render() {
      var props = this.props;

      var style = _extends({}, props.style, {
        width: props.size,
        height: props.size
      });

      var className = (0, _join2.default)(props.className, DEFAULT_CLASS_NAME, DEFAULT_CLASS_NAME + '--spin', props.theme && DEFAULT_CLASS_NAME + '--theme-' + props.theme);

      var animationDuration = props.animationDuration;


      var measureName = animationDuration ? getMeasureName(animationDuration) : '';

      var bars = [].concat(_toConsumableArray(Array(12))).map(function (_, i) {
        var index = i + 1;

        return _react2.default.createElement('div', {
          key: index,
          className: LOADBAR_CLASSNAME + ' ' + LOADBAR_CLASSNAME + '--' + index
        });
      });

      return _react2.default.createElement(
        'div',
        { style: style, className: className },
        bars
      );
    }
  }]);

  return ZippySpinLoader;
}(_react2.default.Component);

ZippySpinLoader.propTypes = {
  size: _propTypes2.default.number,
  theme: _propTypes2.default.string,
  animationDuration: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number])
};
ZippySpinLoader.defaultProps = { size: 40 };

exports.default = ZippySpinLoader;
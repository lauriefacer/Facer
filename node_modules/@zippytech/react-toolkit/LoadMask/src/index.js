'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _cleanProps = require('../../common/cleanProps');

var _cleanProps2 = _interopRequireDefault(_cleanProps);

var _join = require('../../common/join');

var _join2 = _interopRequireDefault(_join);

var _SvgLoader = require('./SvgLoader');

var _SvgLoader2 = _interopRequireDefault(_SvgLoader);

var _SpinLoader = require('./SpinLoader');

var _SpinLoader2 = _interopRequireDefault(_SpinLoader);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Copyright (c) 2015-present, Zippy Technologies
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * This source code is licensed under the MIT license found in the
file in the root directory of this source tree.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */

var DEFAULT_CLASS_NAME = 'zippy-react-toolkit-load-mask';

var ZippyLoadMask = function (_React$Component) {
  _inherits(ZippyLoadMask, _React$Component);

  function ZippyLoadMask() {
    _classCallCheck(this, ZippyLoadMask);

    return _possibleConstructorReturn(this, (ZippyLoadMask.__proto__ || Object.getPrototypeOf(ZippyLoadMask)).apply(this, arguments));
  }

  _createClass(ZippyLoadMask, [{
    key: 'render',
    value: function render() {
      var props = this.props;

      var visibleClassName = props.visible ? props.rootClassName + '--visible' : '';
      var className = (0, _join2.default)(props.className, props.rootClassName, visibleClassName, props.theme && props.rootClassName + '--theme-' + props.theme);
      var layerClassName = (0, _join2.default)(props.backgroundLayerClassName, props.rootClassName + '__background-layer');
      var style = _extends({}, this.props.style);
      var layerStyle = _extends({}, this.props.backgroundLayerStyle);

      if (this.props.zIndex != null) {
        style.zIndex = this.props.zIndex;
      }

      if (props.background !== true) {
        layerStyle.background = props.background === false ? 'transparent' : props.background;
      }
      if (props.backgroundOpacity != null) {
        layerStyle.opacity = props.backgroundOpacity;
      }

      var pointerEvents = this.props.pointerEvents;

      if (pointerEvents !== true) {
        style.pointerEvents = pointerEvents === false ? 'none' : pointerEvents;
      }

      var Loader = props.svgLoader ? _SvgLoader2.default : _SpinLoader2.default;

      return _react2.default.createElement(
        'div',
        _extends({}, (0, _cleanProps2.default)(props, ZippyLoadMask.propTypes), {
          className: className,
          style: style
        }),
        _react2.default.createElement('div', { style: layerStyle, className: layerClassName }),
        _react2.default.createElement(Loader, {
          size: props.size,
          theme: props.theme,
          animationDuration: props.animationDuration
        }),
        this.props.children
      );
    }
  }]);

  return ZippyLoadMask;
}(_react2.default.Component);

exports.default = ZippyLoadMask;


ZippyLoadMask.defaultProps = {
  visible: true,
  svgLoader: true,
  theme: 'default',
  zIndex: 100,
  pointerEvents: true,
  backgroundOpacity: 0.6,
  background: true,
  backgroundLayerStyle: {},
  rootClassName: DEFAULT_CLASS_NAME
};

ZippyLoadMask.propTypes = {
  animationDuration: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),
  svgLoader: _propTypes2.default.bool,
  zIndex: _propTypes2.default.number,
  visible: _propTypes2.default.bool,
  pointerEvents: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.bool]),
  backgroundOpacity: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),
  background: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.bool]),
  theme: _propTypes2.default.string,
  backgroundLayerClassName: _propTypes2.default.string,
  backgroundLayerStyle: _propTypes2.default.object,
  rootClassName: _propTypes2.default.string
};
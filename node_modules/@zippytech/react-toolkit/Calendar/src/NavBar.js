'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _reactClass = require('@zippytech/react-class');

var _reactClass2 = _interopRequireDefault(_reactClass);

var _Flex = require('../../Flex');

var _InlineBlock = require('./InlineBlock');

var _InlineBlock2 = _interopRequireDefault(_InlineBlock);

var _assign = require('../../common/assign');

var _assign2 = _interopRequireDefault(_assign);

var _join = require('../../common/join');

var _join2 = _interopRequireDefault(_join);

var _assignDefined = require('./assignDefined');

var _assignDefined2 = _interopRequireDefault(_assignDefined);

var _toMoment2 = require('./toMoment');

var _toMoment3 = _interopRequireDefault(_toMoment2);

var _MonthDecadeView = require('./MonthDecadeView');

var _MonthDecadeView2 = _interopRequireDefault(_MonthDecadeView);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Copyright (c) 2015-present, Zippy Technologies
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * This source code is licensed under the MIT license found in the
file in the root directory of this source tree.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */

var ARROWS = {
  prev: _react2.default.createElement(
    'svg',
    { height: '22', viewBox: '2 0 24 24', width: '22' },
    _react2.default.createElement('path', { d: 'M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z' }),
    _react2.default.createElement('path', { d: 'M0 0h24v24H0z', fill: 'none' })
  ),

  next: _react2.default.createElement(
    'svg',
    { height: '22', viewBox: '-2 0 24 24', width: '22' },
    _react2.default.createElement('path', { d: 'M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z' }),
    _react2.default.createElement('path', { d: 'M0 0h24v24H0z', fill: 'none' })
  ),
  right: _react2.default.createElement(
    'svg',
    { width: '13', height: '11', viewBox: '0 0 13 11' },
    _react2.default.createElement(
      'g',
      null,
      _react2.default.createElement('polygon', { points: '4.198 5.5 0 1.292 1.292 0 6.793 5.5 1.292 11 0 9.707' }),
      _react2.default.createElement('polyline', { points: '6 9.707 10.198 5.5 6 1.292 7.293 0 12.793 5.5 7.293 11 6 9.707' })
    )
  ),
  left: _react2.default.createElement(
    'svg',
    { width: '13', height: '11', viewBox: '0 0 13 11' },
    _react2.default.createElement(
      'g',
      null,
      _react2.default.createElement('polyline', { points: '6.793 9.707 2.594 5.5 6.793 1.292 5.5 0 0 5.5 5.5 11 6.793 9.707' }),
      _react2.default.createElement('polyline', { points: '12.793 9.707 8.594 5.5 12.793 1.292 11.5 0 6 5.5 11.5 11 12.793 9.707' })
    )
  )
};

var NavBar = function (_Component) {
  _inherits(NavBar, _Component);

  function NavBar(props) {
    _classCallCheck(this, NavBar);

    var _this = _possibleConstructorReturn(this, (NavBar.__proto__ || Object.getPrototypeOf(NavBar)).call(this, props));

    _this.state = {
      viewDate: props.defaultViewDate
    };
    return _this;
  }

  _createClass(NavBar, [{
    key: 'prepareViewDate',
    value: function prepareViewDate(props) {
      return props.viewDate === undefined ? this.state.viewDate : props.viewDate;
    }
  }, {
    key: 'render',
    value: function render() {
      var props = this.p = (0, _assign2.default)({}, this.props);
      var rootClassName = props.rootClassName,
          index = props.index;

      var viewMoment = props.viewMoment = props.viewMoment || this.toMoment(this.prepareViewDate(props));
      props.monthDecadeViewEnabled = props.expandedMonthDecadeView || props.enableMonthDecadeView;
      var secondary = props.secondary;
      var className = (0, _join2.default)(props.className, rootClassName, rootClassName + '--theme-' + props.theme, rootClassName + '--with-month-decade-view');

      var monthDecadeView = props.monthDecadeViewEnabled ? this.renderMonthDecadeView() : null;

      var flexProps = (0, _assign2.default)({}, props);

      delete flexProps.rootClassName;
      delete flexProps.arrows;
      delete flexProps.doubleArrows;
      delete flexProps.date;
      delete flexProps.enableMonthDecadeView;
      delete flexProps.monthDecadeViewEnabled;
      delete flexProps.isDatePickerNavBar;
      delete flexProps.minDate;
      delete flexProps.maxDate;
      delete flexProps.mainNavBar;
      delete flexProps.multiView;
      delete flexProps.navDateFormat;
      delete flexProps.onNavClick;
      delete flexProps.onUpdate;
      delete flexProps.onViewDateChange;
      delete flexProps.renderNavNext;
      delete flexProps.renderNavPrev;
      delete flexProps.secondary;
      delete flexProps.theme;
      delete flexProps.viewDate;
      delete flexProps.viewMoment;
      delete flexProps.showClock;
      delete flexProps.enableMonthDecadeViewAnimation;
      delete flexProps.showMonthDecadeViewAnimation;

      if (typeof props.cleanup == 'function') {
        props.cleanup(flexProps);
      }

      return _react2.default.createElement(
        _Flex.Flex,
        _extends({ key: 'navBar', inline: true, row: true }, flexProps, { className: className }),
        secondary && this.renderNav(-2, viewMoment, 'left'),
        this.renderNav(-1, viewMoment, 'prev'),
        _react2.default.createElement(
          _Flex.Item,
          {
            key: 'month_year',
            className: (0, _join2.default)(rootClassName + '-date', props.monthDecadeViewEnabled ? '' : rootClassName + '-date-disabled'),
            style: { textAlign: 'center' },
            onMouseDown: props.monthDecadeViewEnabled ? this.toggleMonthDecadeView : null
          },
          this.renderNavDate(viewMoment)
        ),
        this.renderNav(1, viewMoment, 'next'),
        secondary && this.renderNav(2, viewMoment, 'right'),
        monthDecadeView
      );
    }
  }, {
    key: 'renderMonthDecadeView',
    value: function renderMonthDecadeView() {
      var _this2 = this;

      if (!this.state.monthDecadeView) {
        return null;
      }
      var _p = this.p,
          viewMoment = _p.viewMoment,
          theme = _p.theme,
          locale = _p.locale,
          minDate = _p.minDate,
          maxDate = _p.maxDate,
          rootClassName = _p.rootClassName,
          size = _p.size,
          okButtonText = _p.okButtonText,
          cancelButtonText = _p.cancelButtonText,
          showClock = _p.showClock,
          enableMonthDecadeViewAnimation = _p.enableMonthDecadeViewAnimation,
          showMonthDecadeViewAnimation = _p.showMonthDecadeViewAnimation;

      var className = (0, _join2.default)(rootClassName + '-month-decade-view', (size <= 1 || size === undefined) && rootClassName + '-month-decade-view-month', showClock && rootClassName + '-month-decade-view-calendar');

      var modalClassName = (0, _join2.default)(rootClassName + '-month-decade-view-modal', enableMonthDecadeViewAnimation && rootClassName + '-month-decade-view-show-animation');
      var modalWrapperClassName = size || size === undefined ? modalClassName : null;

      var monthDecadeViewProps = (0, _assignDefined2.default)({
        defaultViewDate: viewMoment,
        defaultDate: viewMoment,

        ref: function ref(view) {
          _this2.monthDecadeView = view;
        },
        focusDecadeView: false,

        className: className,
        theme: theme,

        okButtonText: okButtonText,
        cancelButtonText: cancelButtonText,
        onOkClick: this.onMonthDecadeViewOk,
        onCancelClick: this.onMonthDecadeViewCancel
      }, {
        minDate: minDate,
        maxDate: maxDate,
        locale: locale
      });

      if (this.props.renderMonthDecadeView) {
        return this.props.renderMonthDecadeView(monthDecadeViewProps);
      }

      return _react2.default.createElement(
        'div',
        {
          style: { animationDuration: showMonthDecadeViewAnimation + 'ms' },
          className: modalWrapperClassName
        },
        _react2.default.createElement(_MonthDecadeView2.default, monthDecadeViewProps)
      );
    }
  }, {
    key: 'toggleMonthDecadeView',
    value: function toggleMonthDecadeView(event) {
      if (this.isMonthDecadeViewVisible()) {
        this.hideMonthDecadeView(event);
      } else {
        this.showMonthDecadeView(event);
      }
    }
  }, {
    key: 'getMonthDecadeViewView',
    value: function getMonthDecadeViewView() {
      return this.monthDecadeView;
    }
  }, {
    key: 'isMonthDecadeViewVisible',
    value: function isMonthDecadeViewVisible() {
      return !!this.monthDecadeView;
    }
  }, {
    key: 'onMonthDecadeViewOk',
    value: function onMonthDecadeViewOk(dateString, _ref) {
      var dateMoment = _ref.dateMoment,
          timestamp = _ref.timestamp;

      this.hideMonthDecadeView();
      this.onViewDateChange({ dateMoment: dateMoment, timestamp: timestamp });
    }
  }, {
    key: 'onMonthDecadeViewCancel',
    value: function onMonthDecadeViewCancel() {
      this.hideMonthDecadeView();
    }
  }, {
    key: 'showMonthDecadeView',
    value: function showMonthDecadeView(event) {
      event.preventDefault();

      this.setState({
        monthDecadeView: true
      });

      if (this.props.onShowMonthDecadeView) {
        this.props.onShowMonthDecadeView();
      }
    }
  }, {
    key: 'hideMonthDecadeView',
    value: function hideMonthDecadeView(event) {
      if (event && event.preventDefault) {
        event.preventDefault();
      }

      this.setState({
        monthDecadeView: false
      });

      if (this.props.onHideMonthDecadeView) {
        this.props.onHideMonthDecadeView();
      }
    }
  }, {
    key: 'toMoment',
    value: function toMoment(value, props) {
      props = props || this.props;

      return (0, _toMoment3.default)(value, {
        locale: props.locale,
        dateFormat: props.dateFormat
      });
    }
  }, {
    key: 'renderNav',
    value: function renderNav(dir, viewMoment, name) {
      var props = this.p;

      var disabled = dir < 0 ? props.prevDisabled : props.nextDisabled;
      var secondary = Math.abs(dir) == 2;

      if (dir < 0 && props.minDate) {
        var gotoMoment = this.getGotoMoment(dir, viewMoment).endOf('month');

        if (gotoMoment.isBefore(this.toMoment(props.minDate))) {
          disabled = true;
        }
      }

      if (dir > 0 && props.maxDate) {
        var _gotoMoment = this.getGotoMoment(dir, viewMoment).startOf('month');

        if (_gotoMoment.isAfter(this.toMoment(props.maxDate))) {
          disabled = true;
        }
      }

      if (this.state.monthDecadeView) {
        disabled = true;
      }

      var rootClassName = props.rootClassName;

      var className = (0, _join2.default)(rootClassName + '-arrow', rootClassName + '-arrow--' + name, secondary && rootClassName + '-secondary-arrow', disabled && rootClassName + '-arrow--disabled');

      var arrowClass = rootClassName + '-arrows-pos';
      var arrowDivClass = rootClassName + '-arrows-div';

      var arrow = props.arrows[dir] || props.arrows[name] || ARROWS[name];

      var children = void 0;

      var dirArrow = props.arrows[dir];

      if (dirArrow) {
        children = dirArrow;
      } else {
        var doubleArrows = dir < -1 ? arrow : dir > 1 ? arrow : null;
        children = dir < 0 ? _react2.default.createElement(
          'div',
          { className: arrowDivClass },
          secondary ? _react2.default.createElement(
            'div',
            { className: arrowClass },
            doubleArrows
          ) : _react2.default.createElement(
            'div',
            { className: arrowClass },
            arrow
          )
        ) : _react2.default.createElement(
          'div',
          { className: arrowDivClass },
          secondary ? _react2.default.createElement(
            'div',
            { className: arrowClass },
            doubleArrows
          ) : _react2.default.createElement(
            'div',
            { className: arrowClass },
            arrow
          )
        );
      }

      var navProps = {
        dir: dir,
        name: name,
        disabled: disabled,
        onClick: !disabled ? this.onNavClick.bind(this, dir, viewMoment) : null,
        className: className,
        children: children
      };

      if (props.renderNav) {
        return props.renderNav(navProps);
      }

      if (dir < 0 && props.renderNavPrev) {
        return props.renderNavPrev(navProps);
      }

      if (dir > 0 && props.renderNavNext) {
        return props.renderNavNext(navProps);
      }

      return _react2.default.createElement(_InlineBlock2.default, _extends({ key: name }, navProps, { disabled: null, name: null }));
    }
  }, {
    key: 'getGotoMoment',
    value: function getGotoMoment(dir, viewMoment) {
      viewMoment = viewMoment || this.p.viewMoment;

      var sign = dir < 0 ? -1 : 1;
      var abs = Math.abs(dir);

      var mom = this.toMoment(viewMoment);

      mom.add(sign, abs == 1 ? 'month' : 'year');

      return mom;
    }
  }, {
    key: 'onNavClick',
    value: function onNavClick(dir, viewMoment, event) {
      var props = this.props;

      var dateMoment = this.toMoment(viewMoment);

      if (props.onUpdate) {
        dateMoment = props.onUpdate(dateMoment, dir);
      } else {
        var sign = dir < 0 ? -1 : 1;
        var abs = Math.abs(dir);

        dateMoment.add(sign, abs == 1 ? 'month' : 'year');
      }

      var timestamp = +dateMoment;

      props.onNavClick(dir, viewMoment, event);

      var disabled = dir < 0 ? props.prevDisabled : props.nextDisabled;

      if (disabled) {
        return;
      }

      this.onViewDateChange({
        dateMoment: dateMoment,
        timestamp: timestamp
      });
    }
  }, {
    key: 'renderNavDate',
    value: function renderNavDate(viewMoment) {
      var props = this.props;
      var text = viewMoment.format(props.navDateFormat);

      if (props.renderNavDate) {
        return props.renderNavDate(viewMoment, text);
      }

      return text;
    }
  }, {
    key: 'onViewDateChange',
    value: function onViewDateChange(_ref2) {
      var dateMoment = _ref2.dateMoment,
          timestamp = _ref2.timestamp;

      if (this.props.viewDate === undefined) {
        this.setState({
          viewDate: timestamp
        });
      }

      if (this.props.onViewDateChange) {
        var dateString = dateMoment.format(this.props.dateFormat);
        this.props.onViewDateChange(dateString, {
          dateString: dateString,
          dateMoment: dateMoment,
          timestamp: timestamp
        });
      }
    }
  }]);

  return NavBar;
}(_reactClass2.default);

exports.default = NavBar;


NavBar.defaultProps = {
  rootClassName: 'zippy-react-toolkit-calendar__nav-bar',
  arrows: {},
  doubleArrows: {},
  theme: 'default',
  isDatePickerNavBar: true,
  navDateFormat: 'MMM YYYY',
  enableMonthDecadeView: true,
  onNavClick: function onNavClick(dir, viewMoment) {},
  onViewDateChange: function onViewDateChange() {}
};

NavBar.propTypes = {
  rootClassName: _propTypes2.default.string,
  secondary: _propTypes2.default.bool,
  showClock: _propTypes2.default.bool,
  enableMonthDecadeViewAnimation: _propTypes2.default.bool,
  showMonthDecadeViewAnimation: _propTypes2.default.number,

  renderNav: _propTypes2.default.func,
  renderNavPrev: _propTypes2.default.func,
  renderNavNext: _propTypes2.default.func,

  arrows: _propTypes2.default.object,
  doubleArrows: _propTypes2.default.object,
  navDateFormat: _propTypes2.default.string,

  onUpdate: _propTypes2.default.func,
  onNavClick: _propTypes2.default.func,
  onViewDateChange: _propTypes2.default.func,
  onClick: _propTypes2.default.any
};
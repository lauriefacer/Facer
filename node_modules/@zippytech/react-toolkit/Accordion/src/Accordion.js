'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CLASS_NAME = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _autoBind = require('@zippytech/react-class/autoBind');

var _autoBind2 = _interopRequireDefault(_autoBind);

var _NotifyResize = require('../../NotifyResize');

var _join = require('./join');

var _join2 = _interopRequireDefault(_join);

var _clamp = require('./utils/clamp');

var _clamp2 = _interopRequireDefault(_clamp);

var _arrayRemove = require('./utils/array-remove');

var _arrayRemove2 = _interopRequireDefault(_arrayRemove);

var _cleanProps = require('../../common/cleanProps');

var _cleanProps2 = _interopRequireDefault(_cleanProps);

var _shouldComponentUpdate2 = require('./shouldComponentUpdate');

var _shouldComponentUpdate3 = _interopRequireDefault(_shouldComponentUpdate2);

var _raf = require('../../common/raf');

var _raf2 = _interopRequireDefault(_raf);

var _AccordionTabContent = require('./AccordionTabContent');

var _AccordionTabContent2 = _interopRequireDefault(_AccordionTabContent);

var _AccordionTabTitle = require('./AccordionTabTitle');

var _AccordionTabTitle2 = _interopRequireDefault(_AccordionTabTitle);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Copyright (c) 2015-present, Zippy Technologies
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * This source code is licensed under the MIT license found in the
file in the root directory of this source tree.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */

var CLASS_NAME = exports.CLASS_NAME = 'zippy-react-toolkit-accordion';

var isTabDisabled = function isTabDisabled(node) {
  if (!node.props) {
    return false;
  }
  return node.props.disabled || node.props.tabProps && node.props.tabProps.disabled;
};
var isTabLocked = function isTabLocked(node) {
  return node && node.props && node.props.tabProps && node.props.tabProps.locked;
};
var isTabValid = function isTabValid(node) {
  return !isTabDisabled(node) && !isTabLocked(node);
};

var KEYS = {
  ENTER: 'Enter',
  LEFT_ARROW: 'ArrowLeft',
  UP_ARROW: 'ArrowUp',
  RIGHT_ARROW: 'ArrowRight',
  DOWN_ARROW: 'ArrowDown',
  END: 'End',
  HOME: 'Home'
};

var KEYS_VERTICAL = {
  TOGGLE: KEYS.ENTER,
  COLLAPSE: KEYS.LEFT_ARROW,
  EXPAND: KEYS.RIGHT_ARROW,
  FIRST_TAB: KEYS.HOME,
  LAST_TAB: KEYS.END,
  NEXT_TAB: KEYS.DOWN_ARROW,
  PREV_TAB: KEYS.UP_ARROW
};

var KEYS_HORIZONTAL = {
  TOGGLE: KEYS.ENTER,
  PREV_TAB: KEYS.LEFT_ARROW,
  NEXT_TAB: KEYS.RIGHT_ARROW,
  FIRST_TAB: KEYS.HOME,
  LAST_TAB: KEYS.END,
  EXPAND: KEYS.DOWN_ARROW,
  COLLAPSE: KEYS.UP_ARROW
};

var ZippyAccordion = function (_Component) {
  _inherits(ZippyAccordion, _Component);

  function ZippyAccordion(props) {
    _classCallCheck(this, ZippyAccordion);

    var _this = _possibleConstructorReturn(this, (ZippyAccordion.__proto__ || Object.getPrototypeOf(ZippyAccordion)).call(this, props));

    (0, _autoBind2.default)(_this);
    _this.state = {
      activeTabs: _this.getActiveTabs(props)
    };

    if (props.expandOnToolOnly && props.expandTool === null) {
      console.warn('expandTool not found but expandOnToolOnly provided.');
    }

    _this._assignToggleHandler();
    return _this;
  }

  _createClass(ZippyAccordion, [{
    key: 'getExpandToolPosition',
    value: function getExpandToolPosition(props) {
      var _ref = props || this.props,
          expandToolPosition = _ref.expandToolPosition;

      if (!expandToolPosition) {
        expandToolPosition = 'end';
      }
      return expandToolPosition;
    }
  }, {
    key: 'isExpandOnToolOnly',
    value: function isExpandOnToolOnly(props) {
      var _ref2 = props || this.props,
          expandOnToolOnly = _ref2.expandOnToolOnly,
          expandTool = _ref2.expandTool;

      return expandTool !== null ? expandOnToolOnly : false;
    }
  }, {
    key: 'getActiveTabs',
    value: function getActiveTabs() {
      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props;
      var state = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.state || {};
      var activeIndex = props.activeIndex,
          defaultActiveIndex = props.defaultActiveIndex,
          multiExpand = props.multiExpand;

      var computedActiveTabs = void 0;
      var maxActiveIndex = props.children.length - 1;

      if (activeIndex || activeIndex === 0) {
        computedActiveTabs = (0, _clamp2.default)(activeIndex, 0, maxActiveIndex);
      } else if (state.activeTabs || state.activeTabs === 0) {
        computedActiveTabs = state.activeTabs;
      } else if (defaultActiveIndex || defaultActiveIndex === 0) {
        computedActiveTabs = (0, _clamp2.default)(defaultActiveIndex, 0, maxActiveIndex);
      } else {
        computedActiveTabs = [];
      }

      if (!Array.isArray(computedActiveTabs)) {
        computedActiveTabs = [computedActiveTabs || 0];
      }

      if (computedActiveTabs.length > 1 && !multiExpand) {
        computedActiveTabs = [computedActiveTabs[0]];
      }

      return this._pickValidActiveIndex(computedActiveTabs);
    }
  }, {
    key: 'shouldComponentUpdate',
    value: function shouldComponentUpdate(nextProps, nextState) {
      return (0, _shouldComponentUpdate3.default)(this, nextProps, nextState);
    }
  }, {
    key: '_getExpandableTabIndexes',
    value: function _getExpandableTabIndexes(props) {
      return _react.Children.toArray((props || this.props).children).reduce(function (indexes, child, index) {
        if (!isTabDisabled(child)) {
          indexes.push(index);
        }
        return indexes;
      }, []);
    }
  }, {
    key: '_pickValidActiveIndex',
    value: function _pickValidActiveIndex(activeIndex) {
      var children = _react.Children.toArray(this.props.children);
      return activeIndex.filter(function (index) {
        return !isTabDisabled(children[index]);
      });
    }
  }, {
    key: '_isActiveTab',
    value: function _isActiveTab(idx) {
      return this.getActiveTabs().indexOf(idx) >= 0;
    }
  }, {
    key: '_assignToggleHandler',
    value: function _assignToggleHandler(newProps) {
      var _ref3 = newProps || this.props,
          multiExpand = _ref3.multiExpand,
          horizontal = _ref3.horizontal;

      if (this._isControlledComponent()) {
        this.onToggleHandler = this._onControlledAction;
      } else {
        this.onToggleHandler = this._onSingleExpandToggle;
        if (multiExpand) {
          this.onToggleHandler = this._onMultiExpandToggle;
        } else if (horizontal) {
          this.onToggleHandler = this._onSingleExpandToggleHorizontal;
        }
      }
    }
  }, {
    key: '_isActionableTab',
    value: function _isActionableTab(idx) {
      return !this._transitioning && this.tabTitles[idx].isActionable();
    }
  }, {
    key: '_isControlledComponent',
    value: function _isControlledComponent() {
      var activeIndex = this.props.activeIndex;

      return activeIndex === 0 || activeIndex;
    }
  }, {
    key: '_onControlledAction',
    value: function _onControlledAction(idx) {
      if (!this._isActionableTab(idx)) {
        return;
      }

      var _props = this.props,
          multiExpand = _props.multiExpand,
          onActivate = _props.onActivate;

      if (multiExpand) {
        onActivate && onActivate(this._getNextExpandedTabs(idx));
      } else {
        onActivate && onActivate(idx);
      }
    }
  }, {
    key: '_getNextExpandedTabs',
    value: function _getNextExpandedTabs(idx) {
      var isActive = this._isActiveTab(idx);
      var activeTabs = this.getActiveTabs();

      if (isActive) {
        return (0, _arrayRemove2.default)(activeTabs, idx);
      } else {
        return [].concat(_toConsumableArray(activeTabs), [idx]);
      }
    }
  }, {
    key: '_onMultiExpandToggle',
    value: function _onMultiExpandToggle(idx) {
      if (!this._isActionableTab(idx)) {
        return;
      }

      var onActivate = this.props.onActivate;

      var newActiveTabs = this._getNextExpandedTabs(idx);

      this.setStateInAnimationFrame({
        activeTabs: newActiveTabs,
        focusedTabIndex: idx,
        focused: true,
        expandedHeight: null,
        expandedWidth: null
      }, function () {
        onActivate && onActivate([].concat(_toConsumableArray(newActiveTabs)));
      });
    }
  }, {
    key: '_onSingleExpandToggle',
    value: function _onSingleExpandToggle(idx) {
      if (!this._isActionableTab(idx)) {
        return;
      }

      var onActivate = this.props.onActivate;

      this.setStateInAnimationFrame({
        activeTabs: this._isActiveTab(idx) ? [] : [idx],
        focusedTabIndex: idx,
        focused: true,
        expandedHeight: this.getAvailableTabHeight()
      }, function () {
        onActivate && onActivate(idx);
      });
    }
  }, {
    key: '_onSingleExpandToggleHorizontal',
    value: function _onSingleExpandToggleHorizontal(idx) {
      if (!this._isActionableTab(idx)) {
        return;
      }
      var onActivate = this.props.onActivate;

      this.setStateInAnimationFrame({
        activeTabs: this._isActiveTab(idx) ? [] : [idx],
        focusedTabIndex: idx,
        focused: true,
        expandedWidth: this.getAvailableTabWidth()
      }, function () {
        onActivate && onActivate(idx);
      });
    }
  }, {
    key: 'getAvailableTabHeight',
    value: function getAvailableTabHeight(activeTabs) {
      activeTabs = activeTabs || this.getActiveTabs();
      var height = null;

      if (activeTabs.length) {
        height = this.tabContainers[activeTabs[0]].getHeight();
      } else {
        height = this.refs.tabContentFiller ? this.refs.tabContentFiller.offsetHeight : 0;
      }

      return height;
    }
  }, {
    key: 'getAvailableTabWidth',
    value: function getAvailableTabWidth(activeTabs) {
      activeTabs = activeTabs || this.getActiveTabs();
      var width = null;

      if (activeTabs.length) {
        width = this.tabContainers[activeTabs[0]].getWidth();
      } else {
        width = this.refs.tabContentFiller.offsetWidth;
      }

      return width;
    }
  }, {
    key: 'setStateInAnimationFrame',
    value: function setStateInAnimationFrame(nextState, cb) {
      var _this2 = this;

      var raf = this.props.raf;

      if (this.props.transition) {
        raf(function () {
          _this2.setState(nextState, cb);
        });
      } else {
        this.setState(nextState, cb);
      }
    }
  }, {
    key: 'collapseAt',
    value: function collapseAt(idx) {
      var _props2 = this.props,
          collapsible = _props2.collapsible,
          multiExpand = _props2.multiExpand,
          activeIndex = _props2.activeIndex;

      var activeTabs = this.getActiveTabs();

      // activeIndex can be undefined or a number.
      if (activeIndex === 0 || activeIndex) {
        return;
      }

      if (this._isActiveTab(idx)) {
        if (collapsible || activeTabs.length > 1) {
          this.onToggleHandler(idx);
        }
      }
    }
  }, {
    key: 'collapseAll',
    value: function collapseAll() {
      var nextActiveTabs = void 0;
      var _props3 = this.props,
          collapsible = _props3.collapsible,
          onActivate = _props3.onActivate,
          multiExpand = _props3.multiExpand,
          activeIndex = _props3.activeIndex;

      var activeTabs = this.getActiveTabs();

      if (activeTabs.length === 0 || activeIndex === 0 || activeIndex) {
        return;
      }

      if (multiExpand) {
        if (collapsible) {
          nextActiveTabs = [];
          this.setStateInAnimationFrame({
            activeTabs: nextActiveTabs
          });
        } else {
          nextActiveTabs = [activeTabs[activeTabs.length - 1]];
          this.setStateInAnimationFrame({
            activeTabs: nextActiveTabs
          });
        }
      }

      if (nextActiveTabs && onActivate) {
        onActivate(nextActiveTabs);
      }
    }
  }, {
    key: 'expandAt',
    value: function expandAt(idx) {
      if (!this._isActiveTab(idx)) {
        this.onToggleHandler(idx);
      }
    }
  }, {
    key: 'expandAll',
    value: function expandAll() {
      var nextActiveTabs = void 0;
      var _props4 = this.props,
          onActivate = _props4.onActivate,
          multiExpand = _props4.multiExpand,
          horizontal = _props4.horizontal,
          activeIndex = _props4.activeIndex;

      if (activeIndex === 0 || activeIndex) {
        return;
      }
      var availableTabs = this._getExpandableTabIndexes();
      if (multiExpand) {
        nextActiveTabs = availableTabs;
        this.setStateInAnimationFrame({
          activeTabs: nextActiveTabs
        });
      } else {
        if (this.state.activeTabs.length === 0) {
          var firstNonDisabledIndex = availableTabs[0];
          nextActiveTabs = firstNonDisabledIndex ? [firstNonDisabledIndex] : [];
          this.setStateInAnimationFrame({
            activeTabs: nextActiveTabs
          });
        }
      }

      if (nextActiveTabs && onActivate) {
        onActivate(nextActiveTabs);
      }
    }
  }, {
    key: 'onResize',
    value: function onResize(params) {
      this.tabTitles.forEach(function (title) {
        title.onResize();
      });
    }
  }, {
    key: 'onInteractionBeforeFocus',
    value: function onInteractionBeforeFocus(ev) {
      //   aniamtion optimisation. Prevent focus from triggering another redner
      this._interactionBeforeFocus = true;
    }
  }, {
    key: 'onFocus',
    value: function onFocus(ev) {
      if (this._interactionBeforeFocus) {
        this._interactionBeforeFocus = false;
        return;
      }

      var focusedTabIndex = this.state.focusedTabIndex;

      if (!focusedTabIndex) {
        focusedTabIndex = 0;
      }

      this.setStateInAnimationFrame({ focused: true, focusedTabIndex: focusedTabIndex });
    }
  }, {
    key: 'onBlur',
    value: function onBlur(ev) {
      this.setStateInAnimationFrame({ focused: false, focusedTabIndex: null });
    }
  }, {
    key: 'onKeyDown',
    value: function onKeyDown(ev) {
      if (!this.state.focused) {
        return;
      }
      var _props5 = this.props,
          horizontal = _props5.horizontal,
          activateOnFocus = _props5.activateOnFocus;
      var _state = this.state,
          focusedTabIndex = _state.focusedTabIndex,
          activeTabs = _state.activeTabs;

      var MAPPING = horizontal ? KEYS_HORIZONTAL : KEYS_VERTICAL;
      var targetFocusedTab = null;

      switch (ev.key) {
        case MAPPING.TOGGLE:
          if (this._isActiveTab(focusedTabIndex)) {
            this.collapseAt(focusedTabIndex);
          } else {
            this.expandAt(focusedTabIndex);
          }
          targetFocusedTab = focusedTabIndex;
          break;
        case MAPPING.EXPAND:
          this.expandAt(focusedTabIndex);
          targetFocusedTab = focusedTabIndex;
          break;
        case MAPPING.COLLAPSE:
          this.collapseAt(focusedTabIndex);
          targetFocusedTab = focusedTabIndex;
          break;
        case MAPPING.NEXT_TAB:
          targetFocusedTab = -1;
          if (focusedTabIndex < _react.Children.toArray(this.props.children).length - 1) {
            targetFocusedTab = focusedTabIndex + 1;
            this.setStateInAnimationFrame({
              focusedTabIndex: targetFocusedTab
            });
          }
          if (activateOnFocus && targetFocusedTab >= 0) {
            this.expandAt(targetFocusedTab);
          }
          break;
        case MAPPING.PREV_TAB:
          targetFocusedTab = -1;
          if (focusedTabIndex > 0) {
            targetFocusedTab = focusedTabIndex - 1;
            this.setStateInAnimationFrame({
              focusedTabIndex: targetFocusedTab
            });
          }
          if (activateOnFocus && targetFocusedTab >= 0) {
            this.expandAt(targetFocusedTab);
          }
          break;
        case MAPPING.FIRST_TAB:
          this.setStateInAnimationFrame({
            focusedTabIndex: 0
          });
          targetFocusedTab = 0;
          break;
        case MAPPING.LAST_TAB:
          targetFocusedTab = _react.Children.toArray(this.props.children).length - 1;
          this.setStateInAnimationFrame({
            focusedTabIndex: targetFocusedTab
          });
          break;
      }

      if (targetFocusedTab !== null) {
        this.props.scrollIntoViewOnFocus && targetFocusedTab >= 0 && this.scrollTabTitleIntoView(targetFocusedTab);
        ev.stopPropagation && ev.stopPropagation();
        ev.preventDefault && ev.preventDefault();
      }
    }
  }, {
    key: 'scrollTabTitleIntoView',
    value: function scrollTabTitleIntoView(idx) {
      var itemNode = this.tabTitles[idx].refs.tabTitleContainer;
      var accordionNode = this.refs.accordionNode;

      var itemHeight = itemNode.offsetHeight;
      var itemWidth = itemNode.offsetWidth;
      var itemOffsetTop = itemNode.offsetTop;
      var itemOffsetLeft = itemNode.offsetLeft;
      var scrollTop = accordionNode.scrollTop;
      var scrollLeft = accordionNode.scrollLeft;
      var containerHeight = accordionNode.offsetHeight;
      var containerWidth = accordionNode.offsetWidth;

      // at the top and have to scroll to itemOffsetTop
      if (scrollTop > itemOffsetTop || scrollLeft > itemOffsetLeft) {
        accordionNode.scrollTop = itemOffsetTop;
        accordionNode.scrollLeft = itemOffsetLeft;
      }

      // at the bottom, have to scroll more
      if (scrollTop + containerHeight < itemHeight + itemOffsetTop || scrollLeft + containerWidth < itemWidth + itemOffsetLeft) {
        accordionNode.scrollTop = itemOffsetTop + itemHeight - containerHeight;
        accordionNode.scrollLeft = itemOffsetLeft + itemWidth - containerWidth;
      }
    }

    // fix for scrollbars being added to accordion content in multiEpxand horizontal

  }, {
    key: '_transitionEndScrollCheck',
    value: function _transitionEndScrollCheck() {
      var _props6 = this.props,
          horizontal = _props6.horizontal,
          multiExpand = _props6.multiExpand;

      if (horizontal && multiExpand) {
        var _refs$accordionNode = this.refs.accordionNode,
            offsetHeight = _refs$accordionNode.offsetHeight,
            scrollHeight = _refs$accordionNode.scrollHeight;

        if (!this._scrollHeight) {
          this._scrollHeight = scrollHeight;
          this.onResize();
        }

        if (this._scrollHeight !== scrollHeight || offsetHeight !== scrollHeight) {
          this.onResize();
        }
      }
    }
  }, {
    key: 'onContentCollapsed',
    value: function onContentCollapsed(idx, onTabCollapse) {
      var onCollapse = this.props.onCollapse;

      this._transitioning = false;
      onTabCollapse && onTabCollapse(idx);
      onCollapse && onCollapse(idx);
      this._transitionEndScrollCheck();
    }
  }, {
    key: 'onContentExpanded',
    value: function onContentExpanded(idx, onTabExpand) {
      var onExpand = this.props.onExpand;

      this._transitioning = false;
      onTabExpand && onTabExpand(idx);
      onExpand && onExpand(idx);
      this._transitionEndScrollCheck();
    }
  }, {
    key: 'getClassNames',
    value: function getClassNames() {
      var _props7 = this.props,
          className = _props7.className,
          rootClassName = _props7.rootClassName,
          horizontal = _props7.horizontal,
          theme = _props7.theme,
          collapsible = _props7.collapsible,
          multiExpand = _props7.multiExpand,
          enableKeyboardNavigation = _props7.enableKeyboardNavigation,
          rtl = _props7.rtl;


      var expandToolPosition = this.getExpandToolPosition();

      var focused = this.state.focused;


      var activeTabs = this.getActiveTabs();

      return (0, _join2.default)(className, rootClassName, rootClassName + '--theme-' + theme, rootClassName + '--expand-tool-' + expandToolPosition, horizontal ? rootClassName + '--horizontal' : rootClassName + '--vertical', collapsible && activeTabs.length && rootClassName + '--expanded', focused && rootClassName + '--focused', rtl && rootClassName + '--rtl', multiExpand ? rootClassName + '--multi-expand' : rootClassName + '--single-expand');
    }
  }, {
    key: '_getTitleDetailsParams',
    value: function _getTitleDetailsParams(activeTabs) {
      var _props8 = this.props,
          activateEvent = _props8.activateEvent,
          renderTabTitle = _props8.renderTabTitle,
          tabTitleAlign = _props8.tabTitleAlign,
          tabTitleVerticalAlign = _props8.tabTitleVerticalAlign,
          tabTitleStyle = _props8.tabTitleStyle,
          titleStyle = _props8.titleStyle,
          tabTitleEllipsis = _props8.tabTitleEllipsis,
          tabTitleRotate = _props8.tabTitleRotate,
          expandTool = _props8.expandTool,
          enableKeyboardNavigation = _props8.enableKeyboardNavigation,
          rtl = _props8.rtl,
          raf = _props8.raf,
          horizontal = _props8.horizontal,
          locked = _props8.locked,
          transition = _props8.transition,
          transitionDuration = _props8.transitionDuration,
          transitionFunction = _props8.transitionFunction;


      activeTabs = activeTabs || this.getActiveTabs();

      var computedTitleProps = {
        expandOnToolOnly: this.isExpandOnToolOnly(),
        titleStyle: titleStyle,
        tabTitleStyle: tabTitleStyle,
        tabTitleAlign: tabTitleAlign,
        tabTitleVerticalAlign: tabTitleVerticalAlign,
        tabTitleEllipsis: tabTitleEllipsis,
        renderTabTitle: renderTabTitle,
        activeTabs: activeTabs,
        activateEvent: activateEvent,
        enableKeyboardNavigation: enableKeyboardNavigation,
        rtl: rtl,
        raf: raf,
        tabTitleRotate: tabTitleRotate,
        expandTool: expandTool,
        transition: transition,
        transitionDuration: transitionDuration,
        transitionFunction: transitionFunction,
        orientation: horizontal ? 'horizontal' : 'vertical',
        locked: locked
      };

      return computedTitleProps;
    }
  }, {
    key: 'renderTabTitle',
    value: function renderTabTitle(_ref4) {
      var _this3 = this;

      var idx = _ref4.idx,
          tabTitleProps = _ref4.tabTitleProps,
          DOMProps = _ref4.DOMProps;
      var _props9 = this.props,
          expandToolPosition = _props9.expandToolPosition,
          rtl = _props9.rtl;
      var activeTabs = tabTitleProps.activeTabs,
          expanded = tabTitleProps.expanded,
          locked = tabTitleProps.locked,
          multiExpand = tabTitleProps.multiExpand,
          collapsible = tabTitleProps.collapsible,
          tabProps = tabTitleProps.tabProps,
          tabTitleAlign = tabTitleProps.tabTitleAlign,
          instanceProps = tabTitleProps.instanceProps;


      if (expanded && activeTabs.length === 1 && !collapsible) {
        tabTitleProps.locked = expanded;
      }

      return _react2.default.createElement(_AccordionTabTitle2.default, _extends({
        expandToolPosition: expandToolPosition,
        rtl: rtl,
        onToggle: function onToggle(ev) {
          _this3.onToggleHandler(idx);
        },
        ref: function ref(el) {
          el && _this3.tabTitles.push(el);
        }
      }, tabTitleProps));
    }
  }, {
    key: '_getContentDetailsParams',
    value: function _getContentDetailsParams() {
      var _props10 = this.props,
          transition = _props10.transition,
          transitionDuration = _props10.transitionDuration,
          transitionFunction = _props10.transitionFunction,
          enableKeyboardNavigation = _props10.enableKeyboardNavigation,
          tabStyle = _props10.tabStyle,
          tabClassName = _props10.tabClassName,
          horizontal = _props10.horizontal,
          raf = _props10.raf;
      var _state2 = this.state,
          expandedHeight = _state2.expandedHeight,
          expandedWidth = _state2.expandedWidth;


      var computedContentProps = {
        transition: transition,
        transitionDuration: transitionDuration,
        transitionFunction: transitionFunction,
        enableKeyboardNavigation: enableKeyboardNavigation,
        expandedHeight: expandedHeight,
        expandedWidth: expandedWidth,
        raf: raf,
        orientation: horizontal ? 'horizontal' : 'vertical',
        wrapperStyle: tabStyle,
        wrapperClassName: tabClassName
      };

      return computedContentProps;
    }
  }, {
    key: 'renderTabContent',
    value: function renderTabContent(_ref5) {
      var _this4 = this;

      var idx = _ref5.idx,
          child = _ref5.child,
          tabContentProps = _ref5.tabContentProps,
          DOMProps = _ref5.DOMProps;
      var onTabExpand = tabContentProps.onTabExpand,
          onTabCollapse = tabContentProps.onTabCollapse;


      if (tabContentProps.stretchTabContent) {
        DOMProps.style = _extends({}, DOMProps.style);
        DOMProps.style.flex = 1;
      }

      if (!tabContentProps.focused) {
        tabContentProps.onWrapperMouseDown = function (ev) {
          _this4.setState({
            focused: true,
            focusedTabIndex: tabContentProps.idx
          });
        };
      }

      return _react2.default.createElement(
        _AccordionTabContent2.default,
        _extends({
          ref: function ref(el) {
            el && _this4.tabContainers.push(el);
          },
          onCollapseEnd: function onCollapseEnd() {
            _this4.onContentCollapsed(idx, onTabCollapse);
          },
          onExpandEnd: function onExpandEnd() {
            _this4.onContentExpanded(idx, onTabExpand);
          },
          onExpandStart: function onExpandStart() {
            _this4._transitioning = true;
          },
          onCollapseStart: function onCollapseStart() {
            _this4._transitioning = true;
          }
        }, tabContentProps),
        _react2.default.createElement(child.type, DOMProps)
      );
    }
  }, {
    key: '_attachEventHandler',
    value: function _attachEventHandler(key, handler, propagatedProps) {
      var oldEventHandler = propagatedProps[key];
      if (oldEventHandler) {
        propagatedProps[key] = function (ev) {
          handler(ev);
          oldEventHandler(ev);
        };
      } else {
        propagatedProps[key] = handler;
      }
    }
  }, {
    key: 'setKeyboardNavigationProps',
    value: function setKeyboardNavigationProps(computedAccordionDOMProps) {
      computedAccordionDOMProps.tabIndex = this.props.tabIndex || 0;
      this._attachEventHandler('onFocus', this.onFocus, computedAccordionDOMProps);
      this._attachEventHandler('onBlur', this.onBlur, computedAccordionDOMProps);
      this._attachEventHandler('onMouseDown', this.onInteractionBeforeFocus, computedAccordionDOMProps);
      this._attachEventHandler('onKeyDown', this.onKeyDown, computedAccordionDOMProps);
    }

    // when single expand and no tab open, we need an element to give us the expand
    // target dimmension

  }, {
    key: 'renderTabFiller',
    value: function renderTabFiller(activeTabs) {
      var _props11 = this.props,
          collapsible = _props11.collapsible,
          multiExpand = _props11.multiExpand,
          rootClassName = _props11.rootClassName;


      if (collapsible && !multiExpand) {
        var classnames = (0, _join2.default)(rootClassName + '__tab-space-filler', !this._transitioning && activeTabs.length !== 0 && rootClassName + '__tab-space-filler--collapsed');
        return _react2.default.createElement('div', { ref: 'tabContentFiller', className: classnames });
      }
    }
  }, {
    key: 'renderResizeNotifier',
    value: function renderResizeNotifier() {
      return _react2.default.createElement(_NotifyResize.NotifyResize, { rafOnResize: true, onResize: this.onResize });
    }
  }, {
    key: 'render',
    value: function render() {
      var _this5 = this;

      var _props12 = this.props,
          children = _props12.children,
          horizontal = _props12.horizontal,
          multiExpand = _props12.multiExpand,
          collapsible = _props12.collapsible,
          enableKeyboardNavigation = _props12.enableKeyboardNavigation,
          style = _props12.style,
          scrollTabContent = _props12.scrollTabContent,
          stretchTabContent = _props12.stretchTabContent,
          showTooltip = _props12.showTooltip;


      this._assignToggleHandler(this.props);

      var _state3 = this.state,
          expandedHeight = _state3.expandedHeight,
          focusedTabIndex = _state3.focusedTabIndex;


      var activeTabs = this.getActiveTabs();

      this.tabContainers = [];
      this.tabTitles = [];

      var detailsParams = {
        horizontal: horizontal,
        multiExpand: multiExpand,
        collapsible: collapsible
      };

      // TODO refactor and move computation of each title/content instance in separate function
      var contentDetailsParams = _extends({}, detailsParams, this._getContentDetailsParams());
      var titleDetailsParams = _extends({}, detailsParams, this._getTitleDetailsParams(activeTabs));

      var expandedIndex = void 0;
      var accordionItems = _react.Children.map(children, function (child, idx) {
        var _child$props = child.props,
            _child$props$tabProps = _child$props.tabProps,
            tabProps = _child$props$tabProps === undefined ? {} : _child$props$tabProps,
            disabled = _child$props.disabled,
            locked = _child$props.locked,
            tabTitle = _child$props.tabTitle,
            DOMProps = _objectWithoutProperties(_child$props, ['tabProps', 'disabled', 'locked', 'tabTitle']);

        var instanceDisabled = tabProps.disabled,
            instanceTitle = tabProps.title,
            instanceTitleStyle = tabProps.titleStyle,
            instanceTabTitleEllipsis = tabProps.titleEllipsis,
            instanceTabTitleAlign = tabProps.titleAlign,
            instanceTabTitleVerticalAlign = tabProps.titleVerticalAlign,
            onExpand = tabProps.onExpand,
            onCollapse = tabProps.onCollapse,
            instanceStretchTabContent = tabProps.stretchTabContent,
            instanceTabWrapperStyle = tabProps.style,
            instanceTabWrapperClassName = tabProps.className;


        var instanceLocked = tabProps.locked != null ? tabProps.locked : locked;

        var isActive = _this5._isActiveTab(idx) && !DOMProps.disabled;
        var isDisabled = instanceDisabled !== undefined ? instanceDisabled : disabled;
        var lengthOfChildrenArray = _react.Children.toArray(children).length;

        var tabPositionProps = {
          firstTab: idx === 0,
          lastTab: idx === lengthOfChildrenArray - 1
        };

        if (isActive) {
          expandedIndex = idx;
        }

        // TODO refactor into a function
        var contentInstanceProps = _extends({}, contentDetailsParams, tabPositionProps, {
          wrapperStyle: _extends({}, contentDetailsParams.wrapperStyle, instanceTabWrapperStyle),
          wrapperClassName: (0, _join2.default)(contentDetailsParams.wrapperClassName, instanceTabWrapperClassName),
          expanded: isActive,
          nextAfterExpanded: idx === expandedIndex + 1,
          onTabExpand: onExpand,
          onTabCollapse: onCollapse,
          scrollTabContent: scrollTabContent,
          stretchTabContent: instanceStretchTabContent !== undefined ? instanceStretchTabContent : stretchTabContent,
          idx: idx
        });

        // TODO refactor into a function
        var titleInstanceProps = _extends({}, titleDetailsParams, tabPositionProps, {
          disabled: isDisabled,
          tabTitle: instanceTitle || tabTitle,
          focused: focusedTabIndex === idx && !isDisabled,
          nextAfterExpanded: idx === expandedIndex + 1,
          expanded: isActive,
          showTooltip: showTooltip,
          locked: instanceLocked != null ? instanceLocked : titleDetailsParams.locked,
          tabTitleAlign: instanceTabTitleAlign !== undefined ? instanceTabTitleAlign : titleDetailsParams.tabTitleAlign,
          tabTitleVerticalAlign: instanceTabTitleVerticalAlign !== undefined ? instanceTabTitleVerticalAlign : titleDetailsParams.tabTitleVerticalAlign,
          tabTitleEllipsis: instanceTabTitleEllipsis !== undefined ? instanceTabTitleEllipsis : titleDetailsParams.tabTitleEllipsis,
          tabTitleStyle: _extends({}, titleDetailsParams.tabTitleStyle, instanceTitleStyle),
          index: idx
        });

        return [_this5.renderTabTitle({
          idx: idx,
          tabTitleProps: titleInstanceProps,
          DOMProps: DOMProps
        }), _this5.renderTabContent({
          idx: idx,
          child: child,
          tabContentProps: contentInstanceProps,
          DOMProps: DOMProps
        })];
      });

      var cleanedProps = (0, _cleanProps2.default)(this.props, ZippyAccordion.propTypes);

      var computedAccordionDOMProps = _extends({}, cleanedProps, {
        className: this.getClassNames(),
        ref: 'accordionNode'
      });

      if (enableKeyboardNavigation) {
        this.setKeyboardNavigationProps(computedAccordionDOMProps);
      }

      return _react2.default.createElement(
        'div',
        computedAccordionDOMProps,
        accordionItems,
        this.renderTabFiller(activeTabs),
        this.renderResizeNotifier()
      );
    }
  }]);

  return ZippyAccordion;
}(_react.Component);

ZippyAccordion.defaultProps = {
  activateOnFocus: false,
  collapsible: false,
  horizontal: false,
  activateEvent: 'onClick',

  scrollTabContent: false,

  showTooltip: false,

  transition: true,
  transitionDuration: 300,
  transitionFunction: 'ease',

  tabTitleEllipsis: true,
  tabTitleAlign: 'start',
  tabTitleVerticalAlign: 'middle',

  tabStyle: {},

  rtl: false,
  expandOnToolOnly: false,
  enableKeyboardNavigation: true,

  theme: 'default',

  NotifyResize: _NotifyResize.NotifyResize,

  defaultActiveIndex: 0,
  scrollIntoViewOnFocus: true,
  raf: _raf2.default,

  rootClassName: CLASS_NAME
};

ZippyAccordion.propTypes = {
  shouldComponentUpdate: _propTypes2.default.func,
  children: _propTypes2.default.any,
  stretch: _propTypes2.default.bool,
  theme: _propTypes2.default.string,
  horizontal: _propTypes2.default.bool,

  activateOnFocus: _propTypes2.default.bool,

  transition: _propTypes2.default.bool,
  transitionDuration: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]),
  transitionFunction: _propTypes2.default.string,

  activeIndex: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.arrayOf(_propTypes2.default.number)]),
  defaultActiveIndex: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.arrayOf(_propTypes2.default.number)]),
  multiExpand: _propTypes2.default.bool,
  collapsible: _propTypes2.default.bool,

  activateEvent: _propTypes2.default.oneOf(['onClick', 'onMouseDown', 'onMouseEnter']),

  onExpand: _propTypes2.default.func,
  onActivate: _propTypes2.default.func,
  onCollapse: _propTypes2.default.func,

  NotifyResize: _propTypes2.default.func,

  renderTabTitle: _propTypes2.default.func,
  rootClassName: _propTypes2.default.string,
  expandTool: _propTypes2.default.oneOfType([_propTypes2.default.func, _propTypes2.default.object, _propTypes2.default.string]),
  expandOnToolOnly: _propTypes2.default.bool,
  expandToolPosition: _propTypes2.default.oneOf(['start', 'end']),

  scrollTabContent: _propTypes2.default.bool,
  stretchTabContent: _propTypes2.default.bool,

  tabTitle: _propTypes2.default.node,
  tabTitleStyle: _propTypes2.default.object,
  tabTitleEllipsis: _propTypes2.default.bool,
  tabTitleAlign: _propTypes2.default.oneOf(['start', 'center', 'end', 'left', 'right', 'top', 'bottom']),
  tabTitleVerticalAlign: _propTypes2.default.oneOf(['middle', 'top', 'bottom']),
  tabTitleRotate: _propTypes2.default.oneOf([-90, 90]),

  tabStyle: _propTypes2.default.object,
  tabClassName: _propTypes2.default.string,

  rtl: _propTypes2.default.bool,
  locked: _propTypes2.default.bool,

  showTooltip: _propTypes2.default.bool,

  enableKeyboardNavigation: _propTypes2.default.bool,
  scrollIntoViewOnFocus: _propTypes2.default.bool,

  raf: _propTypes2.default.func
};

exports.default = ZippyAccordion;
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CLASS_NAME = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _autoBind = require('@zippytech/react-class/autoBind');

var _autoBind2 = _interopRequireDefault(_autoBind);

var _NotifyResize = require('../../NotifyResize');

var _shouldComponentUpdate2 = require('./shouldComponentUpdate');

var _shouldComponentUpdate3 = _interopRequireDefault(_shouldComponentUpdate2);

var _join = require('./join');

var _join2 = _interopRequireDefault(_join);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Copyright (c) 2015-present, Zippy Technologies
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * This source code is licensed under the MIT license found in the
file in the root directory of this source tree.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */

var CLASS_NAME = exports.CLASS_NAME = 'zippy-react-toolkit-accordion__tab-title';

function defaultRenderExpandTool(params) {
  var EXPAND_TOOL_SIZE = 20;
  var className = params.rootClassName || CLASS_NAME;
  var style = {
    width: EXPAND_TOOL_SIZE,
    height: EXPAND_TOOL_SIZE,
    transition: params.transition ? 'all ' + params.transitionDuration + 'ms ' + params.transitionFunction : '',
    transform: params.expanded ? 'rotate(180deg)' : 'rotate(0deg)'
  };

  return _react2.default.createElement(
    'div',
    {
      style: style,
      className: (0, _join2.default)(className + '__expand-tool', params.disabled && className + '__expand-tool--disabled')
    },
    _react2.default.createElement(
      'svg',
      {
        height: EXPAND_TOOL_SIZE,
        viewBox: '0 0 24 24',
        width: EXPAND_TOOL_SIZE
      },
      _react2.default.createElement('path', { d: 'M7.41 15.41L12 10.83l4.59 4.58L18 14l-6-6-6 6z' }),
      _react2.default.createElement('path', { d: 'M0 0h24v24H0z', fill: 'none' })
    )
  );
}

var ZippyAccordionTabTitle = function (_Component) {
  _inherits(ZippyAccordionTabTitle, _Component);

  function ZippyAccordionTabTitle(props) {
    _classCallCheck(this, ZippyAccordionTabTitle);

    var _this = _possibleConstructorReturn(this, (ZippyAccordionTabTitle.__proto__ || Object.getPrototypeOf(ZippyAccordionTabTitle)).call(this, props));

    (0, _autoBind2.default)(_this);

    _this.state = {
      expanded: _this.props.expanded,
      focused: _this.props.expanded,
      heightOfContent: null,
      heightOfContainer: null
    };
    return _this;
  }

  _createClass(ZippyAccordionTabTitle, [{
    key: 'shouldComponentUpdate',
    value: function shouldComponentUpdate(nextProps, nextState) {
      return (0, _shouldComponentUpdate3.default)(this, nextProps, nextState);
    }
  }, {
    key: 'componentDidMount',
    value: function componentDidMount() {
      this.computeRotatedAccordionTitleDimmensions();
    }
  }, {
    key: 'componentDidUpdate',
    value: function componentDidUpdate() {
      this.computeRotatedAccordionTitleDimmensions(this.props, this.onResize);
    }

    // if text overflow ellipsis happens, we must add a title attribute on the
    // title. This requires that the DOM be present
    // http://stackoverflow.com/questions/7738117/html-text-overflow-ellipsis-detection#answer-10017343

  }, {
    key: 'applyTooltipIfNeeded',
    value: function applyTooltipIfNeeded() {
      if (typeof window !== 'undefined') {
        var tabTitleText = this.refs.tabTitleText;

        this.setState({
          tabTitleTooltip: tabTitleText.offsetWidth < tabTitleText.scrollWidth
        });
      }
    }
  }, {
    key: 'isLocked',
    value: function isLocked() {
      return this.props.locked;
    }
  }, {
    key: 'isDisabled',
    value: function isDisabled() {
      return this.props.disabled;
    }
  }, {
    key: 'isActionable',
    value: function isActionable() {
      return !(this.isLocked() || this.isDisabled());
    }
  }, {
    key: '_mapAlignPropToProperValue',
    value: function _mapAlignPropToProperValue(tabTitleAlign) {
      switch (tabTitleAlign) {
        case 'left':
        case 'top':
          return 'start';
        case 'right':
        case 'bottom':
          return 'end';
        default:
          return tabTitleAlign;
      }
    }
  }, {
    key: 'onResize',
    value: function onResize() {
      this.computeRotatedAccordionTitleDimmensions(this.props);
      this.applyTooltipIfNeeded();
    }
  }, {
    key: 'getComputedStylesForRotatedTitle',
    value: function getComputedStylesForRotatedTitle() {
      var _props = this.props,
          orientation = _props.orientation,
          tabTitleRotate = _props.tabTitleRotate,
          rtl = _props.rtl;
      var _state = this.state,
          heightOfContainer = _state.heightOfContainer,
          heightOfContent = _state.heightOfContent;


      if (heightOfContainer != null && heightOfContent != null) {
        var computedTransform = void 0;

        if (orientation === 'horizontal') {
          if (tabTitleRotate === -90) {
            if (rtl) {
              computedTransform = 'rotate(-90deg) translate(' + heightOfContent + 'px)';
            } else {
              computedTransform = 'rotate(-90deg) translate(' + heightOfContent + 'px, -' + (heightOfContainer - heightOfContent) + 'px)';
            }

            return {
              transform: computedTransform,
              transformOrigin: '100% 100%'
            };
          }

          if (rtl) {
            computedTransform = 'rotate(90deg) translate(0, -' + heightOfContainer + 'px';
          } else {
            computedTransform = 'rotate(90deg) translate(0, -' + heightOfContent + 'px)';
          }

          return {
            transform: computedTransform,
            transformOrigin: '0% 0%'
          };
        }
      }
    }
  }, {
    key: 'renderTabTitle',
    value: function renderTabTitle(tabDOMProps, tabProps) {
      return _react2.default.createElement('div', tabDOMProps);
    }
  }, {
    key: 'renderExpandTool',
    value: function renderExpandTool(params) {
      var expandTool = this.props.expandTool;

      var typeofExpandTool = typeof expandTool === 'undefined' ? 'undefined' : _typeof(expandTool);

      if (typeofExpandTool === 'function') {
        return expandTool(params);
      }

      return expandTool;
    }
  }, {
    key: 'getClassNames',
    value: function getClassNames() {
      var _props2 = this.props,
          className = _props2.className,
          locked = _props2.locked,
          expanded = _props2.expanded,
          nextAfterExpanded = _props2.nextAfterExpanded,
          disabled = _props2.disabled,
          focused = _props2.focused,
          firstTab = _props2.firstTab,
          lastTab = _props2.lastTab,
          expandOnToolOnly = _props2.expandOnToolOnly,
          tabTitleEllipsis = _props2.tabTitleEllipsis,
          tabTitleAlign = _props2.tabTitleAlign,
          tabTitleVerticalAlign = _props2.tabTitleVerticalAlign,
          orientation = _props2.orientation,
          rootClassName = _props2.rootClassName,
          rtl = _props2.rtl,
          tabTitleRotate = _props2.tabTitleRotate;


      return (0, _join2.default)(className, rootClassName, rootClassName + '--' + orientation, rootClassName + '--align-' + this._mapAlignPropToProperValue(tabTitleAlign), rootClassName + '--vertical-align-' + tabTitleVerticalAlign, tabTitleEllipsis && rootClassName + '--ellipsis', locked && rootClassName + '--locked', rtl ? rootClassName + '--rtl' : rootClassName + '--ltr', expanded && rootClassName + '--expanded', !expanded && rootClassName + '--collapsed', firstTab && rootClassName + '--first-tab-collapsed', expanded && !firstTab && rootClassName + '--multi-expand', nextAfterExpanded && rootClassName + '--next-after-expanded', focused && rootClassName + '--focused', disabled && rootClassName + '--disabled', firstTab && rootClassName + '--firstTab', lastTab && rootClassName + '--lastTab', expandOnToolOnly && rootClassName + '--expand-on-tooltip-only', orientation === 'horizontal' && tabTitleRotate === 90 ? (0, _join2.default)(firstTab && rootClassName + '--rotated-first-tab', lastTab && expanded && rootClassName + '--expanded-rotated-last-tab', lastTab && !expanded && rootClassName + '--collapsed-rotated-last-tab', expanded && rootClassName + '--expanded-rotated', nextAfterExpanded && rootClassName + '--next-after-expanded-rotated') : '');
    }
  }, {
    key: 'computeRotatedAccordionTitleDimmensions',
    value: function computeRotatedAccordionTitleDimmensions(props, cb) {
      var _this2 = this;

      var _ref = props || this.props,
          orientation = _ref.orientation;

      if (orientation === 'vertical') {
        if (this.state.heightOfContainer != null || this.state.heightOfContent != null) {
          this.setState({
            heightOfContainer: null,
            heightOfContent: null
          });
        }
      } else {
        var heightOfContainer = this.refs.tabTitleContainer.offsetHeight;
        var heightOfContent = this.refs.tabWrapper.offsetHeight;

        var setHeightOfContent = function setHeightOfContent() {
          if (_this2.state.heightOfContent != heightOfContent) {
            _this2.setState({
              heightOfContent: heightOfContent
            }, function () {
              cb && cb();
            });
          } else {
            cb && cb();
          }
        };

        if (this.state.heightOfContainer != heightOfContainer) {
          this.setState({
            heightOfContainer: heightOfContainer
          }, setHeightOfContent);
        } else {
          setHeightOfContent();
        }
      }
    }
  }, {
    key: 'getRenderTabTitleProps',
    value: function getRenderTabTitleProps() {
      var _props3 = this.props,
          expanded = _props3.expanded,
          index = _props3.index,
          activeTabs = _props3.activeTabs,
          disabled = _props3.disabled,
          multiExpand = _props3.multiExpand,
          collapsible = _props3.collapsible,
          focused = _props3.focused,
          rootClassName = _props3.rootClassName,
          transition = _props3.transition,
          transitionDuration = _props3.transitionDuration,
          transitionFunction = _props3.transitionFunction;


      var activeIndex = multiExpand ? activeTabs : activeTabs[0];
      var transitionProps = { transition: transition };

      if (transition) {
        transitionProps = {
          transition: transition,
          transitionDuration: transitionDuration,
          transitionFunction: transitionFunction
        };
      }
      return _extends({
        expanded: expanded,
        index: index,
        activeIndex: activeIndex,
        disabled: disabled,
        multiExpand: multiExpand,
        collapsible: collapsible,
        focused: focused,
        rootClassName: rootClassName
      }, transitionProps);
    }
  }, {
    key: 'getRenderTabTitleDOMProps',
    value: function getRenderTabTitleDOMProps() {
      var _props4 = this.props,
          tabTitle = _props4.tabTitle,
          expandToolPosition = _props4.expandToolPosition,
          rtl = _props4.rtl,
          showTooltip = _props4.showTooltip;
      var rootClassName = this.props.rootClassName;
      var tabTitleTooltip = this.state.tabTitleTooltip;

      var typeOfTabTitle = typeof tabTitle === 'undefined' ? 'undefined' : _typeof(tabTitle);

      if (typeOfTabTitle === 'function') {
        tabTitle = tabTitle(this.getRenderTabTitleProps());
      }

      var className = void 0;

      if (expandToolPosition === 'end') {
        if (rtl === false) {
          className = rootClassName + '__content-end';
        } else {
          className = rootClassName + '__content-start';
        }
      }
      if (expandToolPosition === 'start') {
        if (rtl === false) {
          className = rootClassName + '__content-start';
        } else {
          className = rootClassName + '__content-end';
        }
      }

      var domProps = {
        className: (0, _join2.default)(rootClassName + '__content', className),
        children: _react2.default.createElement(
          'div',
          { className: rootClassName + '-label' },
          tabTitle
        ),
        ref: 'tabTitleText'
      };

      if (typeOfTabTitle === 'string' && showTooltip) {
        domProps['data-tooltip'] = tabTitle;
      }

      return domProps;
    }
  }, {
    key: 'renderRotatedLayout',
    value: function renderRotatedLayout() {
      var _props5 = this.props,
          orientation = _props5.orientation,
          rootClassName = _props5.rootClassName;
      var _state2 = this.state,
          heightOfContent = _state2.heightOfContent,
          heightOfContainer = _state2.heightOfContainer;


      return _react2.default.createElement(
        'div',
        {
          ref: 'tabTitleContainer',
          className: rootClassName + '__wrapper',
          style: { width: heightOfContent }
        },
        _react2.default.createElement(
          'div',
          {
            className: rootClassName + '__content-wrapper',
            style: { width: heightOfContainer }
          },
          _react2.default.createElement(
            'div',
            { style: this.getComputedStylesForRotatedTitle() },
            this.renderTabTitleAndTool()
          )
        )
      );
    }
  }, {
    key: 'renderNormalLayout',
    value: function renderNormalLayout() {
      var _props6 = this.props,
          orientation = _props6.orientation,
          rootClassName = _props6.rootClassName;


      return _react2.default.createElement(
        'div',
        { ref: 'tabTitleContainer', className: rootClassName + '__wrapper' },
        _react2.default.createElement(
          'div',
          { className: rootClassName + '__content-wrapper' },
          this.renderTabTitleAndTool()
        )
      );
    }
  }, {
    key: 'renderTabTitleAndTool',
    value: function renderTabTitleAndTool() {
      var _props7 = this.props,
          locked = _props7.locked,
          expandOnToolOnly = _props7.expandOnToolOnly,
          activateEvent = _props7.activateEvent,
          onToggle = _props7.onToggle,
          tabTitleStyle = _props7.tabTitleStyle,
          rootClassName = _props7.rootClassName,
          customRenderTabTitle = _props7.renderTabTitle;


      var containerDOMProps = {
        className: this.getClassNames(),
        ref: 'tabWrapper',
        style: tabTitleStyle
      };

      var tooltipDOMProps = {
        className: rootClassName + '__expand-tool-wrapper'
      };

      if (!locked) {
        if (expandOnToolOnly) {
          tooltipDOMProps[activateEvent] = onToggle;
        } else {
          containerDOMProps[activateEvent] = onToggle;
        }
      }

      var subComponentProps = this.getRenderTabTitleProps();
      var expandToolContent = this.renderExpandTool(subComponentProps);
      var renderTabTitle = customRenderTabTitle ? customRenderTabTitle : this.renderTabTitle;

      return _react2.default.createElement(
        'div',
        containerDOMProps,
        _react2.default.createElement(_NotifyResize.NotifyResize, { rafOnResize: true, onResize: this.onResize }),
        renderTabTitle(this.getRenderTabTitleDOMProps(), subComponentProps),
        expandToolContent && _react2.default.createElement(
          'div',
          tooltipDOMProps,
          expandToolContent
        )
      );
    }
  }, {
    key: 'render',
    value: function render() {
      var orientation = this.props.orientation;


      if (orientation === 'horizontal') {
        return this.renderRotatedLayout();
      }
      return this.renderNormalLayout();
    }
  }]);

  return ZippyAccordionTabTitle;
}(_react.Component);

ZippyAccordionTabTitle.defaultProps = {
  expanded: false,
  disabled: false,
  tabTitleEllipsis: true,
  activateEvent: 'onClick',
  tabTitleAlign: 'start',
  expandTool: defaultRenderExpandTool,
  expandToolPosition: 'end',
  orientation: 'vertical',
  tabTitleRotate: -90,
  rtl: false,
  rootClassName: CLASS_NAME,
  locked: null,
  activeTabs: []
};

ZippyAccordionTabTitle.propTypes = {
  shouldComponentUpdate: _propTypes2.default.func,

  expanded: _propTypes2.default.bool,
  nextAfterExpanded: _propTypes2.default.bool,
  focused: _propTypes2.default.bool,
  locked: _propTypes2.default.bool,
  rtl: _propTypes2.default.bool,

  activeTabs: _propTypes2.default.array,

  tabTitle: _propTypes2.default.any,
  tabTitleStyle: _propTypes2.default.object,
  tabTitleAlign: _propTypes2.default.oneOf(['start', 'end', 'center', 'top', 'left', 'right', 'bottom']),
  tabTitleVerticalAlign: _propTypes2.default.oneOf(['middle', 'top', 'bottom']),
  tabTitleEllipsis: _propTypes2.default.bool,
  tabTitleRotate: _propTypes2.default.oneOf([90, -90]),

  renderTabTitle: _propTypes2.default.func,
  rootClassName: _propTypes2.default.string,

  activateEvent: _propTypes2.default.oneOf(['onClick', 'onMouseDown', 'onMouseEnter']),

  expandTool: _propTypes2.default.oneOfType([_propTypes2.default.func, _propTypes2.default.object, _propTypes2.default.string]),
  expandOnToolOnly: _propTypes2.default.bool,
  expandToolPosition: _propTypes2.default.oneOf(['start', 'end']),

  orientation: _propTypes2.default.oneOf(['vertical', 'horizontal'])
};

exports.default = ZippyAccordionTabTitle;
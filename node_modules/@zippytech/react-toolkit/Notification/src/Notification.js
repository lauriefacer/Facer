'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _cleanProps = require('../../common/cleanProps');

var _cleanProps2 = _interopRequireDefault(_cleanProps);

var _join = require('../../common/join');

var _join2 = _interopRequireDefault(_join);

var _CloseButton = require('./CloseButton');

var _CloseButton2 = _interopRequireDefault(_CloseButton);

var _PinButton = require('./PinButton');

var _PinButton2 = _interopRequireDefault(_PinButton);

var _getMinMaxSize = require('./utils/getMinMaxSize');

var _getMinMaxSize2 = _interopRequireDefault(_getMinMaxSize);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Copyright (c) 2015-present, Zippy Technologies
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * This source code is licensed under the MIT license found in the
file in the root directory of this source tree.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */

var Notification = function (_Component) {
  _inherits(Notification, _Component);

  function Notification(props) {
    _classCallCheck(this, Notification);

    var _this = _possibleConstructorReturn(this, (Notification.__proto__ || Object.getPrototypeOf(Notification)).call(this, props));

    _this.setRootRef = function (el) {
      _this.rootNode = el;
    };

    _this.state = {
      hover: false
    };

    _this.handleMouseEnter = _this.handleMouseEnter.bind(_this);
    _this.handleMouseLeave = _this.handleMouseLeave.bind(_this);
    _this.handleOnClick = _this.handleOnClick.bind(_this);
    _this.handlePinButtonClick = _this.handlePinButtonClick.bind(_this);
    _this.hide = _this.hide.bind(_this);

    _this.widthMeasured = props.width === undefined;
    _this.heightMeasured = props.height === undefined;
    return _this;
  }

  _createClass(Notification, [{
    key: 'UNSAFE_componentWillReceiveProps',
    value: function UNSAFE_componentWillReceiveProps(nextProps) {
      if (this.props.visible !== nextProps.visible) {
        this.handleVisibleChange(nextProps.visible);
      }
    }
  }, {
    key: 'componentDidMount',
    value: function componentDidMount() {
      var _this2 = this;

      // onsize change needs to be done after a delayed
      // so notification board gets to be mounted and have a ref to
      // rootNode.
      // At this point in time NotificationBoard doesn't have a ref to it's root.
      // A reference is needed when positioning Notifications relative to an element.
      setTimeout(function () {
        _this2.onSizeChange();
      }, 0);

      this.componentIsMounted = true;
      if (this.props.autoHideDelay) {
        this.startAutoHideDelay();
      }
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      this.componentIsMounted = null;
    }
  }, {
    key: 'render',
    value: function render() {
      var props = this.props;
      var content = props.content,
          stacking = props.stacking,
          moveTransition = props.moveTransition,
          icon = props.icon,
          shadow = props.shadow,
          nonBlocking = props.nonBlocking,
          rootClassName = props.rootClassName,
          rtl = props.rtl,
          relativeToViewport = props.relativeToViewport,
          theme = props.theme,
          title = props.title;


      var normalizedStacking = Array.isArray(stacking) && stacking.join('-');

      var className = (0, _join2.default)(rootClassName, props.className, !title && rootClassName + '__content-no-title', rtl && rootClassName + '--rtl', theme && rootClassName + '--theme-' + theme, shadow && rootClassName + '--shadow', nonBlocking && rootClassName + '--non-blocking', relativeToViewport && rootClassName + '--relative-to-viewport', this.getVisible() && rootClassName + '--visible');

      var contentClass = rootClassName + '__content';

      if (this.isInShowHideTransition()) {
        className = this.getTransitionClassName(className);
      } else {
        className = (0, _join2.default)(className, normalizedStacking && rootClassName + '--stacking-' + normalizedStacking, moveTransition && rootClassName + '--move-transition');
      }

      var style = this.prepareStyle(props);

      return _react2.default.createElement(
        'div',
        _extends({}, (0, _cleanProps2.default)(props, Notification.propTypes), {
          onMouseEnter: this.handleMouseEnter,
          onMouseLeave: this.handleMouseLeave,
          onClick: this.handleOnClick,
          className: className,
          style: style,
          ref: this.setRootRef
        }),
        _react2.default.createElement(
          'div',
          {
            className: title ? rootClassName + '__header' : rootClassName + '__header-no-title'
          },
          icon,
          this.renderTitle() || _react2.default.createElement('div', { className: rootClassName + '__header__spacer' }),
          this.renderPinButton(),
          this.renderCloseButton()
        ),
        _react2.default.createElement(
          'div',
          { className: contentClass },
          content
        )
      );
    }
  }, {
    key: 'renderTitle',
    value: function renderTitle() {
      if (!this.props.title) {
        return null;
      }

      var titleProps = {
        className: (0, _join2.default)(this.props.rootClassName + '__title', this.props.titleEllipsis && this.props.rootClassName + '__title--ellipsis'),
        children: this.props.title
      };

      var result = void 0;
      if (typeof this.props.title === 'function') {
        result = this.props.title(titleProps, this.props);
      }

      if (result == null) {
        result = _react2.default.createElement('div', titleProps);
      }

      return result;
    }
  }, {
    key: 'renderCloseButton',
    value: function renderCloseButton() {
      if (!this.props.closeButton) {
        return null;
      }

      var rtlClass = this.props.rtl ? this.props.rootClassName + '__close-button--rtl' : this.props.rootClassName + '__close-button';

      var closeButtonProps = {
        className: rtlClass,
        onClick: this.hide
      };

      var result = void 0;
      if (this.props.closeButton !== true) {
        result = typeof this.props.closeButton === 'function' ? this.props.closeButton(closeButtonProps, this.props) : this.props.closeButton;
      }

      if (result == null) {
        result = _react2.default.createElement(_CloseButton2.default, closeButtonProps);
      }

      return result;
    }
  }, {
    key: 'renderPinButton',
    value: function renderPinButton() {
      if (!this.props.pinButton) {
        return null;
      }

      var rtlClass = (0, _join2.default)(this.props.rtl ? this.props.rootClassName + '__pin-button--rtl' : this.props.rootClassName + '__pin-button', this.state.pinned && this.props.rootClassName + '__pin-button--active');

      var pinButtonProps = {
        className: rtlClass,
        pinned: this.state.pinned,
        onClick: this.handlePinButtonClick
      };

      var result = void 0;
      if (this.props.pinButton !== true) {
        result = typeof this.props.pinButton === 'function' ? this.props.pinButton(pinButtonProps, _extends({}, this.props, this.state)) : this.props.pinButton;
      }

      if (result == null) {
        result = _react2.default.createElement(_PinButton2.default, pinButtonProps);
      }

      return result;
    }
  }, {
    key: 'handlePinButtonClick',
    value: function handlePinButtonClick(event) {
      if (event && event.stopPropagation) {
        event.stopPropagation();
      }
      var newPinned = !this.state.pinned;
      this.setState({
        pinned: newPinned
      });

      if (newPinned) {
        this.cancelAutoHide();
        this.autoHideCanceledByPin = true;
      } else {
        this.autoHideCanceledByPin = false;
        this.startAutoHideDelay();
      }
    }
  }, {
    key: 'prepareStyle',
    value: function prepareStyle(props) {
      props = props || this.props;
      var _props = props,
          border = _props.border;

      var style = {};

      if (props.border) {
        style.border = props.border;
      }

      if (props.background) {
        style.background = props.background;
      }

      if (props.padding) {
        style.padding = props.padding;
      }

      if (props.borderRadius) {
        style.borderRadius = props.borderRadius;
      }

      if (props.width && !this.widthMeasured) {
        style.width = props.width;
      }

      if (props.height && !this.heightMeasured) {
        style.height = props.height;
      }

      var isInTransition = this.isInShowHideTransition();
      if (props.opacity !== undefined) {
        var cleanOpacity = this.props.clearOpacityOnMouseEnter && this.state.hover || this.state.pinned;
        var opacity = cleanOpacity ? 1 : props.opacity;
        if (isInTransition) {
          style.opacity = this.getTransitionOpacity();
        } else {
          style.opacity = opacity;
        }
      }

      var minMaxSize = (0, _getMinMaxSize2.default)(props);

      var position = {
        top: props.position.top,
        left: props.position.left,
        right: props.position.right,
        bottom: props.position.bottom
      };
      if (props.stacking && props.stacking.indexOf('center') !== -1 && props.width) {
        if (props.stacking[0] === 'top' || props.stacking[0] === 'bottom') {
          position.left = '50%';
          position.marginLeft = -props.width / 2;
        }
        if (props.stacking[0] === 'left' || props.stacking[0] === 'right') {
          position.top = '50%';
          position.marginTop = -props.height / 2;
        }
      }

      return _extends({}, minMaxSize, style, props.style, position, this.getTransitionStyle());
    }
  }, {
    key: 'getTransitionStyle',
    value: function getTransitionStyle() {
      if (!this.hasTransition()) {
        return null;
      }

      if (this.state.transitionEnterActive) {
        return {
          transitionDuration: this.props.showTransitionDuration + 'ms'
        };
      }

      if (this.state.transitionLeaveActive) {
        return {
          transitionDuration: this.props.hideTransitionDuration + 'ms'
        };
      }
      return null;
    }
  }, {
    key: 'getTransitionClassName',
    value: function getTransitionClassName(className) {
      var rootClassName = this.props.rootClassName;
      var _state = this.state,
          transitionEnter = _state.transitionEnter,
          transitionEnterActive = _state.transitionEnterActive,
          transitionLeave = _state.transitionLeave,
          transitionLeaveActive = _state.transitionLeaveActive;


      var showAnimation = this.getShowAnimation();
      var showTransitionClassName = '';
      if (showAnimation) {
        if (transitionEnterActive) {
          showTransitionClassName = 'zippy-animation-' + showAnimation + '--active';
        }

        if (transitionEnter) {
          showTransitionClassName += ' zippy-animation-' + showAnimation;
        }
      }

      var hideAnimation = this.getHideAnimation();
      var hideTransitionClassName = '';
      if (hideAnimation) {
        if (transitionLeaveActive) {
          hideTransitionClassName = 'zippy-animation-' + hideAnimation + '--active';
        }

        if (transitionLeave) {
          hideTransitionClassName += ' zippy-animation-' + hideAnimation;
        }
      }

      return (0, _join2.default)(className, this.props.rootClassName + '--has-transition', transitionEnter && rootClassName + '--transition-enter', transitionEnterActive && rootClassName + '--transition-enter-active', transitionLeave && rootClassName + '--transition-leave', transitionLeaveActive && rootClassName + '--transition-leave-active', showTransitionClassName, hideTransitionClassName);
    }

    /**
     * If an opacity is set and show/hide animation is fade.
     * Then it should fadeIn to that value and start fadeOut from that value
     */

  }, {
    key: 'getTransitionOpacity',
    value: function getTransitionOpacity() {
      var opacity = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props.opacity;

      if (this.state.transitionEnterActive && this.getShowAnimation() === 'fade-in') {
        return opacity;
      }

      if (this.state.transitionLeaveActive && this.getHideAnimation() === 'fade-out') {
        return 0;
      }

      if (this.state.transitionLeave && this.getHideAnimation() === 'fade-out') {
        return opacity;
      }

      return null;
    }
  }, {
    key: 'getShowAnimation',
    value: function getShowAnimation() {
      var showAnimation = this.props.showAnimation;
      if (showAnimation === true) {
        showAnimation = 'fade-in';
      }

      return showAnimation;
    }
  }, {
    key: 'getHideAnimation',
    value: function getHideAnimation() {
      var hideAnimation = this.props.hideAnimation;
      if (hideAnimation === true) {
        hideAnimation = 'fade-out';
      }
      return hideAnimation;
    }
  }, {
    key: 'getVisible',
    value: function getVisible() {
      return this.props.visible;
    }
  }, {
    key: 'onSizeChange',
    value: function onSizeChange() {
      var node = this.rootNode;
      var width = this.props.width || node.offsetWidth;
      var height = this.props.height || node.offsetHeight;

      this.props.onSizeChange({
        id: this.props.id,
        stacking: this.props.stacking,
        changes: {
          width: width,
          height: height,
          visible: true
        }
      });
    }
  }, {
    key: 'hide',
    value: function hide() {
      this.props.onHide({ id: this.props.id });

      // close immediately if it doen't have a transition
      if (!this.props.hideAnimation) {
        this.close();
      }
    }
  }, {
    key: 'close',
    value: function close() {
      this.props.onClose(this.props.id);
    }
  }, {
    key: 'show',
    value: function show() {
      this.props.onShow(this.props.id);
    }

    // transition

  }, {
    key: 'handleVisibleChange',
    value: function handleVisibleChange(visible) {
      if (visible) {
        this.props.showAnimation && this.setupEnterTransition();
      } else {
        this.props.hideAnimation && this.setupLeaveTransition();
      }
    }
  }, {
    key: 'hasTransition',
    value: function hasTransition() {
      return this.props.showAnimation || this.props.hideAnimation;
    }
  }, {
    key: 'isInShowHideTransition',
    value: function isInShowHideTransition() {
      var _state2 = this.state,
          transitionEnter = _state2.transitionEnter,
          transitionEnterActive = _state2.transitionEnterActive,
          transitionLeave = _state2.transitionLeave,
          transitionLeaveActive = _state2.transitionLeaveActive;


      return transitionEnter || transitionEnterActive || transitionLeave || transitionLeaveActive;
    }
  }, {
    key: 'setupLeaveTransition',
    value: function setupLeaveTransition() {
      var _this3 = this;

      this.setState({
        transitionLeave: true,
        transitionLeaveActive: false,

        // reset enter
        transitionEnter: false,
        transitionEnterActive: false
      }, function () {
        setTimeout(function () {
          if (_this3.componentIsMounted) {
            _this3.setState({
              transitionLeaveActive: true
            }, function () {
              setTimeout(function () {
                if (_this3.componentIsMounted) {
                  // cleanup
                  _this3.setState({
                    transitionLeave: false,
                    transitionLeaveActive: false
                  });
                  _this3.close();
                }
              }, _this3.props.hideTransitionDuration);
            }, 16);
          }
        });
      });
    }
  }, {
    key: 'setupEnterTransition',
    value: function setupEnterTransition() {
      var _this4 = this;

      this.setState({
        transitionEnter: true,
        transitionEnterActive: false,

        // reset leave
        transitionLeave: false,
        transitionLeaveActive: false
      }, function () {
        setTimeout(function () {
          if (_this4.componentIsMounted) {
            _this4.setState({
              transitionEnterActive: true
            }, function () {
              setTimeout(function () {
                if (_this4.componentIsMounted) {
                  // clean up
                  _this4.setState({
                    transitionEnter: false,
                    transitionEnterActive: false
                  });
                }
              }, _this4.props.showTransitionDuration);
            });
          }
        }, 16);
      });
    }

    // events

  }, {
    key: 'handleMouseEnter',
    value: function handleMouseEnter(event) {
      this.setState({ hover: true });
      this.props.onMouseLeave(event);

      if (this.props.delayAutoHideOnMouseOver && this.hideTimeoutId) {
        this.cancelAutoHide();
      }
    }
  }, {
    key: 'handleMouseLeave',
    value: function handleMouseLeave(event) {
      this.setState({ hover: false });
      this.props.onMouseEnter(event);

      if (this.props.delayAutoHideOnMouseOver && !this.hideTimeoutId && !this.autoHideCanceledByClick && !this.autoHideCanceledByPin) {
        this.startAutoHideDelay();
      }
    }
  }, {
    key: 'handleOnClick',
    value: function handleOnClick(event) {
      if (this.props.hideOnClick) {
        this.hide();
      } else if (this.props.cancelAutoHideOnClick) {
        if (this.props.pinButton && !this.state.pinned) {
          this.handlePinButtonClick();
        } else {
          this.cancelAutoHide();
          this.autoHideCanceledByClick = true;
        }
      }

      this.props.onClick(event);
    }

    // autoHideDelay

  }, {
    key: 'cancelAutoHide',
    value: function cancelAutoHide() {
      if (this.hideTimeoutId) {
        clearTimeout(this.hideTimeoutId);
        this.hideTimeoutId = null;
      }
    }
  }, {
    key: 'startAutoHideDelay',
    value: function startAutoHideDelay() {
      var _this5 = this;

      if (!this.props.autoHideDelay) {
        return null;
      }

      this.hideTimeoutId = setTimeout(function () {
        _this5.hide();
      }, this.props.autoHideDelay);
    }
  }]);

  return Notification;
}(_react.Component);

function emptyFn() {}

Notification.defaultProps = {
  rootClassName: 'zippy-react-toolkit-notification',
  position: {},
  theme: 'default',
  visible: false,

  // subcomponets
  closeButton: true,

  // events
  onSizeChange: emptyFn,
  onHide: emptyFn,
  onShow: emptyFn,
  onMouseLeave: emptyFn,
  onMouseEnter: emptyFn,
  handleOnClick: emptyFn,
  onClick: emptyFn,
  /**
   * This is an internal api.
   * it calls onClose when the notification can be removed, or not rendered any more.
   * This is done whe  the transition is hide transition is done.
   */
  onClose: emptyFn,

  moveTransition: true,
  showAnimation: true,
  hideAnimation: true
};

Notification.propTypes = {
  rootClassName: _propTypes2.default.string,
  nonBlocking: _propTypes2.default.bool,
  closed: _propTypes2.default.bool,
  rtl: _propTypes2.default.bool,
  relativeToViewport: _propTypes2.default.bool,

  // Subcomponents
  title: _propTypes2.default.oneOfType([_propTypes2.default.node, _propTypes2.default.bool, _propTypes2.default.func]),
  titleEllipsis: _propTypes2.default.bool,
  content: _propTypes2.default.node,
  closeButton: _propTypes2.default.oneOfType([_propTypes2.default.node, _propTypes2.default.func, _propTypes2.default.bool]),
  pinButton: _propTypes2.default.oneOfType([_propTypes2.default.node, _propTypes2.default.func, _propTypes2.default.bool]),
  icon: _propTypes2.default.node,

  position: _propTypes2.default.shape({
    top: _propTypes2.default.number,
    bottom: _propTypes2.default.number,
    left: _propTypes2.default.number,
    right: _propTypes2.default.number
  }),

  push: _propTypes2.default.oneOf(['start', 'end']),
  stacking: _propTypes2.default.arrayOf(_propTypes2.default.oneOf(['top', 'left', 'bottom', 'right', 'center'])),
  clearOpacityOnMouseEnter: _propTypes2.default.bool,
  handleOnClick: _propTypes2.default.func,
  maxNotificationsPerStacking: _propTypes2.default.number,

  // show hide
  autoHideDelay: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.bool]),
  delayAutoHideOnMouseOver: _propTypes2.default.bool,
  cancelAutoHideOnClick: _propTypes2.default.bool,
  hideOnClick: _propTypes2.default.bool,

  // animation
  showAnimation: _propTypes2.default.oneOfType([_propTypes2.default.bool, _propTypes2.default.string]),
  hideAnimation: _propTypes2.default.oneOfType([_propTypes2.default.bool, _propTypes2.default.string]),

  // style
  style: _propTypes2.default.object,
  theme: _propTypes2.default.string,
  border: _propTypes2.default.string,
  borderRadius: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),
  background: _propTypes2.default.string,
  padding: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number, _propTypes2.default.object]),
  height: _propTypes2.default.number,
  width: _propTypes2.default.number,
  minSize: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string, _propTypes2.default.shape({
    height: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]),
    width: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string])
  })]),
  maxSize: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string, _propTypes2.default.shape({
    height: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]),
    width: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string])
  })]),
  offset: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.shape({
    top: _propTypes2.default.number,
    bottom: _propTypes2.default.number,
    left: _propTypes2.default.number,
    right: _propTypes2.default.number
  })]),
  opacity: _propTypes2.default.number,
  shadow: _propTypes2.default.bool,

  widthMeasured: _propTypes2.default.bool, // whether this dimension was read from the dom
  heightMeasured: _propTypes2.default.bool, // whether this dimension was read from the dom

  // visiblity
  visible: _propTypes2.default.bool,
  moveTransition: _propTypes2.default.bool,

  hideTransitionDuration: _propTypes2.default.number,
  showTransitionDuration: _propTypes2.default.number,

  // events
  onMouseLeave: _propTypes2.default.func,
  onMouseEnter: _propTypes2.default.func,
  onSizeChange: _propTypes2.default.func,
  onHide: _propTypes2.default.func,
  onClose: _propTypes2.default.func,
  onShow: _propTypes2.default.func
};

exports.default = Notification;
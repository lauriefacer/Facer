'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; /**
                                                                                                                                                                                                                                                                   * Copyright (c) 2015-present, Zippy Technologies
                                                                                                                                                                                                                                                                   *
                                                                                                                                                                                                                                                                   * This source code is licensed under the MIT license found in the
                                                                                                                                                                                                                                                                   * LICENSE file in the root directory of this source tree.
                                                                                                                                                                                                                                                                   */

/**
 * Adjusts the sizes of the boxes taking into account their offset.
 * @param {[type]} boxes [description]
 */


var _getPositionsRelativeToBottomRight = require('./getPositionsRelativeToBottomRight');

var _getPositionsRelativeToBottomRight2 = _interopRequireDefault(_getPositionsRelativeToBottomRight);

var _translatePositions = require('./translatePositions');

var _translatePositions2 = _interopRequireDefault(_translatePositions);

var _getStackingDirection = require('./getStackingDirection');

var _getStackingDirection2 = _interopRequireDefault(_getStackingDirection);

var _getPositionsRelativeToRegion = require('./getPositionsRelativeToRegion');

var _getPositionsRelativeToRegion2 = _interopRequireDefault(_getPositionsRelativeToRegion);

var _correctBoxesSizeWithOffset = require('./correctBoxesSizeWithOffset');

var _correctBoxesSizeWithOffset2 = _interopRequireDefault(_correctBoxesSizeWithOffset);

var _adjustPositionWithOffset = require('./adjustPositionWithOffset');

var _adjustPositionWithOffset2 = _interopRequireDefault(_adjustPositionWithOffset);

var _translateCenterPosition = require('./translateCenterPosition');

var _translateCenterPosition2 = _interopRequireDefault(_translateCenterPosition);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function getPositions(_ref) {
  var _ref$boxes = _ref.boxes,
      boxes = _ref$boxes === undefined ? [] : _ref$boxes,
      region = _ref.region,
      _ref$stacking = _ref.stacking,
      stacking = _ref$stacking === undefined ? [] : _ref$stacking,
      stackingWrap = _ref.stackingWrap,
      relativeToViewport = _ref.relativeToViewport;

  var newStacking = stacking;

  // stacking is required
  if (!stacking || stacking.length === 0) {
    return null;
  }

  var positions = void 0;

  /**
   * For center positions, a correction has to be made
   */

  if (stacking.indexOf('center') !== -1) {
    newStacking = (0, _translateCenterPosition2.default)(stacking);
    stackingWrap = false;
  }

  var stackingDirection = (0, _getStackingDirection2.default)(stacking);
  var isVertical = stackingDirection[0] === 'vertical';

  // increase size of box if it has offset
  boxes = (0, _correctBoxesSizeWithOffset2.default)(boxes);

  positions = (0, _getPositionsRelativeToBottomRight2.default)({
    boxes: boxes,
    stackingWrap: stackingWrap,
    width: region.width,
    height: region.height,
    isVertical: isVertical
  });

  positions = (0, _translatePositions2.default)({
    positions: positions,
    stacking: newStacking.length === 2 ? newStacking.join('-') : newStacking
  });

  // correct position according to offset
  positions = (0, _adjustPositionWithOffset2.default)(positions);

  positions = (0, _getPositionsRelativeToRegion2.default)({
    region: region,
    positions: positions
  });

  /**
   * If is center remove
   */
  if (stacking.indexOf('center') !== -1) {
    positions = positions.map(function (position) {
      var newPosition = _extends({}, position);
      if (isVertical) {
        delete newPosition.left;
        delete newPosition.right;
      } else {
        delete newPosition.top;
        delete newPosition.bottom;
      }
      return newPosition;
    });
  }

  return positions;
}

exports.default = getPositions;
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

/**
 * Copyright (c) 2015-present, Zippy Technologies
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/**
 * Adjusts the sizes of the boxes taking into account their offset.
 * @param {[type]} boxes [description]
 */

/**
 * Translates:
 * top-center => bottom-right
 * left-center => right-bottom
 * right-center => left-bottom
 * bottom-center => top-right
 */
function translateCenterPosition(stacking) {
  var _stacking = _slicedToArray(stacking, 1),
      firstDirection = _stacking[0];

  var newStacking = void 0;

  switch (firstDirection) {
    case 'top':
      newStacking = ['bottom', 'right'];
      break;
    case 'left':
      newStacking = ['right', 'top'];
      break;
    case 'right':
      newStacking = ['left', 'bottom'];
      break;
    case 'bottom':
      newStacking = ['top', 'right'];
      break;
  }

  return newStacking;
}

exports.default = translateCenterPosition;
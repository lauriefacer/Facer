'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _Notification = require('./Notification');

var _Notification2 = _interopRequireDefault(_Notification);

var _find = require('../../common/find');

var _find2 = _interopRequireDefault(_find);

var _join = require('../../common/join');

var _join2 = _interopRequireDefault(_join);

var _getDefaultConfig = require('./utils/getDefaultConfig');

var _getDefaultConfig2 = _interopRequireDefault(_getDefaultConfig);

var _addPositions2 = require('./utils/addPositions');

var _addPositions3 = _interopRequireDefault(_addPositions2);

var _separateNotificationsByStacking = require('./utils/separateNotificationsByStacking');

var _separateNotificationsByStacking2 = _interopRequireDefault(_separateNotificationsByStacking);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Copyright (c) 2015-present, Zippy Technologies
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * This source code is licensed under the MIT license found in the
file in the root directory of this source tree.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */

var NotificationBoard = function (_Component) {
  _inherits(NotificationBoard, _Component);

  function NotificationBoard(props) {
    _classCallCheck(this, NotificationBoard);

    var _this = _possibleConstructorReturn(this, (NotificationBoard.__proto__ || Object.getPrototypeOf(NotificationBoard)).call(this, props));

    _this.notificationId = 0;

    _this.state = {
      notifications: _this.normalizeNotifications(props.defaultNotifications)
    };

    _this.handleNotificationClose = _this.handleNotificationClose.bind(_this);
    _this.updateNotification = _this.updateNotification.bind(_this);
    _this.addNotification = _this.addNotification.bind(_this);
    _this.showNotification = _this.showNotification.bind(_this);
    _this.handleNotificationSizeChange = _this.handleNotificationSizeChange.bind(_this);
    _this.handleNotificationHide = _this.handleNotificationHide.bind(_this);
    _this.handleNotificationShow = _this.handleNotificationShow.bind(_this);
    _this.handleWindowScroll = _this.handleWindowScroll.bind(_this);

    _this.setRootRef = function (el) {
      _this.rootNode = el;
    };
    return _this;
  }

  _createClass(NotificationBoard, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      this.register();

      if (this.props.updatePositionOnScroll) {
        window.addEventListener('scroll', this.handleWindowScroll);
      }
    }
  }, {
    key: 'UNSAFE_componentWillReceiveProps',
    value: function UNSAFE_componentWillReceiveProps(nextProps) {
      if (this.props.notifications !== nextProps.notifications) {
        var newNotifications = this.normalizeNotifications(nextProps.notifications);
        this.setNotifications(newNotifications);
      }
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      this.unregister();
      window.removeEventListener('scroll', this.handleWindowScroll);
    }
  }, {
    key: 'render',
    value: function render() {
      var _this2 = this;

      var props = this.props;
      var className = (0, _join2.default)(props.className);

      var style = {};

      if (this.props.zIndex) {
        style.zIndex = this.props.zIndex;
      }

      return _react2.default.createElement(
        'div',
        { className: className, ref: this.setRootRef, style: style },
        this.getNotifications().map(function (config, index) {
          // if closed it should not be rendered

          if (config.closed) {
            return null;
          }

          return _react2.default.createElement(_Notification2.default, _extends({}, config, {
            ref: function ref(el) {
              return _this2['notification-' + config.id] = el;
            },
            key: config.id === undefined ? index : config.id,
            relativeToViewport: props.relativeToViewport,
            onHide: _this2.handleNotificationHide,
            onClose: _this2.handleNotificationClose,
            onSizeChange: _this2.handleNotificationSizeChange,
            onShow: _this2.handleNotificationShow
          }));
        })
      );
    }

    /**
     * Takes a description of the new notification
     * it merges it over the default configuration from
     * global props.
     *
     * Selects all the notification with the current stacking and updates
     * their position and then concatinates them back to the list
     *
     *
     *  At this point a notification has no size
     *
     */

  }, {
    key: 'addNotification',
    value: function addNotification() {
      var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      var newNotification = this.normalizeNotification(config);
      var currentStacking = newNotification.stacking;
      var notifications = this.getNotifications();
      var isPushStart = newNotification.push === 'start';
      var maxNotificationsPerStacking = this.props.maxNotificationsPerStacking;

      var _separateNotification = (0, _separateNotificationsByStacking2.default)({
        notifications: notifications,
        stacking: currentStacking
      }),
          filteredNotifications = _separateNotification.filteredNotifications,
          otherNotifications = _separateNotification.otherNotifications;

      if (isPushStart) {
        filteredNotifications = [newNotification].concat(_toConsumableArray(filteredNotifications));
      } else {
        filteredNotifications = [].concat(_toConsumableArray(filteredNotifications), [newNotification]);
      }

      var notificationsOverflow = maxNotificationsPerStacking && maxNotificationsPerStacking < filteredNotifications.length;

      if (notificationsOverflow) {
        var _notificationsOverflow = filteredNotifications.length - maxNotificationsPerStacking;

        filteredNotifications = isPushStart ? filteredNotifications.slice(0, -_notificationsOverflow) : filteredNotifications.slice(_notificationsOverflow);

        filteredNotifications = this.addPositions({
          notifications: filteredNotifications,
          stacking: currentStacking
        });
      }

      // update position only if it has width/height
      if (newNotification.width && newNotification.height || notificationsOverflow) {
        filteredNotifications = this.addPositions({
          notifications: filteredNotifications,
          stacking: currentStacking
        });
      }

      var newNotifications = [].concat(_toConsumableArray(filteredNotifications), _toConsumableArray(otherNotifications));
      this.setNotifications(newNotifications);

      if (this.props.onShow) {
        this.props.onShow(newNotification.id);
      }
      return newNotification.id;
    }
  }, {
    key: 'setNotifications',
    value: function setNotifications(notifications) {
      var done = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : function () {};

      this.setState({ notifications: notifications }, done);
    }

    /**
     * Takes notifications
     */

  }, {
    key: 'addPositions',
    value: function addPositions(_ref) {
      var notifications = _ref.notifications,
          stacking = _ref.stacking;

      return (0, _addPositions3.default)({
        notifications: notifications,
        stacking: stacking,
        relativeToViewport: this.props.relativeToViewport,
        regionOffset: this.props.regionOffset,
        region: this.props.region,
        stackingWrap: this.props.stackingWrap,
        board: this,
        rootNode: this.getRootNode()
      });
    }
  }, {
    key: 'updatePositionForStack',
    value: function updatePositionForStack(_ref2) {
      var notifications = _ref2.notifications,
          stacking = _ref2.stacking;

      var _separateNotification2 = (0, _separateNotificationsByStacking2.default)({
        notifications: notifications,
        stacking: stacking
      }),
          filteredNotifications = _separateNotification2.filteredNotifications,
          otherNotifications = _separateNotification2.otherNotifications;

      filteredNotifications = this.addPositions({
        notifications: filteredNotifications,
        stacking: stacking
      });

      return [].concat(_toConsumableArray(filteredNotifications), _toConsumableArray(otherNotifications));
    }

    /*
     * Calculates positions for all notifications
     */

  }, {
    key: 'updateAllStackPositions',
    value: function updateAllStackPositions(notifications) {
      var _this3 = this;

      if (!notifications) {
        notifications = this.getNotifications();
      }

      if (!notifications) {
        return null;
      }

      var stackings = notifications.reduce(function (acc, item) {
        var stacking = item.stacking.join && item.stacking.join('-');
        if (acc.indexOf(stacking) === -1) {
          acc.push(stacking);
        }
        return acc;
      }, []).map(function (stacking) {
        return stacking.split('-');
      });

      var newNotifications = stackings.reduce(function (acc, stacking) {
        acc = _this3.updatePositionForStack({ notifications: notifications, stacking: stacking });

        return acc;
      }, []);

      return newNotifications;
    }

    /**
     * Returns an array of notifications
     */

  }, {
    key: 'getNotifications',
    value: function getNotifications() {
      return this.isNotificationsControled() ? this.props.notifications : this.state.notifications;
    }
  }, {
    key: 'getNotification',
    value: function getNotification(id) {
      var notifications = this.getNotifications();
      return (0, _find2.default)(notifications, function (o) {
        return o.id === id;
      });
    }
  }, {
    key: 'getNotificationInstance',
    value: function getNotificationInstance(id) {
      return this['notification-' + id];
    }
  }, {
    key: 'isNotificationsControled',
    value: function isNotificationsControled() {
      return this.props.notifications !== undefined;
    }
  }, {
    key: 'getNewNotificationId',
    value: function getNewNotificationId() {
      var id = this.notificationId;
      this.notificationId += 1;

      return id;
    }
  }, {
    key: 'getRootNode',
    value: function getRootNode() {
      return this.rootNode;
    }
  }, {
    key: 'hideNotification',
    value: function hideNotification(id) {
      var found = this.updateNotification({
        id: id,
        changes: { visible: false }
      });
      this.props.onHide(id);

      return found;
    }
  }, {
    key: 'hideAll',
    value: function hideAll() {
      var notifications = this.getNotifications();
      var newNotifications = notifications.map(function (notification) {
        return _extends({}, notification, {
          visible: false
        });
      });

      this.setNotifications(newNotifications);
    }
  }, {
    key: 'showAll',
    value: function showAll() {
      var notifications = this.getNotifications();
      var newNotifications = notifications.map(function (notification) {
        var newNotification = _extends({}, notification);
        /**
         * For notifications to be shown with fade animation
         * they should have visible false and closed undefined
         * so they can go through the noraml flow of mounting
         * calculating size, position and fade
         */

        // delete only where is false
        if (!newNotification.visible) {
          delete newNotification.visible;
        }
        if (newNotification.closed) {
          delete newNotification.closed;
        }

        return newNotification;
      });

      this.setNotifications(newNotifications);
    }
  }, {
    key: 'removeAll',
    value: function removeAll() {
      this.setNotifications([]);
    }
  }, {
    key: 'showNotification',
    value: function showNotification(id) {
      var found = this.updateNotification({
        id: id,
        changes: { visible: null, closed: null }
      });
      this.props.onShow();

      return found;
    }

    // event handlers

  }, {
    key: 'handleNotificationSizeChange',
    value: function handleNotificationSizeChange(config) {
      // update notifications
      this.updateNotification(config);
    }
  }, {
    key: 'handleNotificationShow',
    value: function handleNotificationShow(id) {
      this.updateNotification({
        id: id,
        changes: {
          visible: true
        }
      });

      if (this.props.onShow) {
        this.props.onShow(id);
      }
    }
  }, {
    key: 'handleNotificationHide',
    value: function handleNotificationHide(_ref3) {
      var id = _ref3.id;

      this.updateNotification({ id: id, changes: { visible: false } });

      if (this.props.onHide) {
        this.props.onHide(id);
      }
    }
  }, {
    key: 'handleNotificationClose',
    value: function handleNotificationClose(id) {
      var notification = this.getNotification(id);
      var stacking = notification.stacking;

      if (this.props.removeOnHide) {
        this.removeNotification({ id: id, stacking: stacking });
      } else {
        /**
         * Market as closed.
         * The notification won't be rendered
         * but it's description will be kept.
         */
        this.updateNotification({ id: id, changes: { closed: true }, stacking: stacking });
      }

      if (this.props.onClose) {
        this.props.onClose(id);
      }
    }
  }, {
    key: 'handleWindowScroll',
    value: function handleWindowScroll() {
      var newNotifications = this.updateAllStackPositions();
      this.setNotifications(newNotifications);
    }
  }, {
    key: 'closeNotification',
    value: function closeNotification(id) {
      var notification = this.getNotification(id);
      var stacking = notification.stacking;

      this.updateNotification({ id: id, changes: { closed: true }, stacking: stacking });
    }
  }, {
    key: 'updateNotification',
    value: function updateNotification(_ref4) {
      var id = _ref4.id,
          changes = _ref4.changes,
          stacking = _ref4.stacking;

      var found = false;
      var newNotifications = this.getNotifications().map(function (notification) {
        if (notification.id === id) {
          found = true;
          return _extends({}, notification, changes);
        }
        return notification;
      });

      if (stacking) {
        newNotifications = this.updatePositionForStack({
          stacking: stacking,
          notifications: newNotifications
        });
      }

      this.setNotifications(newNotifications);

      return found;
    }
  }, {
    key: 'removeNotification',
    value: function removeNotification(config) {
      var id = void 0;
      var stacking = void 0;
      if (typeof config == 'number' || typeof config == 'string') {
        id = config;
      } else {
        id = config.id;
        stacking = config.stacking;
      }

      var allNotifications = this.getNotifications();
      var newNotifications = allNotifications.filter(function (notification) {
        return notification.id !== id;
      });

      if (!stacking) {
        var notificaiton = this.getNotification(id);
        if (notificaiton) {
          stacking = notificaiton.stacking;
        }
      }

      var found = newNotifications.length !== allNotifications.length;

      if (found) {
        if (stacking) {
          newNotifications = this.updatePositionForStack({
            stacking: stacking,
            notifications: newNotifications
          });
        }

        this.setNotifications(newNotifications);
        this.props.onRemove(id);
      }

      return found;
    }

    // register/unregister to global namespace

  }, {
    key: 'register',
    value: function register() {
      if (!global.zippy) {
        global.zippy = {};
      }

      if (!global.zippy.notification) {
        global.zippy.notification = {};
      }

      global.zippy.notification[this.props.id] = this;
    }
  }, {
    key: 'unregister',
    value: function unregister() {
      if (global.zippy && global.zippy.notification && global.zippy.notification[this.props.id]) {
        global.zippy.notification[this.props.id] = null;
      }
    }

    /**
     * Adds an id if it doesn't have one.
     * Adds default props.
     */

  }, {
    key: 'normalizeNotification',
    value: function normalizeNotification(notification) {
      var id = notification.id || this.getNewNotificationId();

      var defaultProps = (0, _getDefaultConfig2.default)(this.props);
      var newNotification = _extends({
        id: id
      }, defaultProps, notification);

      // a notification with visible false should be closed
      // so it won't transition into visible
      if (notification.visible === false) {
        newNotification.closed = true;
      }

      // style has to be merged
      if (notification.style && defaultProps.style) {
        newNotification.style = _extends({}, defaultProps.style, notification.style);
      }

      return newNotification;
    }
  }, {
    key: 'normalizeNotifications',
    value: function normalizeNotifications(notifications) {
      var _this4 = this;

      return notifications.map(function (notification) {
        return _this4.normalizeNotification(notification);
      });
    }
  }]);

  return NotificationBoard;
}(_react.Component);

function emptyFn() {}

NotificationBoard.defaultProps = {
  id: 'main',
  defaultNotifications: [],
  hideOnClick: false,
  nonBlocking: false,
  push: 'start',
  relativeToViewport: true,

  // Subcomponents
  closeButton: true,
  titleEllipsis: true,
  opacity: 0.85,

  // style
  borderRadius: 0,
  theme: 'default',

  // hide, show, animations, delay
  autoHideDelay: 3000,
  delayAutoHideOnMouseOver: true,
  cancelAutoHideOnClick: true,
  moveTransition: true,
  showAnimation: true,
  hideAnimation: true,
  hideTransitionDuration: 300,
  showTransitionDuration: 200,

  clearOpacityOnMouseEnter: true,

  onHide: emptyFn,
  onClose: emptyFn,
  onShow: emptyFn,
  onRemove: emptyFn,

  stacking: ['bottom', 'left'],
  region: true,
  regionOffset: 0,
  offset: { left: 5, top: 0, right: 0, bottom: 5 },
  stackingWrap: true,
  removeOnHide: true
};

NotificationBoard.propTypes = {
  id: _propTypes2.default.string,
  defaultNotifications: _propTypes2.default.arrayOf(_propTypes2.default.object),
  clearOpacityOnMouseEnter: _propTypes2.default.bool,
  nonBlocking: _propTypes2.default.bool,
  removeOnHide: _propTypes2.default.bool,
  rtl: _propTypes2.default.bool,
  updatePositionOnScroll: _propTypes2.default.bool,
  relativeToViewport: _propTypes2.default.bool,

  // Subcomponents
  title: _propTypes2.default.oneOfType([_propTypes2.default.node, _propTypes2.default.bool]),
  titleEllipsis: _propTypes2.default.bool,
  closeButton: _propTypes2.default.oneOfType([_propTypes2.default.node, _propTypes2.default.func, _propTypes2.default.bool]),
  pinButton: _propTypes2.default.oneOfType([_propTypes2.default.node, _propTypes2.default.func, _propTypes2.default.bool]),
  icon: _propTypes2.default.node,
  content: _propTypes2.default.node,

  theme: _propTypes2.default.string,

  // hide, show, animations, delay
  autoHideDelay: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.bool]),
  delayAutoHideOnMouseOver: _propTypes2.default.bool,
  cancelAutoHideOnClick: _propTypes2.default.bool,
  moveTransition: _propTypes2.default.bool,
  showAnimation: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.bool]),
  hideAnimation: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.bool]),
  hideTransitionDuration: _propTypes2.default.number,
  showTransitionDuration: _propTypes2.default.number,

  // style
  style: _propTypes2.default.object,
  border: _propTypes2.default.string,
  borderRadius: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),
  background: _propTypes2.default.string,
  padding: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number, _propTypes2.default.object]),
  height: _propTypes2.default.number,
  width: _propTypes2.default.number,
  minSize: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string, _propTypes2.default.shape({
    height: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]),
    width: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string])
  })]),
  maxSize: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string, _propTypes2.default.shape({
    height: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]),
    width: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string])
  })]),
  opacity: _propTypes2.default.number,
  shadow: _propTypes2.default.bool,

  // position
  push: _propTypes2.default.oneOf(['start', 'end']),
  stacking: _propTypes2.default.arrayOf(_propTypes2.default.oneOf(['top', 'left', 'bottom', 'right', 'center'])),
  region: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.object, _propTypes2.default.func, _propTypes2.default.bool]),
  regionOffset: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.shape({
    top: _propTypes2.default.number,
    bottom: _propTypes2.default.number,
    left: _propTypes2.default.number,
    right: _propTypes2.default.number
  })]),
  offset: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.shape({
    top: _propTypes2.default.number,
    bottom: _propTypes2.default.number,
    left: _propTypes2.default.number,
    right: _propTypes2.default.number
  })]),
  stackingWrap: _propTypes2.default.bool,

  // events
  onHide: _propTypes2.default.func,
  onClose: _propTypes2.default.func,
  onShow: _propTypes2.default.func,
  onRemove: _propTypes2.default.func
};

exports.default = NotificationBoard;
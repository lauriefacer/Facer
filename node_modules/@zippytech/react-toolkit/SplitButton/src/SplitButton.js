'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _ZippySplitButton$pro;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('react-dom');

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _cleanProps = require('../../common/cleanProps');

var _cleanProps2 = _interopRequireDefault(_cleanProps);

var _DropdownButton = require('../../DropdownButton');

var _DropdownButton2 = _interopRequireDefault(_DropdownButton);

var _Button = require('../../Button');

var _Button2 = _interopRequireDefault(_Button);

var _join = require('../../common/join');

var _join2 = _interopRequireDefault(_join);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Copyright (c) 2015-present, Zippy Technologies
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * This source code is licensed under the MIT license found in the
file in the root directory of this source tree.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */

var ZippySplitButton = function (_Component) {
  _inherits(ZippySplitButton, _Component);

  function ZippySplitButton(props) {
    _classCallCheck(this, ZippySplitButton);

    var _this = _possibleConstructorReturn(this, (ZippySplitButton.__proto__ || Object.getPrototypeOf(ZippySplitButton)).call(this, props));

    _this.state = {
      focused: false,
      expanded: props.defaultExpanded
    };

    _this.handleBlur = _this.handleBlur.bind(_this);
    _this.onExpandedChange = _this.onExpandedChange.bind(_this);
    _this.handleFocus = _this.handleFocus.bind(_this);
    return _this;
  }

  _createClass(ZippySplitButton, [{
    key: 'onExpandedChange',
    value: function onExpandedChange(expanded) {
      this.props.onExpandedChange(expanded);

      if (this.props.expanded === undefined) {
        this.setState({
          expanded: expanded
        });
      }
    }
  }, {
    key: 'getExpanded',
    value: function getExpanded() {
      return this.props.expanded === undefined ? this.state.expanded : this.props.expanded;
    }
  }, {
    key: 'handleBlur',
    value: function handleBlur(event) {
      if (this.props.disabled) {
        return;
      }
      this.setState({
        focused: false
      });

      this.props.onBlur(event);
    }
  }, {
    key: 'handleFocus',
    value: function handleFocus(event) {
      if (this.props.disabled) {
        return;
      }
      this.setState({
        focused: true
      });

      this.props.onFocus(event);
    }
  }, {
    key: 'render',
    value: function render() {
      var props = this.props;


      var className = (0, _join2.default)(props.rootClassName, props.className, props.rtl ? props.rootClassName + '--rtl' : props.rootClassName + '--ltr', this.state.focused && props.rootClassName + '--focused', this.getExpanded() && props.rootClassName + '--expanded', props.disabled && props.rootClassName + '--disabled', props.theme && props.rootClassName + '--theme-' + props.theme);

      return _react2.default.createElement(
        'div',
        _extends({}, (0, _cleanProps2.default)(props, ZippySplitButton.propTypes), {
          className: className
        }),
        _react2.default.createElement(_Button2.default, _extends({}, this.getCommonProps(), this.getButtonProps())),
        _react2.default.createElement(_DropdownButton2.default, _extends({}, this.getCommonProps(), this.getDropdownButtonProps()))
      );
    }
  }, {
    key: 'getCommonProps',
    value: function getCommonProps() {
      var props = this.props;


      return {
        disabled: props.disabled,
        rtl: props.rtl,
        theme: props.theme,
        onFocus: this.handleFocus,
        onBlur: this.handleBlur
      };
    }
  }, {
    key: 'getButtonProps',
    value: function getButtonProps() {
      var props = this.props;


      return _extends({
        tagName: props.tagName,
        icon: props.icon,
        iconPosition: props.iconPosition || props.arrowPosition
      }, props.buttonProps, {
        onClick: function onClick() {
          props.onClick.apply(props, arguments);
          if (typeof props.buttonProps === 'function') {
            var _props$buttonProps;

            (_props$buttonProps = props.buttonProps).onClick.apply(_props$buttonProps, arguments);
          }
        },

        children: props.children,
        className: (0, _join2.default)(props.rootClassName + '__button', props.buttonProps.className)
      });
    }
  }, {
    key: 'getDropdownButtonProps',
    value: function getDropdownButtonProps() {
      var _this2 = this;

      var props = this.props;

      return _extends({}, props.dropdownButtonWrapperProps, {
        getAlignNode: function getAlignNode() {
          var node = (0, _reactDom.findDOMNode)(_this2);

          return node;
        },
        onClick: props.onDropdownButtonClick,
        onExpandedChange: this.onExpandedChange,
        items: props.items,
        expanded: props.expanded,
        defaultExpanded: props.defaultExpanded,
        onMenuClick: props.onMenuClick,
        menu: props.menu,
        buttonProps: props.dropdownButtonProps,
        menuProps: props.menuProps,
        renderMenu: props.renderMenu,
        className: (0, _join2.default)(props.rootClassName + '__dropdown-button', props.menuProps.className)
      });
    }
  }]);

  return ZippySplitButton;
}(_react.Component);

function emptyFn() {}

ZippySplitButton.defaultProps = {
  rootClassName: 'zippy-react-toolkit-split-button',
  theme: 'default',
  onClick: emptyFn,
  onDropdownButtonClick: emptyFn,
  onMenuClick: emptyFn,
  onFocus: emptyFn,
  onBlur: emptyFn,
  onExpandedChange: emptyFn,
  items: [],
  buttonProps: {},
  menuProps: {},
  defaultExpanded: false,
  arrowPosition: 'end',
  rtl: false,
  isZippyButton: true
};

ZippySplitButton.propTypes = (_ZippySplitButton$pro = {
  rtl: _propTypes2.default.bool,
  isZippyButton: _propTypes2.default.bool,
  theme: _propTypes2.default.string,
  tagName: _propTypes2.default.string,
  renderMenu: _propTypes2.default.func
}, _defineProperty(_ZippySplitButton$pro, 'theme', _propTypes2.default.string), _defineProperty(_ZippySplitButton$pro, 'rootClassName', _propTypes2.default.string), _defineProperty(_ZippySplitButton$pro, 'onClick', _propTypes2.default.func), _defineProperty(_ZippySplitButton$pro, 'icon', _propTypes2.default.node), _defineProperty(_ZippySplitButton$pro, 'iconPosition', _propTypes2.default.oneOf(['left', 'right', 'start', 'end'])), _defineProperty(_ZippySplitButton$pro, 'arrowPosition', _propTypes2.default.oneOf(['left', 'right', 'start', 'end'])), _defineProperty(_ZippySplitButton$pro, 'buttonProps', _propTypes2.default.object), _defineProperty(_ZippySplitButton$pro, 'dropdownButtonWrapperProps', _propTypes2.default.object), _defineProperty(_ZippySplitButton$pro, 'dropdownButtonProps', _propTypes2.default.object), _defineProperty(_ZippySplitButton$pro, 'disabled', _propTypes2.default.bool), _defineProperty(_ZippySplitButton$pro, 'onExpandedChange', _propTypes2.default.func), _defineProperty(_ZippySplitButton$pro, 'onDropdownButtonClick', _propTypes2.default.func), _defineProperty(_ZippySplitButton$pro, 'onMenuClick', _propTypes2.default.func), _defineProperty(_ZippySplitButton$pro, 'onClick', _propTypes2.default.func), _defineProperty(_ZippySplitButton$pro, 'menuProps', _propTypes2.default.object), _defineProperty(_ZippySplitButton$pro, 'items', _propTypes2.default.array), _defineProperty(_ZippySplitButton$pro, 'menu', _propTypes2.default.func), _defineProperty(_ZippySplitButton$pro, 'expanded', _propTypes2.default.bool), _defineProperty(_ZippySplitButton$pro, 'pressed', _propTypes2.default.bool), _defineProperty(_ZippySplitButton$pro, 'defaultExpanded', _propTypes2.default.bool), _ZippySplitButton$pro);

exports.default = ZippySplitButton;